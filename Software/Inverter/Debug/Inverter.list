
Inverter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085b8  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080086c4  080086c4  000186c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800872c  0800872c  000202cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800872c  0800872c  000202cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800872c  0800872c  000202cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008730  08008730  00018730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002cc  20000000  08008734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000008bc  200002cc  08008a00  000202cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b88  08008a00  00020b88  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015b58  00000000  00000000  000202f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031e3  00000000  00000000  00035e4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ff8  00000000  00000000  00039030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e90  00000000  00000000  0003a028  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a246  00000000  00000000  0003aeb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014989  00000000  00000000  000550fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d3f8  00000000  00000000  00069a87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f6e7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004150  00000000  00000000  000f6ed4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002cc 	.word	0x200002cc
 8000128:	00000000 	.word	0x00000000
 800012c:	080086ac 	.word	0x080086ac

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002d0 	.word	0x200002d0
 8000148:	080086ac 	.word	0x080086ac

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fb30 	bl	80007b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f814 	bl	8000180 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f93e 	bl	80003d8 <MX_GPIO_Init>
  MX_DMA_Init();
 800015c:	f000 f91e 	bl	800039c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000160:	f007 febe 	bl	8007ee0 <MX_USB_DEVICE_Init>
  MX_TIM2_Init();
 8000164:	f000 f868 	bl	8000238 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000168:	f000 f8be 	bl	80002e8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */


							  //HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);

							  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800016c:	2100      	movs	r1, #0
 800016e:	4803      	ldr	r0, [pc, #12]	; (800017c <main+0x30>)
 8000170:	f003 fa22 	bl	80035b8 <HAL_TIM_PWM_Start>
							  HAL_TIM_Base_Start_IT(&htim3);
 8000174:	4801      	ldr	r0, [pc, #4]	; (800017c <main+0x30>)
 8000176:	f003 f97d 	bl	8003474 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800017a:	e7fe      	b.n	800017a <main+0x2e>
 800017c:	20000344 	.word	0x20000344

08000180 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000180:	b580      	push	{r7, lr}
 8000182:	b094      	sub	sp, #80	; 0x50
 8000184:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000186:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800018a:	2228      	movs	r2, #40	; 0x28
 800018c:	2100      	movs	r1, #0
 800018e:	4618      	mov	r0, r3
 8000190:	f008 fa84 	bl	800869c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000194:	f107 0314 	add.w	r3, r7, #20
 8000198:	2200      	movs	r2, #0
 800019a:	601a      	str	r2, [r3, #0]
 800019c:	605a      	str	r2, [r3, #4]
 800019e:	609a      	str	r2, [r3, #8]
 80001a0:	60da      	str	r2, [r3, #12]
 80001a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
 80001aa:	605a      	str	r2, [r3, #4]
 80001ac:	609a      	str	r2, [r3, #8]
 80001ae:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001b0:	2301      	movs	r3, #1
 80001b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80001ba:	2300      	movs	r3, #0
 80001bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80001be:	2301      	movs	r3, #1
 80001c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80001c2:	2302      	movs	r3, #2
 80001c4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80001c6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80001ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80001cc:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80001d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80001d6:	4618      	mov	r0, r3
 80001d8:	f002 fcae 	bl	8002b38 <HAL_RCC_OscConfig>
 80001dc:	4603      	mov	r3, r0
 80001de:	2b00      	cmp	r3, #0
 80001e0:	d001      	beq.n	80001e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80001e2:	f000 f987 	bl	80004f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001e6:	230f      	movs	r3, #15
 80001e8:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001ea:	2302      	movs	r3, #2
 80001ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001f6:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV16;
 80001f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80001fc:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001fe:	f107 0314 	add.w	r3, r7, #20
 8000202:	2102      	movs	r1, #2
 8000204:	4618      	mov	r0, r3
 8000206:	f002 ff17 	bl	8003038 <HAL_RCC_ClockConfig>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000210:	f000 f970 	bl	80004f4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000214:	2310      	movs	r3, #16
 8000216:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL_DIV1_5;
 8000218:	2300      	movs	r3, #0
 800021a:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	4618      	mov	r0, r3
 8000220:	f003 f872 	bl	8003308 <HAL_RCCEx_PeriphCLKConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800022a:	f000 f963 	bl	80004f4 <Error_Handler>
  }
}
 800022e:	bf00      	nop
 8000230:	3750      	adds	r7, #80	; 0x50
 8000232:	46bd      	mov	sp, r7
 8000234:	bd80      	pop	{r7, pc}
	...

08000238 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000238:	b580      	push	{r7, lr}
 800023a:	b08a      	sub	sp, #40	; 0x28
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800023e:	f107 0320 	add.w	r3, r7, #32
 8000242:	2200      	movs	r2, #0
 8000244:	601a      	str	r2, [r3, #0]
 8000246:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000248:	1d3b      	adds	r3, r7, #4
 800024a:	2200      	movs	r2, #0
 800024c:	601a      	str	r2, [r3, #0]
 800024e:	605a      	str	r2, [r3, #4]
 8000250:	609a      	str	r2, [r3, #8]
 8000252:	60da      	str	r2, [r3, #12]
 8000254:	611a      	str	r2, [r3, #16]
 8000256:	615a      	str	r2, [r3, #20]
 8000258:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800025a:	4b22      	ldr	r3, [pc, #136]	; (80002e4 <MX_TIM2_Init+0xac>)
 800025c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000260:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000262:	4b20      	ldr	r3, [pc, #128]	; (80002e4 <MX_TIM2_Init+0xac>)
 8000264:	2200      	movs	r2, #0
 8000266:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000268:	4b1e      	ldr	r3, [pc, #120]	; (80002e4 <MX_TIM2_Init+0xac>)
 800026a:	2220      	movs	r2, #32
 800026c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 3955;
 800026e:	4b1d      	ldr	r3, [pc, #116]	; (80002e4 <MX_TIM2_Init+0xac>)
 8000270:	f640 7273 	movw	r2, #3955	; 0xf73
 8000274:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000276:	4b1b      	ldr	r3, [pc, #108]	; (80002e4 <MX_TIM2_Init+0xac>)
 8000278:	2200      	movs	r2, #0
 800027a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800027c:	4b19      	ldr	r3, [pc, #100]	; (80002e4 <MX_TIM2_Init+0xac>)
 800027e:	2200      	movs	r2, #0
 8000280:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000282:	4818      	ldr	r0, [pc, #96]	; (80002e4 <MX_TIM2_Init+0xac>)
 8000284:	f003 f948 	bl	8003518 <HAL_TIM_PWM_Init>
 8000288:	4603      	mov	r3, r0
 800028a:	2b00      	cmp	r3, #0
 800028c:	d001      	beq.n	8000292 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800028e:	f000 f931 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000292:	2320      	movs	r3, #32
 8000294:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000296:	2300      	movs	r3, #0
 8000298:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800029a:	f107 0320 	add.w	r3, r7, #32
 800029e:	4619      	mov	r1, r3
 80002a0:	4810      	ldr	r0, [pc, #64]	; (80002e4 <MX_TIM2_Init+0xac>)
 80002a2:	f004 f90d 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 80002ac:	f000 f922 	bl	80004f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80002b0:	2360      	movs	r3, #96	; 0x60
 80002b2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 1;
 80002b4:	2301      	movs	r3, #1
 80002b6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80002b8:	2300      	movs	r3, #0
 80002ba:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 80002bc:	2304      	movs	r3, #4
 80002be:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80002c0:	1d3b      	adds	r3, r7, #4
 80002c2:	2200      	movs	r2, #0
 80002c4:	4619      	mov	r1, r3
 80002c6:	4807      	ldr	r0, [pc, #28]	; (80002e4 <MX_TIM2_Init+0xac>)
 80002c8:	f003 fd1e 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80002d2:	f000 f90f 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80002d6:	4803      	ldr	r0, [pc, #12]	; (80002e4 <MX_TIM2_Init+0xac>)
 80002d8:	f000 f9a8 	bl	800062c <HAL_TIM_MspPostInit>

}
 80002dc:	bf00      	nop
 80002de:	3728      	adds	r7, #40	; 0x28
 80002e0:	46bd      	mov	sp, r7
 80002e2:	bd80      	pop	{r7, pc}
 80002e4:	2000038c 	.word	0x2000038c

080002e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	b08a      	sub	sp, #40	; 0x28
 80002ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002ee:	f107 0320 	add.w	r3, r7, #32
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
 80002f6:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002f8:	1d3b      	adds	r3, r7, #4
 80002fa:	2200      	movs	r2, #0
 80002fc:	601a      	str	r2, [r3, #0]
 80002fe:	605a      	str	r2, [r3, #4]
 8000300:	609a      	str	r2, [r3, #8]
 8000302:	60da      	str	r2, [r3, #12]
 8000304:	611a      	str	r2, [r3, #16]
 8000306:	615a      	str	r2, [r3, #20]
 8000308:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800030a:	4b22      	ldr	r3, [pc, #136]	; (8000394 <MX_TIM3_Init+0xac>)
 800030c:	4a22      	ldr	r2, [pc, #136]	; (8000398 <MX_TIM3_Init+0xb0>)
 800030e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 159;
 8000310:	4b20      	ldr	r3, [pc, #128]	; (8000394 <MX_TIM3_Init+0xac>)
 8000312:	229f      	movs	r2, #159	; 0x9f
 8000314:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000316:	4b1f      	ldr	r3, [pc, #124]	; (8000394 <MX_TIM3_Init+0xac>)
 8000318:	2200      	movs	r2, #0
 800031a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 4500;
 800031c:	4b1d      	ldr	r3, [pc, #116]	; (8000394 <MX_TIM3_Init+0xac>)
 800031e:	f241 1294 	movw	r2, #4500	; 0x1194
 8000322:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000324:	4b1b      	ldr	r3, [pc, #108]	; (8000394 <MX_TIM3_Init+0xac>)
 8000326:	2200      	movs	r2, #0
 8000328:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032a:	4b1a      	ldr	r3, [pc, #104]	; (8000394 <MX_TIM3_Init+0xac>)
 800032c:	2200      	movs	r2, #0
 800032e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000330:	4818      	ldr	r0, [pc, #96]	; (8000394 <MX_TIM3_Init+0xac>)
 8000332:	f003 f8f1 	bl	8003518 <HAL_TIM_PWM_Init>
 8000336:	4603      	mov	r3, r0
 8000338:	2b00      	cmp	r3, #0
 800033a:	d001      	beq.n	8000340 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800033c:	f000 f8da 	bl	80004f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000340:	2300      	movs	r3, #0
 8000342:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000344:	2300      	movs	r3, #0
 8000346:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000348:	f107 0320 	add.w	r3, r7, #32
 800034c:	4619      	mov	r1, r3
 800034e:	4811      	ldr	r0, [pc, #68]	; (8000394 <MX_TIM3_Init+0xac>)
 8000350:	f004 f8b6 	bl	80044c0 <HAL_TIMEx_MasterConfigSynchronization>
 8000354:	4603      	mov	r3, r0
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800035a:	f000 f8cb 	bl	80004f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800035e:	2360      	movs	r3, #96	; 0x60
 8000360:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 2250;
 8000362:	f640 03ca 	movw	r3, #2250	; 0x8ca
 8000366:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000368:	2300      	movs	r3, #0
 800036a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800036c:	2300      	movs	r3, #0
 800036e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000370:	1d3b      	adds	r3, r7, #4
 8000372:	2200      	movs	r2, #0
 8000374:	4619      	mov	r1, r3
 8000376:	4807      	ldr	r0, [pc, #28]	; (8000394 <MX_TIM3_Init+0xac>)
 8000378:	f003 fcc6 	bl	8003d08 <HAL_TIM_PWM_ConfigChannel>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8000382:	f000 f8b7 	bl	80004f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000386:	4803      	ldr	r0, [pc, #12]	; (8000394 <MX_TIM3_Init+0xac>)
 8000388:	f000 f950 	bl	800062c <HAL_TIM_MspPostInit>

}
 800038c:	bf00      	nop
 800038e:	3728      	adds	r7, #40	; 0x28
 8000390:	46bd      	mov	sp, r7
 8000392:	bd80      	pop	{r7, pc}
 8000394:	20000344 	.word	0x20000344
 8000398:	40000400 	.word	0x40000400

0800039c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800039c:	b580      	push	{r7, lr}
 800039e:	b082      	sub	sp, #8
 80003a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80003a2:	4b0c      	ldr	r3, [pc, #48]	; (80003d4 <MX_DMA_Init+0x38>)
 80003a4:	695b      	ldr	r3, [r3, #20]
 80003a6:	4a0b      	ldr	r2, [pc, #44]	; (80003d4 <MX_DMA_Init+0x38>)
 80003a8:	f043 0301 	orr.w	r3, r3, #1
 80003ac:	6153      	str	r3, [r2, #20]
 80003ae:	4b09      	ldr	r3, [pc, #36]	; (80003d4 <MX_DMA_Init+0x38>)
 80003b0:	695b      	ldr	r3, [r3, #20]
 80003b2:	f003 0301 	and.w	r3, r3, #1
 80003b6:	607b      	str	r3, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003ba:	2200      	movs	r2, #0
 80003bc:	2100      	movs	r1, #0
 80003be:	200f      	movs	r0, #15
 80003c0:	f000 fb31 	bl	8000a26 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003c4:	200f      	movs	r0, #15
 80003c6:	f000 fb4a 	bl	8000a5e <HAL_NVIC_EnableIRQ>

}
 80003ca:	bf00      	nop
 80003cc:	3708      	adds	r7, #8
 80003ce:	46bd      	mov	sp, r7
 80003d0:	bd80      	pop	{r7, pc}
 80003d2:	bf00      	nop
 80003d4:	40021000 	.word	0x40021000

080003d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003d8:	b580      	push	{r7, lr}
 80003da:	b088      	sub	sp, #32
 80003dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003de:	f107 0310 	add.w	r3, r7, #16
 80003e2:	2200      	movs	r2, #0
 80003e4:	601a      	str	r2, [r3, #0]
 80003e6:	605a      	str	r2, [r3, #4]
 80003e8:	609a      	str	r2, [r3, #8]
 80003ea:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ec:	4b32      	ldr	r3, [pc, #200]	; (80004b8 <MX_GPIO_Init+0xe0>)
 80003ee:	699b      	ldr	r3, [r3, #24]
 80003f0:	4a31      	ldr	r2, [pc, #196]	; (80004b8 <MX_GPIO_Init+0xe0>)
 80003f2:	f043 0310 	orr.w	r3, r3, #16
 80003f6:	6193      	str	r3, [r2, #24]
 80003f8:	4b2f      	ldr	r3, [pc, #188]	; (80004b8 <MX_GPIO_Init+0xe0>)
 80003fa:	699b      	ldr	r3, [r3, #24]
 80003fc:	f003 0310 	and.w	r3, r3, #16
 8000400:	60fb      	str	r3, [r7, #12]
 8000402:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000404:	4b2c      	ldr	r3, [pc, #176]	; (80004b8 <MX_GPIO_Init+0xe0>)
 8000406:	699b      	ldr	r3, [r3, #24]
 8000408:	4a2b      	ldr	r2, [pc, #172]	; (80004b8 <MX_GPIO_Init+0xe0>)
 800040a:	f043 0320 	orr.w	r3, r3, #32
 800040e:	6193      	str	r3, [r2, #24]
 8000410:	4b29      	ldr	r3, [pc, #164]	; (80004b8 <MX_GPIO_Init+0xe0>)
 8000412:	699b      	ldr	r3, [r3, #24]
 8000414:	f003 0320 	and.w	r3, r3, #32
 8000418:	60bb      	str	r3, [r7, #8]
 800041a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800041c:	4b26      	ldr	r3, [pc, #152]	; (80004b8 <MX_GPIO_Init+0xe0>)
 800041e:	699b      	ldr	r3, [r3, #24]
 8000420:	4a25      	ldr	r2, [pc, #148]	; (80004b8 <MX_GPIO_Init+0xe0>)
 8000422:	f043 0304 	orr.w	r3, r3, #4
 8000426:	6193      	str	r3, [r2, #24]
 8000428:	4b23      	ldr	r3, [pc, #140]	; (80004b8 <MX_GPIO_Init+0xe0>)
 800042a:	699b      	ldr	r3, [r3, #24]
 800042c:	f003 0304 	and.w	r3, r3, #4
 8000430:	607b      	str	r3, [r7, #4]
 8000432:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000434:	2200      	movs	r2, #0
 8000436:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800043a:	4820      	ldr	r0, [pc, #128]	; (80004bc <MX_GPIO_Init+0xe4>)
 800043c:	f000 fe9c 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_100Hz_GPIO_Port, OUT_100Hz_Pin, GPIO_PIN_RESET);
 8000440:	2200      	movs	r2, #0
 8000442:	2102      	movs	r1, #2
 8000444:	481e      	ldr	r0, [pc, #120]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000446:	f000 fe97 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, GPIO_PIN_SET);
 800044a:	2201      	movs	r2, #1
 800044c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000450:	481b      	ldr	r0, [pc, #108]	; (80004c0 <MX_GPIO_Init+0xe8>)
 8000452:	f000 fe91 	bl	8001178 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000456:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800045a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800045c:	2301      	movs	r3, #1
 800045e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000460:	2300      	movs	r3, #0
 8000462:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000464:	2302      	movs	r3, #2
 8000466:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	4619      	mov	r1, r3
 800046e:	4813      	ldr	r0, [pc, #76]	; (80004bc <MX_GPIO_Init+0xe4>)
 8000470:	f000 fcfe 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_100Hz_Pin */
  GPIO_InitStruct.Pin = OUT_100Hz_Pin;
 8000474:	2302      	movs	r3, #2
 8000476:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000478:	2301      	movs	r3, #1
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800047c:	2300      	movs	r3, #0
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000480:	2302      	movs	r3, #2
 8000482:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(OUT_100Hz_GPIO_Port, &GPIO_InitStruct);
 8000484:	f107 0310 	add.w	r3, r7, #16
 8000488:	4619      	mov	r1, r3
 800048a:	480d      	ldr	r0, [pc, #52]	; (80004c0 <MX_GPIO_Init+0xe8>)
 800048c:	f000 fcf0 	bl	8000e70 <HAL_GPIO_Init>

  /*Configure GPIO pin : SPI1_CS_Pin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000490:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000494:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000496:	2301      	movs	r3, #1
 8000498:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800049a:	2300      	movs	r3, #0
 800049c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800049e:	2303      	movs	r3, #3
 80004a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 80004a2:	f107 0310 	add.w	r3, r7, #16
 80004a6:	4619      	mov	r1, r3
 80004a8:	4805      	ldr	r0, [pc, #20]	; (80004c0 <MX_GPIO_Init+0xe8>)
 80004aa:	f000 fce1 	bl	8000e70 <HAL_GPIO_Init>

}
 80004ae:	bf00      	nop
 80004b0:	3720      	adds	r7, #32
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}
 80004b6:	bf00      	nop
 80004b8:	40021000 	.word	0x40021000
 80004bc:	40011000 	.word	0x40011000
 80004c0:	40010800 	.word	0x40010800

080004c4 <Timer2Reset>:

/* USER CODE BEGIN 4 */

void Timer2Reset()
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(OUT_100Hz_GPIO_Port, OUT_100Hz_Pin);
 80004c8:	2102      	movs	r1, #2
 80004ca:	4807      	ldr	r0, [pc, #28]	; (80004e8 <Timer2Reset+0x24>)
 80004cc:	f000 fe6c 	bl	80011a8 <HAL_GPIO_TogglePin>
	HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80004d0:	2100      	movs	r1, #0
 80004d2:	4806      	ldr	r0, [pc, #24]	; (80004ec <Timer2Reset+0x28>)
 80004d4:	f003 f912 	bl	80036fc <HAL_TIM_PWM_Stop>
    HAL_TIM_PWM_Start_DMA(&htim2, TIM_CHANNEL_1, Sin_Table, STEPS);
 80004d8:	235a      	movs	r3, #90	; 0x5a
 80004da:	4a05      	ldr	r2, [pc, #20]	; (80004f0 <Timer2Reset+0x2c>)
 80004dc:	2100      	movs	r1, #0
 80004de:	4803      	ldr	r0, [pc, #12]	; (80004ec <Timer2Reset+0x28>)
 80004e0:	f003 f970 	bl	80037c4 <HAL_TIM_PWM_Start_DMA>
}
 80004e4:	bf00      	nop
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	40010800 	.word	0x40010800
 80004ec:	2000038c 	.word	0x2000038c
 80004f0:	20000000 	.word	0x20000000

080004f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004f4:	b480      	push	{r7}
 80004f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004f8:	b672      	cpsid	i
}
 80004fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004fc:	e7fe      	b.n	80004fc <Error_Handler+0x8>
	...

08000500 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000506:	4b15      	ldr	r3, [pc, #84]	; (800055c <HAL_MspInit+0x5c>)
 8000508:	699b      	ldr	r3, [r3, #24]
 800050a:	4a14      	ldr	r2, [pc, #80]	; (800055c <HAL_MspInit+0x5c>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6193      	str	r3, [r2, #24]
 8000512:	4b12      	ldr	r3, [pc, #72]	; (800055c <HAL_MspInit+0x5c>)
 8000514:	699b      	ldr	r3, [r3, #24]
 8000516:	f003 0301 	and.w	r3, r3, #1
 800051a:	60bb      	str	r3, [r7, #8]
 800051c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800051e:	4b0f      	ldr	r3, [pc, #60]	; (800055c <HAL_MspInit+0x5c>)
 8000520:	69db      	ldr	r3, [r3, #28]
 8000522:	4a0e      	ldr	r2, [pc, #56]	; (800055c <HAL_MspInit+0x5c>)
 8000524:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000528:	61d3      	str	r3, [r2, #28]
 800052a:	4b0c      	ldr	r3, [pc, #48]	; (800055c <HAL_MspInit+0x5c>)
 800052c:	69db      	ldr	r3, [r3, #28]
 800052e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000532:	607b      	str	r3, [r7, #4]
 8000534:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000536:	4b0a      	ldr	r3, [pc, #40]	; (8000560 <HAL_MspInit+0x60>)
 8000538:	685b      	ldr	r3, [r3, #4]
 800053a:	60fb      	str	r3, [r7, #12]
 800053c:	68fb      	ldr	r3, [r7, #12]
 800053e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000542:	60fb      	str	r3, [r7, #12]
 8000544:	68fb      	ldr	r3, [r7, #12]
 8000546:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800054a:	60fb      	str	r3, [r7, #12]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <HAL_MspInit+0x60>)
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000552:	bf00      	nop
 8000554:	3714      	adds	r7, #20
 8000556:	46bd      	mov	sp, r7
 8000558:	bc80      	pop	{r7}
 800055a:	4770      	bx	lr
 800055c:	40021000 	.word	0x40021000
 8000560:	40010000 	.word	0x40010000

08000564 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000564:	b580      	push	{r7, lr}
 8000566:	b084      	sub	sp, #16
 8000568:	af00      	add	r7, sp, #0
 800056a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000574:	d135      	bne.n	80005e2 <HAL_TIM_PWM_MspInit+0x7e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <HAL_TIM_PWM_MspInit+0xb8>)
 8000578:	69db      	ldr	r3, [r3, #28]
 800057a:	4a28      	ldr	r2, [pc, #160]	; (800061c <HAL_TIM_PWM_MspInit+0xb8>)
 800057c:	f043 0301 	orr.w	r3, r3, #1
 8000580:	61d3      	str	r3, [r2, #28]
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <HAL_TIM_PWM_MspInit+0xb8>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	f003 0301 	and.w	r3, r3, #1
 800058a:	60fb      	str	r3, [r7, #12]
 800058c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800058e:	4b24      	ldr	r3, [pc, #144]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 8000590:	4a24      	ldr	r2, [pc, #144]	; (8000624 <HAL_TIM_PWM_MspInit+0xc0>)
 8000592:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000594:	4b22      	ldr	r3, [pc, #136]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 8000596:	2210      	movs	r2, #16
 8000598:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 800059a:	4b21      	ldr	r3, [pc, #132]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 800059c:	2200      	movs	r2, #0
 800059e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 80005a0:	4b1f      	ldr	r3, [pc, #124]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005a2:	2280      	movs	r2, #128	; 0x80
 80005a4:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80005a6:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ac:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80005ae:	4b1c      	ldr	r3, [pc, #112]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005b0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80005b4:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005be:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80005c2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80005c4:	4816      	ldr	r0, [pc, #88]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005c6:	f000 fa65 	bl	8000a94 <HAL_DMA_Init>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <HAL_TIM_PWM_MspInit+0x70>
    {
      Error_Handler();
 80005d0:	f7ff ff90 	bl	80004f4 <Error_Handler>
    }

    __HAL_LINKDMA(htim_pwm,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005d8:	625a      	str	r2, [r3, #36]	; 0x24
 80005da:	4a11      	ldr	r2, [pc, #68]	; (8000620 <HAL_TIM_PWM_MspInit+0xbc>)
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80005e0:	e018      	b.n	8000614 <HAL_TIM_PWM_MspInit+0xb0>
  else if(htim_pwm->Instance==TIM3)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a10      	ldr	r2, [pc, #64]	; (8000628 <HAL_TIM_PWM_MspInit+0xc4>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d113      	bne.n	8000614 <HAL_TIM_PWM_MspInit+0xb0>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80005ec:	4b0b      	ldr	r3, [pc, #44]	; (800061c <HAL_TIM_PWM_MspInit+0xb8>)
 80005ee:	69db      	ldr	r3, [r3, #28]
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <HAL_TIM_PWM_MspInit+0xb8>)
 80005f2:	f043 0302 	orr.w	r3, r3, #2
 80005f6:	61d3      	str	r3, [r2, #28]
 80005f8:	4b08      	ldr	r3, [pc, #32]	; (800061c <HAL_TIM_PWM_MspInit+0xb8>)
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	f003 0302 	and.w	r3, r3, #2
 8000600:	60bb      	str	r3, [r7, #8]
 8000602:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000604:	2200      	movs	r2, #0
 8000606:	2100      	movs	r1, #0
 8000608:	201d      	movs	r0, #29
 800060a:	f000 fa0c 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800060e:	201d      	movs	r0, #29
 8000610:	f000 fa25 	bl	8000a5e <HAL_NVIC_EnableIRQ>
}
 8000614:	bf00      	nop
 8000616:	3710      	adds	r7, #16
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000
 8000620:	20000300 	.word	0x20000300
 8000624:	40020058 	.word	0x40020058
 8000628:	40000400 	.word	0x40000400

0800062c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000634:	f107 0310 	add.w	r3, r7, #16
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800064a:	d118      	bne.n	800067e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800064c:	4b1c      	ldr	r3, [pc, #112]	; (80006c0 <HAL_TIM_MspPostInit+0x94>)
 800064e:	699b      	ldr	r3, [r3, #24]
 8000650:	4a1b      	ldr	r2, [pc, #108]	; (80006c0 <HAL_TIM_MspPostInit+0x94>)
 8000652:	f043 0304 	orr.w	r3, r3, #4
 8000656:	6193      	str	r3, [r2, #24]
 8000658:	4b19      	ldr	r3, [pc, #100]	; (80006c0 <HAL_TIM_MspPostInit+0x94>)
 800065a:	699b      	ldr	r3, [r3, #24]
 800065c:	f003 0304 	and.w	r3, r3, #4
 8000660:	60fb      	str	r3, [r7, #12]
 8000662:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000664:	2301      	movs	r3, #1
 8000666:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000668:	2302      	movs	r3, #2
 800066a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800066c:	2302      	movs	r3, #2
 800066e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000670:	f107 0310 	add.w	r3, r7, #16
 8000674:	4619      	mov	r1, r3
 8000676:	4813      	ldr	r0, [pc, #76]	; (80006c4 <HAL_TIM_MspPostInit+0x98>)
 8000678:	f000 fbfa 	bl	8000e70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800067c:	e01c      	b.n	80006b8 <HAL_TIM_MspPostInit+0x8c>
  else if(htim->Instance==TIM3)
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	4a11      	ldr	r2, [pc, #68]	; (80006c8 <HAL_TIM_MspPostInit+0x9c>)
 8000684:	4293      	cmp	r3, r2
 8000686:	d117      	bne.n	80006b8 <HAL_TIM_MspPostInit+0x8c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000688:	4b0d      	ldr	r3, [pc, #52]	; (80006c0 <HAL_TIM_MspPostInit+0x94>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	4a0c      	ldr	r2, [pc, #48]	; (80006c0 <HAL_TIM_MspPostInit+0x94>)
 800068e:	f043 0304 	orr.w	r3, r3, #4
 8000692:	6193      	str	r3, [r2, #24]
 8000694:	4b0a      	ldr	r3, [pc, #40]	; (80006c0 <HAL_TIM_MspPostInit+0x94>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	f003 0304 	and.w	r3, r3, #4
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006a0:	2340      	movs	r3, #64	; 0x40
 80006a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a4:	2302      	movs	r3, #2
 80006a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2302      	movs	r3, #2
 80006aa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4619      	mov	r1, r3
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <HAL_TIM_MspPostInit+0x98>)
 80006b4:	f000 fbdc 	bl	8000e70 <HAL_GPIO_Init>
}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	40010800 	.word	0x40010800
 80006c8:	40000400 	.word	0x40000400

080006cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006cc:	b480      	push	{r7}
 80006ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <NMI_Handler+0x4>

080006d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006d2:	b480      	push	{r7}
 80006d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006d6:	e7fe      	b.n	80006d6 <HardFault_Handler+0x4>

080006d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006dc:	e7fe      	b.n	80006dc <MemManage_Handler+0x4>

080006de <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006e2:	e7fe      	b.n	80006e2 <BusFault_Handler+0x4>

080006e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006e4:	b480      	push	{r7}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006e8:	e7fe      	b.n	80006e8 <UsageFault_Handler+0x4>

080006ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006ea:	b480      	push	{r7}
 80006ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bc80      	pop	{r7}
 80006f4:	4770      	bx	lr

080006f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006f6:	b480      	push	{r7}
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006fa:	bf00      	nop
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bc80      	pop	{r7}
 8000700:	4770      	bx	lr

08000702 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000702:	b480      	push	{r7}
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000706:	bf00      	nop
 8000708:	46bd      	mov	sp, r7
 800070a:	bc80      	pop	{r7}
 800070c:	4770      	bx	lr

0800070e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800070e:	b580      	push	{r7, lr}
 8000710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000712:	f000 f895 	bl	8000840 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000716:	bf00      	nop
 8000718:	bd80      	pop	{r7, pc}
	...

0800071c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000720:	4802      	ldr	r0, [pc, #8]	; (800072c <DMA1_Channel5_IRQHandler+0x10>)
 8000722:	f000 fa71 	bl	8000c08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8000726:	bf00      	nop
 8000728:	bd80      	pop	{r7, pc}
 800072a:	bf00      	nop
 800072c:	20000300 	.word	0x20000300

08000730 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000734:	4802      	ldr	r0, [pc, #8]	; (8000740 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000736:	f000 fe81 	bl	800143c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 800073a:	bf00      	nop
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	2000089c 	.word	0x2000089c

08000744 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000748:	4803      	ldr	r0, [pc, #12]	; (8000758 <TIM3_IRQHandler+0x14>)
 800074a:	f003 f9d5 	bl	8003af8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */


  //HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
  Timer2Reset();
 800074e:	f7ff feb9 	bl	80004c4 <Timer2Reset>


  /* USER CODE END TIM3_IRQn 1 */
}
 8000752:	bf00      	nop
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	20000344 	.word	0x20000344

0800075c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800075c:	b480      	push	{r7}
 800075e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000760:	bf00      	nop
 8000762:	46bd      	mov	sp, r7
 8000764:	bc80      	pop	{r7}
 8000766:	4770      	bx	lr

08000768 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000768:	480c      	ldr	r0, [pc, #48]	; (800079c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800076a:	490d      	ldr	r1, [pc, #52]	; (80007a0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800076c:	4a0d      	ldr	r2, [pc, #52]	; (80007a4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800076e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000770:	e002      	b.n	8000778 <LoopCopyDataInit>

08000772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000776:	3304      	adds	r3, #4

08000778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800077a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800077c:	d3f9      	bcc.n	8000772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800077e:	4a0a      	ldr	r2, [pc, #40]	; (80007a8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000780:	4c0a      	ldr	r4, [pc, #40]	; (80007ac <LoopFillZerobss+0x22>)
  movs r3, #0
 8000782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000784:	e001      	b.n	800078a <LoopFillZerobss>

08000786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000788:	3204      	adds	r2, #4

0800078a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800078a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800078c:	d3fb      	bcc.n	8000786 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800078e:	f7ff ffe5 	bl	800075c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000792:	f007 ff5f 	bl	8008654 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000796:	f7ff fcd9 	bl	800014c <main>
  bx lr
 800079a:	4770      	bx	lr
  ldr r0, =_sdata
 800079c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80007a0:	200002cc 	.word	0x200002cc
  ldr r2, =_sidata
 80007a4:	08008734 	.word	0x08008734
  ldr r2, =_sbss
 80007a8:	200002cc 	.word	0x200002cc
  ldr r4, =_ebss
 80007ac:	20000b88 	.word	0x20000b88

080007b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80007b0:	e7fe      	b.n	80007b0 <ADC1_2_IRQHandler>
	...

080007b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80007b8:	4b08      	ldr	r3, [pc, #32]	; (80007dc <HAL_Init+0x28>)
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	4a07      	ldr	r2, [pc, #28]	; (80007dc <HAL_Init+0x28>)
 80007be:	f043 0310 	orr.w	r3, r3, #16
 80007c2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80007c4:	2003      	movs	r0, #3
 80007c6:	f000 f923 	bl	8000a10 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80007ca:	200f      	movs	r0, #15
 80007cc:	f000 f808 	bl	80007e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007d0:	f7ff fe96 	bl	8000500 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007d4:	2300      	movs	r3, #0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	40022000 	.word	0x40022000

080007e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b082      	sub	sp, #8
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007e8:	4b12      	ldr	r3, [pc, #72]	; (8000834 <HAL_InitTick+0x54>)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_InitTick+0x58>)
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4619      	mov	r1, r3
 80007f2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80007fe:	4618      	mov	r0, r3
 8000800:	f000 f93b 	bl	8000a7a <HAL_SYSTICK_Config>
 8000804:	4603      	mov	r3, r0
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800080a:	2301      	movs	r3, #1
 800080c:	e00e      	b.n	800082c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	2b0f      	cmp	r3, #15
 8000812:	d80a      	bhi.n	800082a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000814:	2200      	movs	r2, #0
 8000816:	6879      	ldr	r1, [r7, #4]
 8000818:	f04f 30ff 	mov.w	r0, #4294967295
 800081c:	f000 f903 	bl	8000a26 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000820:	4a06      	ldr	r2, [pc, #24]	; (800083c <HAL_InitTick+0x5c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000826:	2300      	movs	r3, #0
 8000828:	e000      	b.n	800082c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800082a:	2301      	movs	r3, #1
}
 800082c:	4618      	mov	r0, r3
 800082e:	3708      	adds	r7, #8
 8000830:	46bd      	mov	sp, r7
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000168 	.word	0x20000168
 8000838:	20000170 	.word	0x20000170
 800083c:	2000016c 	.word	0x2000016c

08000840 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000844:	4b05      	ldr	r3, [pc, #20]	; (800085c <HAL_IncTick+0x1c>)
 8000846:	781b      	ldrb	r3, [r3, #0]
 8000848:	461a      	mov	r2, r3
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <HAL_IncTick+0x20>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4413      	add	r3, r2
 8000850:	4a03      	ldr	r2, [pc, #12]	; (8000860 <HAL_IncTick+0x20>)
 8000852:	6013      	str	r3, [r2, #0]
}
 8000854:	bf00      	nop
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	20000170 	.word	0x20000170
 8000860:	200003d4 	.word	0x200003d4

08000864 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  return uwTick;
 8000868:	4b02      	ldr	r3, [pc, #8]	; (8000874 <HAL_GetTick+0x10>)
 800086a:	681b      	ldr	r3, [r3, #0]
}
 800086c:	4618      	mov	r0, r3
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr
 8000874:	200003d4 	.word	0x200003d4

08000878 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000878:	b480      	push	{r7}
 800087a:	b085      	sub	sp, #20
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	f003 0307 	and.w	r3, r3, #7
 8000886:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000888:	4b0c      	ldr	r3, [pc, #48]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 800088a:	68db      	ldr	r3, [r3, #12]
 800088c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000894:	4013      	ands	r3, r2
 8000896:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000898:	68fb      	ldr	r3, [r7, #12]
 800089a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800089c:	68bb      	ldr	r3, [r7, #8]
 800089e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80008a0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80008a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008a8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80008aa:	4a04      	ldr	r2, [pc, #16]	; (80008bc <__NVIC_SetPriorityGrouping+0x44>)
 80008ac:	68bb      	ldr	r3, [r7, #8]
 80008ae:	60d3      	str	r3, [r2, #12]
}
 80008b0:	bf00      	nop
 80008b2:	3714      	adds	r7, #20
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bc80      	pop	{r7}
 80008b8:	4770      	bx	lr
 80008ba:	bf00      	nop
 80008bc:	e000ed00 	.word	0xe000ed00

080008c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80008c4:	4b04      	ldr	r3, [pc, #16]	; (80008d8 <__NVIC_GetPriorityGrouping+0x18>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	0a1b      	lsrs	r3, r3, #8
 80008ca:	f003 0307 	and.w	r3, r3, #7
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bc80      	pop	{r7}
 80008d4:	4770      	bx	lr
 80008d6:	bf00      	nop
 80008d8:	e000ed00 	.word	0xe000ed00

080008dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	db0b      	blt.n	8000906 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f003 021f 	and.w	r2, r3, #31
 80008f4:	4906      	ldr	r1, [pc, #24]	; (8000910 <__NVIC_EnableIRQ+0x34>)
 80008f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008fa:	095b      	lsrs	r3, r3, #5
 80008fc:	2001      	movs	r0, #1
 80008fe:	fa00 f202 	lsl.w	r2, r0, r2
 8000902:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000906:	bf00      	nop
 8000908:	370c      	adds	r7, #12
 800090a:	46bd      	mov	sp, r7
 800090c:	bc80      	pop	{r7}
 800090e:	4770      	bx	lr
 8000910:	e000e100 	.word	0xe000e100

08000914 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000914:	b480      	push	{r7}
 8000916:	b083      	sub	sp, #12
 8000918:	af00      	add	r7, sp, #0
 800091a:	4603      	mov	r3, r0
 800091c:	6039      	str	r1, [r7, #0]
 800091e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000920:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000924:	2b00      	cmp	r3, #0
 8000926:	db0a      	blt.n	800093e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	b2da      	uxtb	r2, r3
 800092c:	490c      	ldr	r1, [pc, #48]	; (8000960 <__NVIC_SetPriority+0x4c>)
 800092e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000932:	0112      	lsls	r2, r2, #4
 8000934:	b2d2      	uxtb	r2, r2
 8000936:	440b      	add	r3, r1
 8000938:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800093c:	e00a      	b.n	8000954 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800093e:	683b      	ldr	r3, [r7, #0]
 8000940:	b2da      	uxtb	r2, r3
 8000942:	4908      	ldr	r1, [pc, #32]	; (8000964 <__NVIC_SetPriority+0x50>)
 8000944:	79fb      	ldrb	r3, [r7, #7]
 8000946:	f003 030f 	and.w	r3, r3, #15
 800094a:	3b04      	subs	r3, #4
 800094c:	0112      	lsls	r2, r2, #4
 800094e:	b2d2      	uxtb	r2, r2
 8000950:	440b      	add	r3, r1
 8000952:	761a      	strb	r2, [r3, #24]
}
 8000954:	bf00      	nop
 8000956:	370c      	adds	r7, #12
 8000958:	46bd      	mov	sp, r7
 800095a:	bc80      	pop	{r7}
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	e000e100 	.word	0xe000e100
 8000964:	e000ed00 	.word	0xe000ed00

08000968 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000968:	b480      	push	{r7}
 800096a:	b089      	sub	sp, #36	; 0x24
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	f003 0307 	and.w	r3, r3, #7
 800097a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800097c:	69fb      	ldr	r3, [r7, #28]
 800097e:	f1c3 0307 	rsb	r3, r3, #7
 8000982:	2b04      	cmp	r3, #4
 8000984:	bf28      	it	cs
 8000986:	2304      	movcs	r3, #4
 8000988:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800098a:	69fb      	ldr	r3, [r7, #28]
 800098c:	3304      	adds	r3, #4
 800098e:	2b06      	cmp	r3, #6
 8000990:	d902      	bls.n	8000998 <NVIC_EncodePriority+0x30>
 8000992:	69fb      	ldr	r3, [r7, #28]
 8000994:	3b03      	subs	r3, #3
 8000996:	e000      	b.n	800099a <NVIC_EncodePriority+0x32>
 8000998:	2300      	movs	r3, #0
 800099a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	f04f 32ff 	mov.w	r2, #4294967295
 80009a0:	69bb      	ldr	r3, [r7, #24]
 80009a2:	fa02 f303 	lsl.w	r3, r2, r3
 80009a6:	43da      	mvns	r2, r3
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	401a      	ands	r2, r3
 80009ac:	697b      	ldr	r3, [r7, #20]
 80009ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80009b0:	f04f 31ff 	mov.w	r1, #4294967295
 80009b4:	697b      	ldr	r3, [r7, #20]
 80009b6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ba:	43d9      	mvns	r1, r3
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80009c0:	4313      	orrs	r3, r2
         );
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3724      	adds	r7, #36	; 0x24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bc80      	pop	{r7}
 80009ca:	4770      	bx	lr

080009cc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	3b01      	subs	r3, #1
 80009d8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009dc:	d301      	bcc.n	80009e2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009de:	2301      	movs	r3, #1
 80009e0:	e00f      	b.n	8000a02 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009e2:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <SysTick_Config+0x40>)
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	3b01      	subs	r3, #1
 80009e8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ea:	210f      	movs	r1, #15
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f7ff ff90 	bl	8000914 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009f4:	4b05      	ldr	r3, [pc, #20]	; (8000a0c <SysTick_Config+0x40>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009fa:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <SysTick_Config+0x40>)
 80009fc:	2207      	movs	r2, #7
 80009fe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000a00:	2300      	movs	r3, #0
}
 8000a02:	4618      	mov	r0, r3
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	e000e010 	.word	0xe000e010

08000a10 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b082      	sub	sp, #8
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff2d 	bl	8000878 <__NVIC_SetPriorityGrouping>
}
 8000a1e:	bf00      	nop
 8000a20:	3708      	adds	r7, #8
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000a26:	b580      	push	{r7, lr}
 8000a28:	b086      	sub	sp, #24
 8000a2a:	af00      	add	r7, sp, #0
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	60b9      	str	r1, [r7, #8]
 8000a30:	607a      	str	r2, [r7, #4]
 8000a32:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a34:	2300      	movs	r3, #0
 8000a36:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a38:	f7ff ff42 	bl	80008c0 <__NVIC_GetPriorityGrouping>
 8000a3c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a3e:	687a      	ldr	r2, [r7, #4]
 8000a40:	68b9      	ldr	r1, [r7, #8]
 8000a42:	6978      	ldr	r0, [r7, #20]
 8000a44:	f7ff ff90 	bl	8000968 <NVIC_EncodePriority>
 8000a48:	4602      	mov	r2, r0
 8000a4a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a4e:	4611      	mov	r1, r2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f7ff ff5f 	bl	8000914 <__NVIC_SetPriority>
}
 8000a56:	bf00      	nop
 8000a58:	3718      	adds	r7, #24
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}

08000a5e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a5e:	b580      	push	{r7, lr}
 8000a60:	b082      	sub	sp, #8
 8000a62:	af00      	add	r7, sp, #0
 8000a64:	4603      	mov	r3, r0
 8000a66:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	4618      	mov	r0, r3
 8000a6e:	f7ff ff35 	bl	80008dc <__NVIC_EnableIRQ>
}
 8000a72:	bf00      	nop
 8000a74:	3708      	adds	r7, #8
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a7a:	b580      	push	{r7, lr}
 8000a7c:	b082      	sub	sp, #8
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a82:	6878      	ldr	r0, [r7, #4]
 8000a84:	f7ff ffa2 	bl	80009cc <SysTick_Config>
 8000a88:	4603      	mov	r3, r0
}
 8000a8a:	4618      	mov	r0, r3
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
	...

08000a94 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b085      	sub	sp, #20
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d101      	bne.n	8000aaa <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000aa6:	2301      	movs	r3, #1
 8000aa8:	e043      	b.n	8000b32 <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	461a      	mov	r2, r3
 8000ab0:	4b22      	ldr	r3, [pc, #136]	; (8000b3c <HAL_DMA_Init+0xa8>)
 8000ab2:	4413      	add	r3, r2
 8000ab4:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <HAL_DMA_Init+0xac>)
 8000ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aba:	091b      	lsrs	r3, r3, #4
 8000abc:	009a      	lsls	r2, r3, #2
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a1f      	ldr	r2, [pc, #124]	; (8000b44 <HAL_DMA_Init+0xb0>)
 8000ac6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	2202      	movs	r2, #2
 8000acc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8000ade:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8000ae2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000aec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	68db      	ldr	r3, [r3, #12]
 8000af2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000af8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000b04:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	69db      	ldr	r3, [r3, #28]
 8000b0a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000b0c:	68fa      	ldr	r2, [r7, #12]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2201      	movs	r2, #1
 8000b24:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3714      	adds	r7, #20
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr
 8000b3c:	bffdfff8 	.word	0xbffdfff8
 8000b40:	cccccccd 	.word	0xcccccccd
 8000b44:	40020000 	.word	0x40020000

08000b48 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
 8000b54:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000b56:	2300      	movs	r3, #0
 8000b58:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b60:	2b01      	cmp	r3, #1
 8000b62:	d101      	bne.n	8000b68 <HAL_DMA_Start_IT+0x20>
 8000b64:	2302      	movs	r3, #2
 8000b66:	e04a      	b.n	8000bfe <HAL_DMA_Start_IT+0xb6>
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2201      	movs	r2, #1
 8000b6c:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8000b70:	68fb      	ldr	r3, [r7, #12]
 8000b72:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000b76:	2b01      	cmp	r3, #1
 8000b78:	d13a      	bne.n	8000bf0 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000b7a:	68fb      	ldr	r3, [r7, #12]
 8000b7c:	2202      	movs	r2, #2
 8000b7e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000b82:	68fb      	ldr	r3, [r7, #12]
 8000b84:	2200      	movs	r2, #0
 8000b86:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	f022 0201 	bic.w	r2, r2, #1
 8000b96:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	687a      	ldr	r2, [r7, #4]
 8000b9c:	68b9      	ldr	r1, [r7, #8]
 8000b9e:	68f8      	ldr	r0, [r7, #12]
 8000ba0:	f000 f938 	bl	8000e14 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d008      	beq.n	8000bbe <HAL_DMA_Start_IT+0x76>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000bac:	68fb      	ldr	r3, [r7, #12]
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f042 020e 	orr.w	r2, r2, #14
 8000bba:	601a      	str	r2, [r3, #0]
 8000bbc:	e00f      	b.n	8000bde <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000bbe:	68fb      	ldr	r3, [r7, #12]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	681a      	ldr	r2, [r3, #0]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f022 0204 	bic.w	r2, r2, #4
 8000bcc:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	681a      	ldr	r2, [r3, #0]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	681b      	ldr	r3, [r3, #0]
 8000bd8:	f042 020a 	orr.w	r2, r2, #10
 8000bdc:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	681b      	ldr	r3, [r3, #0]
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f042 0201 	orr.w	r2, r2, #1
 8000bec:	601a      	str	r2, [r3, #0]
 8000bee:	e005      	b.n	8000bfc <HAL_DMA_Start_IT+0xb4>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8000bfc:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	3718      	adds	r7, #24
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
	...

08000c08 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b084      	sub	sp, #16
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	681b      	ldr	r3, [r3, #0]
 8000c1e:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	2204      	movs	r2, #4
 8000c26:	409a      	lsls	r2, r3
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	4013      	ands	r3, r2
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d04f      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0xc8>
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	f003 0304 	and.w	r3, r3, #4
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d04a      	beq.n	8000cd0 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	f003 0320 	and.w	r3, r3, #32
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d107      	bne.n	8000c58 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	681b      	ldr	r3, [r3, #0]
 8000c4c:	681a      	ldr	r2, [r3, #0]
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f022 0204 	bic.w	r2, r2, #4
 8000c56:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a66      	ldr	r2, [pc, #408]	; (8000df8 <HAL_DMA_IRQHandler+0x1f0>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d029      	beq.n	8000cb6 <HAL_DMA_IRQHandler+0xae>
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	4a65      	ldr	r2, [pc, #404]	; (8000dfc <HAL_DMA_IRQHandler+0x1f4>)
 8000c68:	4293      	cmp	r3, r2
 8000c6a:	d022      	beq.n	8000cb2 <HAL_DMA_IRQHandler+0xaa>
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	4a63      	ldr	r2, [pc, #396]	; (8000e00 <HAL_DMA_IRQHandler+0x1f8>)
 8000c72:	4293      	cmp	r3, r2
 8000c74:	d01a      	beq.n	8000cac <HAL_DMA_IRQHandler+0xa4>
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	4a62      	ldr	r2, [pc, #392]	; (8000e04 <HAL_DMA_IRQHandler+0x1fc>)
 8000c7c:	4293      	cmp	r3, r2
 8000c7e:	d012      	beq.n	8000ca6 <HAL_DMA_IRQHandler+0x9e>
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a60      	ldr	r2, [pc, #384]	; (8000e08 <HAL_DMA_IRQHandler+0x200>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d00a      	beq.n	8000ca0 <HAL_DMA_IRQHandler+0x98>
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	4a5f      	ldr	r2, [pc, #380]	; (8000e0c <HAL_DMA_IRQHandler+0x204>)
 8000c90:	4293      	cmp	r3, r2
 8000c92:	d102      	bne.n	8000c9a <HAL_DMA_IRQHandler+0x92>
 8000c94:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c98:	e00e      	b.n	8000cb8 <HAL_DMA_IRQHandler+0xb0>
 8000c9a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000c9e:	e00b      	b.n	8000cb8 <HAL_DMA_IRQHandler+0xb0>
 8000ca0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8000ca4:	e008      	b.n	8000cb8 <HAL_DMA_IRQHandler+0xb0>
 8000ca6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000caa:	e005      	b.n	8000cb8 <HAL_DMA_IRQHandler+0xb0>
 8000cac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cb0:	e002      	b.n	8000cb8 <HAL_DMA_IRQHandler+0xb0>
 8000cb2:	2340      	movs	r3, #64	; 0x40
 8000cb4:	e000      	b.n	8000cb8 <HAL_DMA_IRQHandler+0xb0>
 8000cb6:	2304      	movs	r3, #4
 8000cb8:	4a55      	ldr	r2, [pc, #340]	; (8000e10 <HAL_DMA_IRQHandler+0x208>)
 8000cba:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f000 8094 	beq.w	8000dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cca:	6878      	ldr	r0, [r7, #4]
 8000ccc:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000cce:	e08e      	b.n	8000dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cd4:	2202      	movs	r2, #2
 8000cd6:	409a      	lsls	r2, r3
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	4013      	ands	r3, r2
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d056      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x186>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	f003 0302 	and.w	r3, r3, #2
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	d051      	beq.n	8000d8e <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d10b      	bne.n	8000d10 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	f022 020a 	bic.w	r2, r2, #10
 8000d06:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a38      	ldr	r2, [pc, #224]	; (8000df8 <HAL_DMA_IRQHandler+0x1f0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d029      	beq.n	8000d6e <HAL_DMA_IRQHandler+0x166>
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	4a37      	ldr	r2, [pc, #220]	; (8000dfc <HAL_DMA_IRQHandler+0x1f4>)
 8000d20:	4293      	cmp	r3, r2
 8000d22:	d022      	beq.n	8000d6a <HAL_DMA_IRQHandler+0x162>
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a35      	ldr	r2, [pc, #212]	; (8000e00 <HAL_DMA_IRQHandler+0x1f8>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d01a      	beq.n	8000d64 <HAL_DMA_IRQHandler+0x15c>
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4a34      	ldr	r2, [pc, #208]	; (8000e04 <HAL_DMA_IRQHandler+0x1fc>)
 8000d34:	4293      	cmp	r3, r2
 8000d36:	d012      	beq.n	8000d5e <HAL_DMA_IRQHandler+0x156>
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4a32      	ldr	r2, [pc, #200]	; (8000e08 <HAL_DMA_IRQHandler+0x200>)
 8000d3e:	4293      	cmp	r3, r2
 8000d40:	d00a      	beq.n	8000d58 <HAL_DMA_IRQHandler+0x150>
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	4a31      	ldr	r2, [pc, #196]	; (8000e0c <HAL_DMA_IRQHandler+0x204>)
 8000d48:	4293      	cmp	r3, r2
 8000d4a:	d102      	bne.n	8000d52 <HAL_DMA_IRQHandler+0x14a>
 8000d4c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000d50:	e00e      	b.n	8000d70 <HAL_DMA_IRQHandler+0x168>
 8000d52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d56:	e00b      	b.n	8000d70 <HAL_DMA_IRQHandler+0x168>
 8000d58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d5c:	e008      	b.n	8000d70 <HAL_DMA_IRQHandler+0x168>
 8000d5e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d62:	e005      	b.n	8000d70 <HAL_DMA_IRQHandler+0x168>
 8000d64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d68:	e002      	b.n	8000d70 <HAL_DMA_IRQHandler+0x168>
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	e000      	b.n	8000d70 <HAL_DMA_IRQHandler+0x168>
 8000d6e:	2302      	movs	r3, #2
 8000d70:	4a27      	ldr	r2, [pc, #156]	; (8000e10 <HAL_DMA_IRQHandler+0x208>)
 8000d72:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2200      	movs	r2, #0
 8000d78:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d034      	beq.n	8000dee <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d88:	6878      	ldr	r0, [r7, #4]
 8000d8a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000d8c:	e02f      	b.n	8000dee <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d92:	2208      	movs	r2, #8
 8000d94:	409a      	lsls	r2, r3
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d028      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x1e8>
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	f003 0308 	and.w	r3, r3, #8
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d023      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	681b      	ldr	r3, [r3, #0]
 8000db2:	f022 020e 	bic.w	r2, r2, #14
 8000db6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000dc0:	2101      	movs	r1, #1
 8000dc2:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc6:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	2200      	movs	r2, #0
 8000dda:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d004      	beq.n	8000df0 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	6878      	ldr	r0, [r7, #4]
 8000dec:	4798      	blx	r3
    }
  }
  return;
 8000dee:	bf00      	nop
 8000df0:	bf00      	nop
}
 8000df2:	3710      	adds	r7, #16
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}
 8000df8:	40020008 	.word	0x40020008
 8000dfc:	4002001c 	.word	0x4002001c
 8000e00:	40020030 	.word	0x40020030
 8000e04:	40020044 	.word	0x40020044
 8000e08:	40020058 	.word	0x40020058
 8000e0c:	4002006c 	.word	0x4002006c
 8000e10:	40020000 	.word	0x40020000

08000e14 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b085      	sub	sp, #20
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	60f8      	str	r0, [r7, #12]
 8000e1c:	60b9      	str	r1, [r7, #8]
 8000e1e:	607a      	str	r2, [r7, #4]
 8000e20:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e26:	68fb      	ldr	r3, [r7, #12]
 8000e28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000e2a:	2101      	movs	r1, #1
 8000e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000e30:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	683a      	ldr	r2, [r7, #0]
 8000e38:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e3a:	68fb      	ldr	r3, [r7, #12]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	2b10      	cmp	r3, #16
 8000e40:	d108      	bne.n	8000e54 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	687a      	ldr	r2, [r7, #4]
 8000e48:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	68ba      	ldr	r2, [r7, #8]
 8000e50:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000e52:	e007      	b.n	8000e64 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	68ba      	ldr	r2, [r7, #8]
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	687a      	ldr	r2, [r7, #4]
 8000e62:	60da      	str	r2, [r3, #12]
}
 8000e64:	bf00      	nop
 8000e66:	3714      	adds	r7, #20
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
	...

08000e70 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b08b      	sub	sp, #44	; 0x2c
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
 8000e78:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e82:	e169      	b.n	8001158 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e84:	2201      	movs	r2, #1
 8000e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e88:	fa02 f303 	lsl.w	r3, r2, r3
 8000e8c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	69fa      	ldr	r2, [r7, #28]
 8000e94:	4013      	ands	r3, r2
 8000e96:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	f040 8158 	bne.w	8001152 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	685b      	ldr	r3, [r3, #4]
 8000ea6:	4a9a      	ldr	r2, [pc, #616]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000ea8:	4293      	cmp	r3, r2
 8000eaa:	d05e      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eac:	4a98      	ldr	r2, [pc, #608]	; (8001110 <HAL_GPIO_Init+0x2a0>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d875      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eb2:	4a98      	ldr	r2, [pc, #608]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d058      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000eb8:	4a96      	ldr	r2, [pc, #600]	; (8001114 <HAL_GPIO_Init+0x2a4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d86f      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ebe:	4a96      	ldr	r2, [pc, #600]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d052      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ec4:	4a94      	ldr	r2, [pc, #592]	; (8001118 <HAL_GPIO_Init+0x2a8>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d869      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eca:	4a94      	ldr	r2, [pc, #592]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d04c      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000ed0:	4a92      	ldr	r2, [pc, #584]	; (800111c <HAL_GPIO_Init+0x2ac>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d863      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ed6:	4a92      	ldr	r2, [pc, #584]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 8000ed8:	4293      	cmp	r3, r2
 8000eda:	d046      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
 8000edc:	4a90      	ldr	r2, [pc, #576]	; (8001120 <HAL_GPIO_Init+0x2b0>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d85d      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000ee2:	2b12      	cmp	r3, #18
 8000ee4:	d82a      	bhi.n	8000f3c <HAL_GPIO_Init+0xcc>
 8000ee6:	2b12      	cmp	r3, #18
 8000ee8:	d859      	bhi.n	8000f9e <HAL_GPIO_Init+0x12e>
 8000eea:	a201      	add	r2, pc, #4	; (adr r2, 8000ef0 <HAL_GPIO_Init+0x80>)
 8000eec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef0:	08000f6b 	.word	0x08000f6b
 8000ef4:	08000f45 	.word	0x08000f45
 8000ef8:	08000f57 	.word	0x08000f57
 8000efc:	08000f99 	.word	0x08000f99
 8000f00:	08000f9f 	.word	0x08000f9f
 8000f04:	08000f9f 	.word	0x08000f9f
 8000f08:	08000f9f 	.word	0x08000f9f
 8000f0c:	08000f9f 	.word	0x08000f9f
 8000f10:	08000f9f 	.word	0x08000f9f
 8000f14:	08000f9f 	.word	0x08000f9f
 8000f18:	08000f9f 	.word	0x08000f9f
 8000f1c:	08000f9f 	.word	0x08000f9f
 8000f20:	08000f9f 	.word	0x08000f9f
 8000f24:	08000f9f 	.word	0x08000f9f
 8000f28:	08000f9f 	.word	0x08000f9f
 8000f2c:	08000f9f 	.word	0x08000f9f
 8000f30:	08000f9f 	.word	0x08000f9f
 8000f34:	08000f4d 	.word	0x08000f4d
 8000f38:	08000f61 	.word	0x08000f61
 8000f3c:	4a79      	ldr	r2, [pc, #484]	; (8001124 <HAL_GPIO_Init+0x2b4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d013      	beq.n	8000f6a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000f42:	e02c      	b.n	8000f9e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	623b      	str	r3, [r7, #32]
          break;
 8000f4a:	e029      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	3304      	adds	r3, #4
 8000f52:	623b      	str	r3, [r7, #32]
          break;
 8000f54:	e024      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	3308      	adds	r3, #8
 8000f5c:	623b      	str	r3, [r7, #32]
          break;
 8000f5e:	e01f      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f60:	683b      	ldr	r3, [r7, #0]
 8000f62:	68db      	ldr	r3, [r3, #12]
 8000f64:	330c      	adds	r3, #12
 8000f66:	623b      	str	r3, [r7, #32]
          break;
 8000f68:	e01a      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	689b      	ldr	r3, [r3, #8]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f72:	2304      	movs	r3, #4
 8000f74:	623b      	str	r3, [r7, #32]
          break;
 8000f76:	e013      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d105      	bne.n	8000f8c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f80:	2308      	movs	r3, #8
 8000f82:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	69fa      	ldr	r2, [r7, #28]
 8000f88:	611a      	str	r2, [r3, #16]
          break;
 8000f8a:	e009      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f8c:	2308      	movs	r3, #8
 8000f8e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	69fa      	ldr	r2, [r7, #28]
 8000f94:	615a      	str	r2, [r3, #20]
          break;
 8000f96:	e003      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	623b      	str	r3, [r7, #32]
          break;
 8000f9c:	e000      	b.n	8000fa0 <HAL_GPIO_Init+0x130>
          break;
 8000f9e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fa0:	69bb      	ldr	r3, [r7, #24]
 8000fa2:	2bff      	cmp	r3, #255	; 0xff
 8000fa4:	d801      	bhi.n	8000faa <HAL_GPIO_Init+0x13a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	e001      	b.n	8000fae <HAL_GPIO_Init+0x13e>
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	2bff      	cmp	r3, #255	; 0xff
 8000fb4:	d802      	bhi.n	8000fbc <HAL_GPIO_Init+0x14c>
 8000fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fb8:	009b      	lsls	r3, r3, #2
 8000fba:	e002      	b.n	8000fc2 <HAL_GPIO_Init+0x152>
 8000fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fbe:	3b08      	subs	r3, #8
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	210f      	movs	r1, #15
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	401a      	ands	r2, r3
 8000fd4:	6a39      	ldr	r1, [r7, #32]
 8000fd6:	693b      	ldr	r3, [r7, #16]
 8000fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8000fdc:	431a      	orrs	r2, r3
 8000fde:	697b      	ldr	r3, [r7, #20]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 80b1 	beq.w	8001152 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ff0:	4b4d      	ldr	r3, [pc, #308]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8000ff2:	699b      	ldr	r3, [r3, #24]
 8000ff4:	4a4c      	ldr	r2, [pc, #304]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6193      	str	r3, [r2, #24]
 8000ffc:	4b4a      	ldr	r3, [pc, #296]	; (8001128 <HAL_GPIO_Init+0x2b8>)
 8000ffe:	699b      	ldr	r3, [r3, #24]
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001008:	4a48      	ldr	r2, [pc, #288]	; (800112c <HAL_GPIO_Init+0x2bc>)
 800100a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	68fa      	ldr	r2, [r7, #12]
 8001028:	4013      	ands	r3, r2
 800102a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a40      	ldr	r2, [pc, #256]	; (8001130 <HAL_GPIO_Init+0x2c0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d013      	beq.n	800105c <HAL_GPIO_Init+0x1ec>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a3f      	ldr	r2, [pc, #252]	; (8001134 <HAL_GPIO_Init+0x2c4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d00d      	beq.n	8001058 <HAL_GPIO_Init+0x1e8>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a3e      	ldr	r2, [pc, #248]	; (8001138 <HAL_GPIO_Init+0x2c8>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d007      	beq.n	8001054 <HAL_GPIO_Init+0x1e4>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	4a3d      	ldr	r2, [pc, #244]	; (800113c <HAL_GPIO_Init+0x2cc>)
 8001048:	4293      	cmp	r3, r2
 800104a:	d101      	bne.n	8001050 <HAL_GPIO_Init+0x1e0>
 800104c:	2303      	movs	r3, #3
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001050:	2304      	movs	r3, #4
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x1ee>
 800105c:	2300      	movs	r3, #0
 800105e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	68fa      	ldr	r2, [r7, #12]
 800106a:	4313      	orrs	r3, r2
 800106c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800106e:	492f      	ldr	r1, [pc, #188]	; (800112c <HAL_GPIO_Init+0x2bc>)
 8001070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	68fa      	ldr	r2, [r7, #12]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d006      	beq.n	8001096 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001088:	4b2d      	ldr	r3, [pc, #180]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 800108a:	681a      	ldr	r2, [r3, #0]
 800108c:	492c      	ldr	r1, [pc, #176]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 800108e:	69bb      	ldr	r3, [r7, #24]
 8001090:	4313      	orrs	r3, r2
 8001092:	600b      	str	r3, [r1, #0]
 8001094:	e006      	b.n	80010a4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001096:	4b2a      	ldr	r3, [pc, #168]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	69bb      	ldr	r3, [r7, #24]
 800109c:	43db      	mvns	r3, r3
 800109e:	4928      	ldr	r1, [pc, #160]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010a0:	4013      	ands	r3, r2
 80010a2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d006      	beq.n	80010be <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010b0:	4b23      	ldr	r3, [pc, #140]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010b2:	685a      	ldr	r2, [r3, #4]
 80010b4:	4922      	ldr	r1, [pc, #136]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010b6:	69bb      	ldr	r3, [r7, #24]
 80010b8:	4313      	orrs	r3, r2
 80010ba:	604b      	str	r3, [r1, #4]
 80010bc:	e006      	b.n	80010cc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80010be:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010c0:	685a      	ldr	r2, [r3, #4]
 80010c2:	69bb      	ldr	r3, [r7, #24]
 80010c4:	43db      	mvns	r3, r3
 80010c6:	491e      	ldr	r1, [pc, #120]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010c8:	4013      	ands	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d006      	beq.n	80010e6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010da:	689a      	ldr	r2, [r3, #8]
 80010dc:	4918      	ldr	r1, [pc, #96]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010de:	69bb      	ldr	r3, [r7, #24]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	608b      	str	r3, [r1, #8]
 80010e4:	e006      	b.n	80010f4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80010e6:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010e8:	689a      	ldr	r2, [r3, #8]
 80010ea:	69bb      	ldr	r3, [r7, #24]
 80010ec:	43db      	mvns	r3, r3
 80010ee:	4914      	ldr	r1, [pc, #80]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 80010f0:	4013      	ands	r3, r2
 80010f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d021      	beq.n	8001144 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 8001102:	68da      	ldr	r2, [r3, #12]
 8001104:	490e      	ldr	r1, [pc, #56]	; (8001140 <HAL_GPIO_Init+0x2d0>)
 8001106:	69bb      	ldr	r3, [r7, #24]
 8001108:	4313      	orrs	r3, r2
 800110a:	60cb      	str	r3, [r1, #12]
 800110c:	e021      	b.n	8001152 <HAL_GPIO_Init+0x2e2>
 800110e:	bf00      	nop
 8001110:	10320000 	.word	0x10320000
 8001114:	10310000 	.word	0x10310000
 8001118:	10220000 	.word	0x10220000
 800111c:	10210000 	.word	0x10210000
 8001120:	10120000 	.word	0x10120000
 8001124:	10110000 	.word	0x10110000
 8001128:	40021000 	.word	0x40021000
 800112c:	40010000 	.word	0x40010000
 8001130:	40010800 	.word	0x40010800
 8001134:	40010c00 	.word	0x40010c00
 8001138:	40011000 	.word	0x40011000
 800113c:	40011400 	.word	0x40011400
 8001140:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001144:	4b0b      	ldr	r3, [pc, #44]	; (8001174 <HAL_GPIO_Init+0x304>)
 8001146:	68da      	ldr	r2, [r3, #12]
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	43db      	mvns	r3, r3
 800114c:	4909      	ldr	r1, [pc, #36]	; (8001174 <HAL_GPIO_Init+0x304>)
 800114e:	4013      	ands	r3, r2
 8001150:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001154:	3301      	adds	r3, #1
 8001156:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115e:	fa22 f303 	lsr.w	r3, r2, r3
 8001162:	2b00      	cmp	r3, #0
 8001164:	f47f ae8e 	bne.w	8000e84 <HAL_GPIO_Init+0x14>
  }
}
 8001168:	bf00      	nop
 800116a:	bf00      	nop
 800116c:	372c      	adds	r7, #44	; 0x2c
 800116e:	46bd      	mov	sp, r7
 8001170:	bc80      	pop	{r7}
 8001172:	4770      	bx	lr
 8001174:	40010400 	.word	0x40010400

08001178 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
 8001180:	460b      	mov	r3, r1
 8001182:	807b      	strh	r3, [r7, #2]
 8001184:	4613      	mov	r3, r2
 8001186:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001188:	787b      	ldrb	r3, [r7, #1]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d003      	beq.n	8001196 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001194:	e003      	b.n	800119e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001196:	887b      	ldrh	r3, [r7, #2]
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	611a      	str	r2, [r3, #16]
}
 800119e:	bf00      	nop
 80011a0:	370c      	adds	r7, #12
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
 80011b0:	460b      	mov	r3, r1
 80011b2:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80011ba:	887a      	ldrh	r2, [r7, #2]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	4013      	ands	r3, r2
 80011c0:	041a      	lsls	r2, r3, #16
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43d9      	mvns	r1, r3
 80011c6:	887b      	ldrh	r3, [r7, #2]
 80011c8:	400b      	ands	r3, r1
 80011ca:	431a      	orrs	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	611a      	str	r2, [r3, #16]
}
 80011d0:	bf00      	nop
 80011d2:	3714      	adds	r7, #20
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bc80      	pop	{r7}
 80011d8:	4770      	bx	lr

080011da <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80011da:	b5f0      	push	{r4, r5, r6, r7, lr}
 80011dc:	b08b      	sub	sp, #44	; 0x2c
 80011de:	af06      	add	r7, sp, #24
 80011e0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d101      	bne.n	80011ec <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80011e8:	2301      	movs	r3, #1
 80011ea:	e0fd      	b.n	80013e8 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80011f2:	b2db      	uxtb	r3, r3
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d106      	bne.n	8001206 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	2200      	movs	r2, #0
 80011fc:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f006 ffa1 	bl	8008148 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	2203      	movs	r2, #3
 800120a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4618      	mov	r0, r3
 8001214:	f003 f9ea 	bl	80045ec <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	603b      	str	r3, [r7, #0]
 800121e:	687e      	ldr	r6, [r7, #4]
 8001220:	466d      	mov	r5, sp
 8001222:	f106 0410 	add.w	r4, r6, #16
 8001226:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001228:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	602b      	str	r3, [r5, #0]
 800122e:	1d33      	adds	r3, r6, #4
 8001230:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001232:	6838      	ldr	r0, [r7, #0]
 8001234:	f003 f9b4 	bl	80045a0 <USB_CoreInit>
 8001238:	4603      	mov	r3, r0
 800123a:	2b00      	cmp	r3, #0
 800123c:	d005      	beq.n	800124a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	2202      	movs	r2, #2
 8001242:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e0ce      	b.n	80013e8 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f003 f9e5 	bl	8004620 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001256:	2300      	movs	r3, #0
 8001258:	73fb      	strb	r3, [r7, #15]
 800125a:	e04c      	b.n	80012f6 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800125c:	7bfb      	ldrb	r3, [r7, #15]
 800125e:	6879      	ldr	r1, [r7, #4]
 8001260:	1c5a      	adds	r2, r3, #1
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	00db      	lsls	r3, r3, #3
 800126a:	440b      	add	r3, r1
 800126c:	3301      	adds	r3, #1
 800126e:	2201      	movs	r2, #1
 8001270:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001272:	7bfb      	ldrb	r3, [r7, #15]
 8001274:	6879      	ldr	r1, [r7, #4]
 8001276:	1c5a      	adds	r2, r3, #1
 8001278:	4613      	mov	r3, r2
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	4413      	add	r3, r2
 800127e:	00db      	lsls	r3, r3, #3
 8001280:	440b      	add	r3, r1
 8001282:	7bfa      	ldrb	r2, [r7, #15]
 8001284:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001286:	7bfa      	ldrb	r2, [r7, #15]
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	b298      	uxth	r0, r3
 800128c:	6879      	ldr	r1, [r7, #4]
 800128e:	4613      	mov	r3, r2
 8001290:	009b      	lsls	r3, r3, #2
 8001292:	4413      	add	r3, r2
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	440b      	add	r3, r1
 8001298:	3336      	adds	r3, #54	; 0x36
 800129a:	4602      	mov	r2, r0
 800129c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800129e:	7bfb      	ldrb	r3, [r7, #15]
 80012a0:	6879      	ldr	r1, [r7, #4]
 80012a2:	1c5a      	adds	r2, r3, #1
 80012a4:	4613      	mov	r3, r2
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	4413      	add	r3, r2
 80012aa:	00db      	lsls	r3, r3, #3
 80012ac:	440b      	add	r3, r1
 80012ae:	3303      	adds	r3, #3
 80012b0:	2200      	movs	r2, #0
 80012b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80012b4:	7bfa      	ldrb	r2, [r7, #15]
 80012b6:	6879      	ldr	r1, [r7, #4]
 80012b8:	4613      	mov	r3, r2
 80012ba:	009b      	lsls	r3, r3, #2
 80012bc:	4413      	add	r3, r2
 80012be:	00db      	lsls	r3, r3, #3
 80012c0:	440b      	add	r3, r1
 80012c2:	3338      	adds	r3, #56	; 0x38
 80012c4:	2200      	movs	r2, #0
 80012c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80012c8:	7bfa      	ldrb	r2, [r7, #15]
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	4613      	mov	r3, r2
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	4413      	add	r3, r2
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	440b      	add	r3, r1
 80012d6:	333c      	adds	r3, #60	; 0x3c
 80012d8:	2200      	movs	r2, #0
 80012da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80012dc:	7bfa      	ldrb	r2, [r7, #15]
 80012de:	6879      	ldr	r1, [r7, #4]
 80012e0:	4613      	mov	r3, r2
 80012e2:	009b      	lsls	r3, r3, #2
 80012e4:	4413      	add	r3, r2
 80012e6:	00db      	lsls	r3, r3, #3
 80012e8:	440b      	add	r3, r1
 80012ea:	3340      	adds	r3, #64	; 0x40
 80012ec:	2200      	movs	r2, #0
 80012ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	3301      	adds	r3, #1
 80012f4:	73fb      	strb	r3, [r7, #15]
 80012f6:	7bfa      	ldrb	r2, [r7, #15]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	685b      	ldr	r3, [r3, #4]
 80012fc:	429a      	cmp	r2, r3
 80012fe:	d3ad      	bcc.n	800125c <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001300:	2300      	movs	r3, #0
 8001302:	73fb      	strb	r3, [r7, #15]
 8001304:	e044      	b.n	8001390 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001306:	7bfa      	ldrb	r2, [r7, #15]
 8001308:	6879      	ldr	r1, [r7, #4]
 800130a:	4613      	mov	r3, r2
 800130c:	009b      	lsls	r3, r3, #2
 800130e:	4413      	add	r3, r2
 8001310:	00db      	lsls	r3, r3, #3
 8001312:	440b      	add	r3, r1
 8001314:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001318:	2200      	movs	r2, #0
 800131a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800131c:	7bfa      	ldrb	r2, [r7, #15]
 800131e:	6879      	ldr	r1, [r7, #4]
 8001320:	4613      	mov	r3, r2
 8001322:	009b      	lsls	r3, r3, #2
 8001324:	4413      	add	r3, r2
 8001326:	00db      	lsls	r3, r3, #3
 8001328:	440b      	add	r3, r1
 800132a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800132e:	7bfa      	ldrb	r2, [r7, #15]
 8001330:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001332:	7bfa      	ldrb	r2, [r7, #15]
 8001334:	6879      	ldr	r1, [r7, #4]
 8001336:	4613      	mov	r3, r2
 8001338:	009b      	lsls	r3, r3, #2
 800133a:	4413      	add	r3, r2
 800133c:	00db      	lsls	r3, r3, #3
 800133e:	440b      	add	r3, r1
 8001340:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001344:	2200      	movs	r2, #0
 8001346:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001348:	7bfa      	ldrb	r2, [r7, #15]
 800134a:	6879      	ldr	r1, [r7, #4]
 800134c:	4613      	mov	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	4413      	add	r3, r2
 8001352:	00db      	lsls	r3, r3, #3
 8001354:	440b      	add	r3, r1
 8001356:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800135e:	7bfa      	ldrb	r2, [r7, #15]
 8001360:	6879      	ldr	r1, [r7, #4]
 8001362:	4613      	mov	r3, r2
 8001364:	009b      	lsls	r3, r3, #2
 8001366:	4413      	add	r3, r2
 8001368:	00db      	lsls	r3, r3, #3
 800136a:	440b      	add	r3, r1
 800136c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001374:	7bfa      	ldrb	r2, [r7, #15]
 8001376:	6879      	ldr	r1, [r7, #4]
 8001378:	4613      	mov	r3, r2
 800137a:	009b      	lsls	r3, r3, #2
 800137c:	4413      	add	r3, r2
 800137e:	00db      	lsls	r3, r3, #3
 8001380:	440b      	add	r3, r1
 8001382:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	3301      	adds	r3, #1
 800138e:	73fb      	strb	r3, [r7, #15]
 8001390:	7bfa      	ldrb	r2, [r7, #15]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	685b      	ldr	r3, [r3, #4]
 8001396:	429a      	cmp	r2, r3
 8001398:	d3b5      	bcc.n	8001306 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	687e      	ldr	r6, [r7, #4]
 80013a2:	466d      	mov	r5, sp
 80013a4:	f106 0410 	add.w	r4, r6, #16
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	6823      	ldr	r3, [r4, #0]
 80013ae:	602b      	str	r3, [r5, #0]
 80013b0:	1d33      	adds	r3, r6, #4
 80013b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80013b4:	6838      	ldr	r0, [r7, #0]
 80013b6:	f003 f93f 	bl	8004638 <USB_DevInit>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d005      	beq.n	80013cc <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	2202      	movs	r2, #2
 80013c4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e00d      	b.n	80013e8 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	2200      	movs	r2, #0
 80013d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	2201      	movs	r2, #1
 80013d8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f005 fab0 	bl	8006946 <USB_DevDisconnect>

  return HAL_OK;
 80013e6:	2300      	movs	r3, #0
}
 80013e8:	4618      	mov	r0, r3
 80013ea:	3714      	adds	r7, #20
 80013ec:	46bd      	mov	sp, r7
 80013ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

080013f0 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b082      	sub	sp, #8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80013fe:	2b01      	cmp	r3, #1
 8001400:	d101      	bne.n	8001406 <HAL_PCD_Start+0x16>
 8001402:	2302      	movs	r3, #2
 8001404:	e016      	b.n	8001434 <HAL_PCD_Start+0x44>
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	2201      	movs	r2, #1
 800140a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	4618      	mov	r0, r3
 8001414:	f003 f8d4 	bl	80045c0 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001418:	2101      	movs	r1, #1
 800141a:	6878      	ldr	r0, [r7, #4]
 800141c:	f007 f8e3 	bl	80085e6 <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f005 fa84 	bl	8006932 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2200      	movs	r2, #0
 800142e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b088      	sub	sp, #32
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4618      	mov	r0, r3
 800144a:	f005 fa86 	bl	800695a <USB_ReadInterrupts>
 800144e:	4603      	mov	r3, r0
 8001450:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001458:	d102      	bne.n	8001460 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	f000 fb4a 	bl	8001af4 <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	4618      	mov	r0, r3
 8001466:	f005 fa78 	bl	800695a <USB_ReadInterrupts>
 800146a:	4603      	mov	r3, r0
 800146c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001474:	d112      	bne.n	800149c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800147e:	b29a      	uxth	r2, r3
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001488:	b292      	uxth	r2, r2
 800148a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f006 fed5 	bl	800823e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001494:	2100      	movs	r1, #0
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f000 f925 	bl	80016e6 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f005 fa5a 	bl	800695a <USB_ReadInterrupts>
 80014a6:	4603      	mov	r3, r0
 80014a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80014b0:	d10b      	bne.n	80014ca <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80014c4:	b292      	uxth	r2, r2
 80014c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	4618      	mov	r0, r3
 80014d0:	f005 fa43 	bl	800695a <USB_ReadInterrupts>
 80014d4:	4603      	mov	r3, r0
 80014d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80014da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80014de:	d10b      	bne.n	80014f8 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80014e8:	b29a      	uxth	r2, r3
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80014f2:	b292      	uxth	r2, r2
 80014f4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4618      	mov	r0, r3
 80014fe:	f005 fa2c 	bl	800695a <USB_ReadInterrupts>
 8001502:	4603      	mov	r3, r0
 8001504:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001508:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800150c:	d126      	bne.n	800155c <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001516:	b29a      	uxth	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0204 	bic.w	r2, r2, #4
 8001520:	b292      	uxth	r2, r2
 8001522:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800152e:	b29a      	uxth	r2, r3
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0208 	bic.w	r2, r2, #8
 8001538:	b292      	uxth	r2, r2
 800153a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800153e:	6878      	ldr	r0, [r7, #4]
 8001540:	f006 feb6 	bl	80082b0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800154c:	b29a      	uxth	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001556:	b292      	uxth	r2, r2
 8001558:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f005 f9fa 	bl	800695a <USB_ReadInterrupts>
 8001566:	4603      	mov	r3, r0
 8001568:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800156c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001570:	f040 8084 	bne.w	800167c <HAL_PCD_IRQHandler+0x240>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 8001574:	2300      	movs	r3, #0
 8001576:	77fb      	strb	r3, [r7, #31]
 8001578:	e011      	b.n	800159e <HAL_PCD_IRQHandler+0x162>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	461a      	mov	r2, r3
 8001580:	7ffb      	ldrb	r3, [r7, #31]
 8001582:	009b      	lsls	r3, r3, #2
 8001584:	441a      	add	r2, r3
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	8812      	ldrh	r2, [r2, #0]
 800158a:	b292      	uxth	r2, r2
 800158c:	005b      	lsls	r3, r3, #1
 800158e:	f107 0120 	add.w	r1, r7, #32
 8001592:	440b      	add	r3, r1
 8001594:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 8001598:	7ffb      	ldrb	r3, [r7, #31]
 800159a:	3301      	adds	r3, #1
 800159c:	77fb      	strb	r3, [r7, #31]
 800159e:	7ffb      	ldrb	r3, [r7, #31]
 80015a0:	2b07      	cmp	r3, #7
 80015a2:	d9ea      	bls.n	800157a <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	b292      	uxth	r2, r2
 80015b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80015c4:	b29a      	uxth	r2, r3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f022 0201 	bic.w	r2, r2, #1
 80015ce:	b292      	uxth	r2, r2
 80015d0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 80015d4:	bf00      	nop
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015de:	b29b      	uxth	r3, r3
 80015e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d0f6      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x19a>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015fa:	b292      	uxth	r2, r2
 80015fc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 8001600:	2300      	movs	r3, #0
 8001602:	77fb      	strb	r3, [r7, #31]
 8001604:	e010      	b.n	8001628 <HAL_PCD_IRQHandler+0x1ec>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001606:	7ffb      	ldrb	r3, [r7, #31]
 8001608:	687a      	ldr	r2, [r7, #4]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	4611      	mov	r1, r2
 800160e:	7ffa      	ldrb	r2, [r7, #31]
 8001610:	0092      	lsls	r2, r2, #2
 8001612:	440a      	add	r2, r1
 8001614:	005b      	lsls	r3, r3, #1
 8001616:	f107 0120 	add.w	r1, r7, #32
 800161a:	440b      	add	r3, r1
 800161c:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 8001620:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 8001622:	7ffb      	ldrb	r3, [r7, #31]
 8001624:	3301      	adds	r3, #1
 8001626:	77fb      	strb	r3, [r7, #31]
 8001628:	7ffb      	ldrb	r3, [r7, #31]
 800162a:	2b07      	cmp	r3, #7
 800162c:	d9eb      	bls.n	8001606 <HAL_PCD_IRQHandler+0x1ca>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001636:	b29a      	uxth	r2, r3
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f042 0208 	orr.w	r2, r2, #8
 8001640:	b292      	uxth	r2, r2
 8001642:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800164e:	b29a      	uxth	r2, r3
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001658:	b292      	uxth	r2, r2
 800165a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f042 0204 	orr.w	r2, r2, #4
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001676:	6878      	ldr	r0, [r7, #4]
 8001678:	f006 fe00 	bl	800827c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4618      	mov	r0, r3
 8001682:	f005 f96a 	bl	800695a <USB_ReadInterrupts>
 8001686:	4603      	mov	r3, r0
 8001688:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800168c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001690:	d10e      	bne.n	80016b0 <HAL_PCD_IRQHandler+0x274>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800169a:	b29a      	uxth	r2, r3
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80016a4:	b292      	uxth	r2, r2
 80016a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f006 fdb9 	bl	8008222 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f005 f950 	bl	800695a <USB_ReadInterrupts>
 80016ba:	4603      	mov	r3, r0
 80016bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80016c4:	d10b      	bne.n	80016de <HAL_PCD_IRQHandler+0x2a2>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80016ce:	b29a      	uxth	r2, r3
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016d8:	b292      	uxth	r2, r2
 80016da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 80016de:	bf00      	nop
 80016e0:	3720      	adds	r7, #32
 80016e2:	46bd      	mov	sp, r7
 80016e4:	bd80      	pop	{r7, pc}

080016e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80016e6:	b580      	push	{r7, lr}
 80016e8:	b082      	sub	sp, #8
 80016ea:	af00      	add	r7, sp, #0
 80016ec:	6078      	str	r0, [r7, #4]
 80016ee:	460b      	mov	r3, r1
 80016f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d101      	bne.n	8001700 <HAL_PCD_SetAddress+0x1a>
 80016fc:	2302      	movs	r3, #2
 80016fe:	e013      	b.n	8001728 <HAL_PCD_SetAddress+0x42>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2201      	movs	r2, #1
 8001704:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	78fa      	ldrb	r2, [r7, #3]
 8001716:	4611      	mov	r1, r2
 8001718:	4618      	mov	r0, r3
 800171a:	f005 f8f7 	bl	800690c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001726:	2300      	movs	r3, #0
}
 8001728:	4618      	mov	r0, r3
 800172a:	3708      	adds	r7, #8
 800172c:	46bd      	mov	sp, r7
 800172e:	bd80      	pop	{r7, pc}

08001730 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b084      	sub	sp, #16
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
 8001738:	4608      	mov	r0, r1
 800173a:	4611      	mov	r1, r2
 800173c:	461a      	mov	r2, r3
 800173e:	4603      	mov	r3, r0
 8001740:	70fb      	strb	r3, [r7, #3]
 8001742:	460b      	mov	r3, r1
 8001744:	803b      	strh	r3, [r7, #0]
 8001746:	4613      	mov	r3, r2
 8001748:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800174a:	2300      	movs	r3, #0
 800174c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800174e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001752:	2b00      	cmp	r3, #0
 8001754:	da0e      	bge.n	8001774 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001756:	78fb      	ldrb	r3, [r7, #3]
 8001758:	f003 0307 	and.w	r3, r3, #7
 800175c:	1c5a      	adds	r2, r3, #1
 800175e:	4613      	mov	r3, r2
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	00db      	lsls	r3, r3, #3
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	2201      	movs	r2, #1
 8001770:	705a      	strb	r2, [r3, #1]
 8001772:	e00e      	b.n	8001792 <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001774:	78fb      	ldrb	r3, [r7, #3]
 8001776:	f003 0207 	and.w	r2, r3, #7
 800177a:	4613      	mov	r3, r2
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	00db      	lsls	r3, r3, #3
 8001782:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2200      	movs	r2, #0
 8001790:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001792:	78fb      	ldrb	r3, [r7, #3]
 8001794:	f003 0307 	and.w	r3, r3, #7
 8001798:	b2da      	uxtb	r2, r3
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800179e:	883a      	ldrh	r2, [r7, #0]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	78ba      	ldrb	r2, [r7, #2]
 80017a8:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	785b      	ldrb	r3, [r3, #1]
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d004      	beq.n	80017bc <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	781b      	ldrb	r3, [r3, #0]
 80017b6:	b29a      	uxth	r2, r3
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80017bc:	78bb      	ldrb	r3, [r7, #2]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d102      	bne.n	80017c8 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	2200      	movs	r2, #0
 80017c6:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_EP_Open+0xa6>
 80017d2:	2302      	movs	r3, #2
 80017d4:	e00e      	b.n	80017f4 <HAL_PCD_EP_Open+0xc4>
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	2201      	movs	r2, #1
 80017da:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68f9      	ldr	r1, [r7, #12]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f002 ff47 	bl	8004678 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	2200      	movs	r2, #0
 80017ee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 80017f2:	7afb      	ldrb	r3, [r7, #11]
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3710      	adds	r7, #16
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}

080017fc <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001808:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800180c:	2b00      	cmp	r3, #0
 800180e:	da0e      	bge.n	800182e <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001810:	78fb      	ldrb	r3, [r7, #3]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	1c5a      	adds	r2, r3, #1
 8001818:	4613      	mov	r3, r2
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	00db      	lsls	r3, r3, #3
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	4413      	add	r3, r2
 8001824:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	2201      	movs	r2, #1
 800182a:	705a      	strb	r2, [r3, #1]
 800182c:	e00e      	b.n	800184c <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800182e:	78fb      	ldrb	r3, [r7, #3]
 8001830:	f003 0207 	and.w	r2, r3, #7
 8001834:	4613      	mov	r3, r2
 8001836:	009b      	lsls	r3, r3, #2
 8001838:	4413      	add	r3, r2
 800183a:	00db      	lsls	r3, r3, #3
 800183c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001840:	687a      	ldr	r2, [r7, #4]
 8001842:	4413      	add	r3, r2
 8001844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	b2da      	uxtb	r2, r3
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800185e:	2b01      	cmp	r3, #1
 8001860:	d101      	bne.n	8001866 <HAL_PCD_EP_Close+0x6a>
 8001862:	2302      	movs	r3, #2
 8001864:	e00e      	b.n	8001884 <HAL_PCD_EP_Close+0x88>
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2201      	movs	r2, #1
 800186a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	68f9      	ldr	r1, [r7, #12]
 8001874:	4618      	mov	r0, r3
 8001876:	f003 fa69 	bl	8004d4c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	2200      	movs	r2, #0
 800187e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001882:	2300      	movs	r3, #0
}
 8001884:	4618      	mov	r0, r3
 8001886:	3710      	adds	r7, #16
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	607a      	str	r2, [r7, #4]
 8001896:	603b      	str	r3, [r7, #0]
 8001898:	460b      	mov	r3, r1
 800189a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800189c:	7afb      	ldrb	r3, [r7, #11]
 800189e:	f003 0207 	and.w	r2, r3, #7
 80018a2:	4613      	mov	r3, r2
 80018a4:	009b      	lsls	r3, r3, #2
 80018a6:	4413      	add	r3, r2
 80018a8:	00db      	lsls	r3, r3, #3
 80018aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018ae:	68fa      	ldr	r2, [r7, #12]
 80018b0:	4413      	add	r3, r2
 80018b2:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	687a      	ldr	r2, [r7, #4]
 80018b8:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80018ba:	697b      	ldr	r3, [r7, #20]
 80018bc:	683a      	ldr	r2, [r7, #0]
 80018be:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	2200      	movs	r2, #0
 80018c4:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	2200      	movs	r2, #0
 80018ca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80018cc:	7afb      	ldrb	r3, [r7, #11]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	b2da      	uxtb	r2, r3
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80018d8:	7afb      	ldrb	r3, [r7, #11]
 80018da:	f003 0307 	and.w	r3, r3, #7
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d106      	bne.n	80018f0 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6979      	ldr	r1, [r7, #20]
 80018e8:	4618      	mov	r0, r3
 80018ea:	f003 fc1b 	bl	8005124 <USB_EPStartXfer>
 80018ee:	e005      	b.n	80018fc <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	6979      	ldr	r1, [r7, #20]
 80018f6:	4618      	mov	r0, r3
 80018f8:	f003 fc14 	bl	8005124 <USB_EPStartXfer>
  }

  return HAL_OK;
 80018fc:	2300      	movs	r3, #0
}
 80018fe:	4618      	mov	r0, r3
 8001900:	3718      	adds	r7, #24
 8001902:	46bd      	mov	sp, r7
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b086      	sub	sp, #24
 800190a:	af00      	add	r7, sp, #0
 800190c:	60f8      	str	r0, [r7, #12]
 800190e:	607a      	str	r2, [r7, #4]
 8001910:	603b      	str	r3, [r7, #0]
 8001912:	460b      	mov	r3, r1
 8001914:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001916:	7afb      	ldrb	r3, [r7, #11]
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	1c5a      	adds	r2, r3, #1
 800191e:	4613      	mov	r3, r2
 8001920:	009b      	lsls	r3, r3, #2
 8001922:	4413      	add	r3, r2
 8001924:	00db      	lsls	r3, r3, #3
 8001926:	68fa      	ldr	r2, [r7, #12]
 8001928:	4413      	add	r3, r2
 800192a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800192c:	697b      	ldr	r3, [r7, #20]
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001932:	697b      	ldr	r3, [r7, #20]
 8001934:	683a      	ldr	r2, [r7, #0]
 8001936:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001938:	697b      	ldr	r3, [r7, #20]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	683a      	ldr	r2, [r7, #0]
 8001944:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	2200      	movs	r2, #0
 800194a:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 800194c:	697b      	ldr	r3, [r7, #20]
 800194e:	2201      	movs	r2, #1
 8001950:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001952:	7afb      	ldrb	r3, [r7, #11]
 8001954:	f003 0307 	and.w	r3, r3, #7
 8001958:	b2da      	uxtb	r2, r3
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800195e:	7afb      	ldrb	r3, [r7, #11]
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	2b00      	cmp	r3, #0
 8001966:	d106      	bne.n	8001976 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6979      	ldr	r1, [r7, #20]
 800196e:	4618      	mov	r0, r3
 8001970:	f003 fbd8 	bl	8005124 <USB_EPStartXfer>
 8001974:	e005      	b.n	8001982 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	6979      	ldr	r1, [r7, #20]
 800197c:	4618      	mov	r0, r3
 800197e:	f003 fbd1 	bl	8005124 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001982:	2300      	movs	r3, #0
}
 8001984:	4618      	mov	r0, r3
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
 8001994:	460b      	mov	r3, r1
 8001996:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 0207 	and.w	r2, r3, #7
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d901      	bls.n	80019aa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e04c      	b.n	8001a44 <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80019aa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	da0e      	bge.n	80019d0 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80019b2:	78fb      	ldrb	r3, [r7, #3]
 80019b4:	f003 0307 	and.w	r3, r3, #7
 80019b8:	1c5a      	adds	r2, r3, #1
 80019ba:	4613      	mov	r3, r2
 80019bc:	009b      	lsls	r3, r3, #2
 80019be:	4413      	add	r3, r2
 80019c0:	00db      	lsls	r3, r3, #3
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	4413      	add	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2201      	movs	r2, #1
 80019cc:	705a      	strb	r2, [r3, #1]
 80019ce:	e00c      	b.n	80019ea <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80019d0:	78fa      	ldrb	r2, [r7, #3]
 80019d2:	4613      	mov	r3, r2
 80019d4:	009b      	lsls	r3, r3, #2
 80019d6:	4413      	add	r3, r2
 80019d8:	00db      	lsls	r3, r3, #3
 80019da:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019de:	687a      	ldr	r2, [r7, #4]
 80019e0:	4413      	add	r3, r2
 80019e2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2200      	movs	r2, #0
 80019e8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80019ea:	68fb      	ldr	r3, [r7, #12]
 80019ec:	2201      	movs	r2, #1
 80019ee:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80019f0:	78fb      	ldrb	r3, [r7, #3]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001a02:	2b01      	cmp	r3, #1
 8001a04:	d101      	bne.n	8001a0a <HAL_PCD_EP_SetStall+0x7e>
 8001a06:	2302      	movs	r3, #2
 8001a08:	e01c      	b.n	8001a44 <HAL_PCD_EP_SetStall+0xb8>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68f9      	ldr	r1, [r7, #12]
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f004 fe7a 	bl	8006712 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a1e:	78fb      	ldrb	r3, [r7, #3]
 8001a20:	f003 0307 	and.w	r3, r3, #7
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d108      	bne.n	8001a3a <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681a      	ldr	r2, [r3, #0]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001a32:	4619      	mov	r1, r3
 8001a34:	4610      	mov	r0, r2
 8001a36:	f004 ff9f 	bl	8006978 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001a42:	2300      	movs	r3, #0
}
 8001a44:	4618      	mov	r0, r3
 8001a46:	3710      	adds	r7, #16
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}

08001a4c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	460b      	mov	r3, r1
 8001a56:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001a58:	78fb      	ldrb	r3, [r7, #3]
 8001a5a:	f003 020f 	and.w	r2, r3, #15
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	429a      	cmp	r2, r3
 8001a64:	d901      	bls.n	8001a6a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	e040      	b.n	8001aec <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001a6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	da0e      	bge.n	8001a90 <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a72:	78fb      	ldrb	r3, [r7, #3]
 8001a74:	f003 0307 	and.w	r3, r3, #7
 8001a78:	1c5a      	adds	r2, r3, #1
 8001a7a:	4613      	mov	r3, r2
 8001a7c:	009b      	lsls	r3, r3, #2
 8001a7e:	4413      	add	r3, r2
 8001a80:	00db      	lsls	r3, r3, #3
 8001a82:	687a      	ldr	r2, [r7, #4]
 8001a84:	4413      	add	r3, r2
 8001a86:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	705a      	strb	r2, [r3, #1]
 8001a8e:	e00e      	b.n	8001aae <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001a90:	78fb      	ldrb	r3, [r7, #3]
 8001a92:	f003 0207 	and.w	r2, r3, #7
 8001a96:	4613      	mov	r3, r2
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	4413      	add	r3, r2
 8001a9c:	00db      	lsls	r3, r3, #3
 8001a9e:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	4413      	add	r3, r2
 8001aa6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ab4:	78fb      	ldrb	r3, [r7, #3]
 8001ab6:	f003 0307 	and.w	r3, r3, #7
 8001aba:	b2da      	uxtb	r2, r3
 8001abc:	68fb      	ldr	r3, [r7, #12]
 8001abe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001ac6:	2b01      	cmp	r3, #1
 8001ac8:	d101      	bne.n	8001ace <HAL_PCD_EP_ClrStall+0x82>
 8001aca:	2302      	movs	r3, #2
 8001acc:	e00e      	b.n	8001aec <HAL_PCD_EP_ClrStall+0xa0>
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68f9      	ldr	r1, [r7, #12]
 8001adc:	4618      	mov	r0, r3
 8001ade:	f004 fe68 	bl	80067b2 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001aea:	2300      	movs	r3, #0
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3710      	adds	r7, #16
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bd80      	pop	{r7, pc}

08001af4 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b08e      	sub	sp, #56	; 0x38
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001afc:	e2ec      	b.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b06:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001b08:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b0a:	b2db      	uxtb	r3, r3
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001b14:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	f040 8161 	bne.w	8001de0 <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001b1e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001b20:	f003 0310 	and.w	r3, r3, #16
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d152      	bne.n	8001bce <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	881b      	ldrh	r3, [r3, #0]
 8001b2e:	b29b      	uxth	r3, r3
 8001b30:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001b34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001b38:	81fb      	strh	r3, [r7, #14]
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681a      	ldr	r2, [r3, #0]
 8001b3e:	89fb      	ldrh	r3, [r7, #14]
 8001b40:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001b44:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001b48:	b29b      	uxth	r3, r3
 8001b4a:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3328      	adds	r3, #40	; 0x28
 8001b50:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b60:	781b      	ldrb	r3, [r3, #0]
 8001b62:	00db      	lsls	r3, r3, #3
 8001b64:	4413      	add	r3, r2
 8001b66:	3302      	adds	r3, #2
 8001b68:	005b      	lsls	r3, r3, #1
 8001b6a:	687a      	ldr	r2, [r7, #4]
 8001b6c:	6812      	ldr	r2, [r2, #0]
 8001b6e:	4413      	add	r3, r2
 8001b70:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001b74:	881b      	ldrh	r3, [r3, #0]
 8001b76:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b7c:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	695a      	ldr	r2, [r3, #20]
 8001b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b84:	69db      	ldr	r3, [r3, #28]
 8001b86:	441a      	add	r2, r3
 8001b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b8a:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	6878      	ldr	r0, [r7, #4]
 8001b90:	f006 fb2d 	bl	80081ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001b9a:	b2db      	uxtb	r3, r3
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	f000 829b 	beq.w	80020d8 <PCD_EP_ISR_Handler+0x5e4>
 8001ba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ba4:	699b      	ldr	r3, [r3, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f040 8296 	bne.w	80020d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001bb8:	b2da      	uxtb	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	b292      	uxth	r2, r2
 8001bc0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001bcc:	e284      	b.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	881b      	ldrh	r3, [r3, #0]
 8001bdc:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001bde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001be0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d034      	beq.n	8001c52 <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001bf0:	b29b      	uxth	r3, r3
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	3306      	adds	r3, #6
 8001bfe:	005b      	lsls	r3, r3, #1
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6812      	ldr	r2, [r2, #0]
 8001c04:	4413      	add	r3, r2
 8001c06:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c12:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	6818      	ldr	r0, [r3, #0]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c24:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001c26:	b29b      	uxth	r3, r3
 8001c28:	f004 fef6 	bl	8006a18 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	881b      	ldrh	r3, [r3, #0]
 8001c32:	b29a      	uxth	r2, r3
 8001c34:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c38:	4013      	ands	r3, r2
 8001c3a:	823b      	strh	r3, [r7, #16]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	8a3a      	ldrh	r2, [r7, #16]
 8001c42:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c46:	b292      	uxth	r2, r2
 8001c48:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f006 faa2 	bl	8008194 <HAL_PCD_SetupStageCallback>
 8001c50:	e242      	b.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001c52:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	f280 823e 	bge.w	80020d8 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	881b      	ldrh	r3, [r3, #0]
 8001c62:	b29a      	uxth	r2, r3
 8001c64:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001c68:	4013      	ands	r3, r2
 8001c6a:	83bb      	strh	r3, [r7, #28]
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	8bba      	ldrh	r2, [r7, #28]
 8001c72:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001c76:	b292      	uxth	r2, r2
 8001c78:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	461a      	mov	r2, r3
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	3306      	adds	r3, #6
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6812      	ldr	r2, [r2, #0]
 8001c96:	4413      	add	r3, r2
 8001c98:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca4:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca8:	69db      	ldr	r3, [r3, #28]
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d019      	beq.n	8001ce2 <PCD_EP_ISR_Handler+0x1ee>
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d015      	beq.n	8001ce2 <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6818      	ldr	r0, [r3, #0]
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	6959      	ldr	r1, [r3, #20]
 8001cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc0:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc4:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001cc6:	b29b      	uxth	r3, r3
 8001cc8:	f004 fea6 	bl	8006a18 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cce:	695a      	ldr	r2, [r3, #20]
 8001cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd2:	69db      	ldr	r3, [r3, #28]
 8001cd4:	441a      	add	r2, r3
 8001cd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cd8:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001cda:	2100      	movs	r1, #0
 8001cdc:	6878      	ldr	r0, [r7, #4]
 8001cde:	f006 fa6b 	bl	80081b8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	b29b      	uxth	r3, r3
 8001cea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	f040 81f2 	bne.w	80020d8 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d02:	b29b      	uxth	r3, r3
 8001d04:	461a      	mov	r2, r3
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	4413      	add	r3, r2
 8001d0a:	61bb      	str	r3, [r7, #24]
 8001d0c:	69bb      	ldr	r3, [r7, #24]
 8001d0e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d16:	691b      	ldr	r3, [r3, #16]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d112      	bne.n	8001d42 <PCD_EP_ISR_Handler+0x24e>
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	881b      	ldrh	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001d26:	b29a      	uxth	r2, r3
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	801a      	strh	r2, [r3, #0]
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d3a:	b29a      	uxth	r2, r3
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	801a      	strh	r2, [r3, #0]
 8001d40:	e02f      	b.n	8001da2 <PCD_EP_ISR_Handler+0x2ae>
 8001d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d44:	691b      	ldr	r3, [r3, #16]
 8001d46:	2b3e      	cmp	r3, #62	; 0x3e
 8001d48:	d813      	bhi.n	8001d72 <PCD_EP_ISR_Handler+0x27e>
 8001d4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	085b      	lsrs	r3, r3, #1
 8001d50:	633b      	str	r3, [r7, #48]	; 0x30
 8001d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d54:	691b      	ldr	r3, [r3, #16]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d002      	beq.n	8001d64 <PCD_EP_ISR_Handler+0x270>
 8001d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d60:	3301      	adds	r3, #1
 8001d62:	633b      	str	r3, [r7, #48]	; 0x30
 8001d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	029b      	lsls	r3, r3, #10
 8001d6a:	b29a      	uxth	r2, r3
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	801a      	strh	r2, [r3, #0]
 8001d70:	e017      	b.n	8001da2 <PCD_EP_ISR_Handler+0x2ae>
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	691b      	ldr	r3, [r3, #16]
 8001d76:	095b      	lsrs	r3, r3, #5
 8001d78:	633b      	str	r3, [r7, #48]	; 0x30
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 031f 	and.w	r3, r3, #31
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d102      	bne.n	8001d8c <PCD_EP_ISR_Handler+0x298>
 8001d86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	633b      	str	r3, [r7, #48]	; 0x30
 8001d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d8e:	b29b      	uxth	r3, r3
 8001d90:	029b      	lsls	r3, r3, #10
 8001d92:	b29b      	uxth	r3, r3
 8001d94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001d98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001d9c:	b29a      	uxth	r2, r3
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	881b      	ldrh	r3, [r3, #0]
 8001da8:	b29b      	uxth	r3, r3
 8001daa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001dae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001db2:	827b      	strh	r3, [r7, #18]
 8001db4:	8a7b      	ldrh	r3, [r7, #18]
 8001db6:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001dba:	827b      	strh	r3, [r7, #18]
 8001dbc:	8a7b      	ldrh	r3, [r7, #18]
 8001dbe:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001dc2:	827b      	strh	r3, [r7, #18]
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681a      	ldr	r2, [r3, #0]
 8001dc8:	8a7b      	ldrh	r3, [r7, #18]
 8001dca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001dce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001dd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001dd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001dda:	b29b      	uxth	r3, r3
 8001ddc:	8013      	strh	r3, [r2, #0]
 8001dde:	e17b      	b.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	461a      	mov	r2, r3
 8001de6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	881b      	ldrh	r3, [r3, #0]
 8001df0:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001df2:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f280 80ea 	bge.w	8001fd0 <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	461a      	mov	r2, r3
 8001e02:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e06:	009b      	lsls	r3, r3, #2
 8001e08:	4413      	add	r3, r2
 8001e0a:	881b      	ldrh	r3, [r3, #0]
 8001e0c:	b29a      	uxth	r2, r3
 8001e0e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001e12:	4013      	ands	r3, r2
 8001e14:	853b      	strh	r3, [r7, #40]	; 0x28
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	461a      	mov	r2, r3
 8001e1c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	4413      	add	r3, r2
 8001e24:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001e26:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001e2a:	b292      	uxth	r2, r2
 8001e2c:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001e2e:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001e32:	4613      	mov	r3, r2
 8001e34:	009b      	lsls	r3, r3, #2
 8001e36:	4413      	add	r3, r2
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4413      	add	r3, r2
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e46:	7b1b      	ldrb	r3, [r3, #12]
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d122      	bne.n	8001e92 <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	461a      	mov	r2, r3
 8001e58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	00db      	lsls	r3, r3, #3
 8001e5e:	4413      	add	r3, r2
 8001e60:	3306      	adds	r3, #6
 8001e62:	005b      	lsls	r3, r3, #1
 8001e64:	687a      	ldr	r2, [r7, #4]
 8001e66:	6812      	ldr	r2, [r2, #0]
 8001e68:	4413      	add	r3, r2
 8001e6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e74:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001e76:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 8087 	beq.w	8001f8c <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6818      	ldr	r0, [r3, #0]
 8001e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e84:	6959      	ldr	r1, [r3, #20]
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	88da      	ldrh	r2, [r3, #6]
 8001e8a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001e8c:	f004 fdc4 	bl	8006a18 <USB_ReadPMA>
 8001e90:	e07c      	b.n	8001f8c <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 8001e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e94:	78db      	ldrb	r3, [r3, #3]
 8001e96:	2b02      	cmp	r3, #2
 8001e98:	d108      	bne.n	8001eac <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8001e9a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001e9c:	461a      	mov	r2, r3
 8001e9e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ea0:	6878      	ldr	r0, [r7, #4]
 8001ea2:	f000 f927 	bl	80020f4 <HAL_PCD_EP_DB_Receive>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8001eaa:	e06f      	b.n	8001f8c <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb4:	781b      	ldrb	r3, [r3, #0]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	4413      	add	r3, r2
 8001eba:	881b      	ldrh	r3, [r3, #0]
 8001ebc:	b29b      	uxth	r3, r3
 8001ebe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001ec2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001ec6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	461a      	mov	r2, r3
 8001ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	441a      	add	r2, r3
 8001ed6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ed8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001edc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001ee0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ee4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	461a      	mov	r2, r3
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	781b      	ldrb	r3, [r3, #0]
 8001ef6:	009b      	lsls	r3, r3, #2
 8001ef8:	4413      	add	r3, r2
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d021      	beq.n	8001f4a <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f0e:	b29b      	uxth	r3, r3
 8001f10:	461a      	mov	r2, r3
 8001f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	3302      	adds	r3, #2
 8001f1c:	005b      	lsls	r3, r3, #1
 8001f1e:	687a      	ldr	r2, [r7, #4]
 8001f20:	6812      	ldr	r2, [r2, #0]
 8001f22:	4413      	add	r3, r2
 8001f24:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f2e:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d02a      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6818      	ldr	r0, [r3, #0]
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	6959      	ldr	r1, [r3, #20]
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	891a      	ldrh	r2, [r3, #8]
 8001f42:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f44:	f004 fd68 	bl	8006a18 <USB_ReadPMA>
 8001f48:	e020      	b.n	8001f8c <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001f52:	b29b      	uxth	r3, r3
 8001f54:	461a      	mov	r2, r3
 8001f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	00db      	lsls	r3, r3, #3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3306      	adds	r3, #6
 8001f60:	005b      	lsls	r3, r3, #1
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	4413      	add	r3, r2
 8001f68:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001f6c:	881b      	ldrh	r3, [r3, #0]
 8001f6e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f72:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 8001f74:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d008      	beq.n	8001f8c <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6818      	ldr	r0, [r3, #0]
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f80:	6959      	ldr	r1, [r3, #20]
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	895a      	ldrh	r2, [r3, #10]
 8001f86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f88:	f004 fd46 	bl	8006a18 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8001f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f8e:	69da      	ldr	r2, [r3, #28]
 8001f90:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f92:	441a      	add	r2, r3
 8001f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f96:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8001f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f9a:	695a      	ldr	r2, [r3, #20]
 8001f9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001f9e:	441a      	add	r2, r3
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa2:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8001fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fa6:	699b      	ldr	r3, [r3, #24]
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d004      	beq.n	8001fb6 <PCD_EP_ISR_Handler+0x4c2>
 8001fac:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8001fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb0:	691b      	ldr	r3, [r3, #16]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d206      	bcs.n	8001fc4 <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	4619      	mov	r1, r3
 8001fbc:	6878      	ldr	r0, [r7, #4]
 8001fbe:	f006 f8fb 	bl	80081b8 <HAL_PCD_DataOutStageCallback>
 8001fc2:	e005      	b.n	8001fd0 <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f003 f8aa 	bl	8005124 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8001fd0:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001fd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d07e      	beq.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8001fda:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	4613      	mov	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	4413      	add	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	687a      	ldr	r2, [r7, #4]
 8001fea:	4413      	add	r3, r2
 8001fec:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001ff8:	009b      	lsls	r3, r3, #2
 8001ffa:	4413      	add	r3, r2
 8001ffc:	881b      	ldrh	r3, [r3, #0]
 8001ffe:	b29b      	uxth	r3, r3
 8002000:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002008:	843b      	strh	r3, [r7, #32]
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	441a      	add	r2, r3
 8002018:	8c3b      	ldrh	r3, [r7, #32]
 800201a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800201e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002022:	b29b      	uxth	r3, r3
 8002024:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8002026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002028:	78db      	ldrb	r3, [r3, #3]
 800202a:	2b03      	cmp	r3, #3
 800202c:	d00c      	beq.n	8002048 <PCD_EP_ISR_Handler+0x554>
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	78db      	ldrb	r3, [r3, #3]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d008      	beq.n	8002048 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8002036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002038:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 800203a:	2b02      	cmp	r3, #2
 800203c:	d146      	bne.n	80020cc <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 800203e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002040:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002044:	2b00      	cmp	r3, #0
 8002046:	d141      	bne.n	80020cc <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002050:	b29b      	uxth	r3, r3
 8002052:	461a      	mov	r2, r3
 8002054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	4413      	add	r3, r2
 800205c:	3302      	adds	r3, #2
 800205e:	005b      	lsls	r3, r3, #1
 8002060:	687a      	ldr	r2, [r7, #4]
 8002062:	6812      	ldr	r2, [r2, #0]
 8002064:	4413      	add	r3, r2
 8002066:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800206a:	881b      	ldrh	r3, [r3, #0]
 800206c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002070:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	699a      	ldr	r2, [r3, #24]
 8002076:	8bfb      	ldrh	r3, [r7, #30]
 8002078:	429a      	cmp	r2, r3
 800207a:	d906      	bls.n	800208a <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 800207c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800207e:	699a      	ldr	r2, [r3, #24]
 8002080:	8bfb      	ldrh	r3, [r7, #30]
 8002082:	1ad2      	subs	r2, r2, r3
 8002084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002086:	619a      	str	r2, [r3, #24]
 8002088:	e002      	b.n	8002090 <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 800208a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208c:	2200      	movs	r2, #0
 800208e:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 8002090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d106      	bne.n	80020a6 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002098:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800209a:	781b      	ldrb	r3, [r3, #0]
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f006 f8a5 	bl	80081ee <HAL_PCD_DataInStageCallback>
 80020a4:	e018      	b.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	695a      	ldr	r2, [r3, #20]
 80020aa:	8bfb      	ldrh	r3, [r7, #30]
 80020ac:	441a      	add	r2, r3
 80020ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b0:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80020b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b4:	69da      	ldr	r2, [r3, #28]
 80020b6:	8bfb      	ldrh	r3, [r7, #30]
 80020b8:	441a      	add	r2, r3
 80020ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020bc:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020c4:	4618      	mov	r0, r3
 80020c6:	f003 f82d 	bl	8005124 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 80020ca:	e005      	b.n	80020d8 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 80020cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80020ce:	461a      	mov	r2, r3
 80020d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 f91b 	bl	800230e <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80020e0:	b29b      	uxth	r3, r3
 80020e2:	b21b      	sxth	r3, r3
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	f6ff ad0a 	blt.w	8001afe <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 80020ea:	2300      	movs	r3, #0
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	3738      	adds	r7, #56	; 0x38
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b088      	sub	sp, #32
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	4613      	mov	r3, r2
 8002100:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002102:	88fb      	ldrh	r3, [r7, #6]
 8002104:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002108:	2b00      	cmp	r3, #0
 800210a:	d07e      	beq.n	800220a <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002114:	b29b      	uxth	r3, r3
 8002116:	461a      	mov	r2, r3
 8002118:	68bb      	ldr	r3, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	00db      	lsls	r3, r3, #3
 800211e:	4413      	add	r3, r2
 8002120:	3302      	adds	r3, #2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	68fa      	ldr	r2, [r7, #12]
 8002126:	6812      	ldr	r2, [r2, #0]
 8002128:	4413      	add	r3, r2
 800212a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002134:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	699a      	ldr	r2, [r3, #24]
 800213a:	8b7b      	ldrh	r3, [r7, #26]
 800213c:	429a      	cmp	r2, r3
 800213e:	d306      	bcc.n	800214e <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	699a      	ldr	r2, [r3, #24]
 8002144:	8b7b      	ldrh	r3, [r7, #26]
 8002146:	1ad2      	subs	r2, r2, r3
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	619a      	str	r2, [r3, #24]
 800214c:	e002      	b.n	8002154 <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	2200      	movs	r2, #0
 8002152:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d123      	bne.n	80021a4 <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	009b      	lsls	r3, r3, #2
 8002168:	4413      	add	r3, r2
 800216a:	881b      	ldrh	r3, [r3, #0]
 800216c:	b29b      	uxth	r3, r3
 800216e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002172:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002176:	833b      	strh	r3, [r7, #24]
 8002178:	8b3b      	ldrh	r3, [r7, #24]
 800217a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800217e:	833b      	strh	r3, [r7, #24]
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	461a      	mov	r2, r3
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	441a      	add	r2, r3
 800218e:	8b3b      	ldrh	r3, [r7, #24]
 8002190:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002194:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002198:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800219c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021a0:	b29b      	uxth	r3, r3
 80021a2:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80021a4:	88fb      	ldrh	r3, [r7, #6]
 80021a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d01f      	beq.n	80021ee <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	461a      	mov	r2, r3
 80021b4:	68bb      	ldr	r3, [r7, #8]
 80021b6:	781b      	ldrb	r3, [r3, #0]
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	4413      	add	r3, r2
 80021bc:	881b      	ldrh	r3, [r3, #0]
 80021be:	b29b      	uxth	r3, r3
 80021c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80021c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021c8:	82fb      	strh	r3, [r7, #22]
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	461a      	mov	r2, r3
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	441a      	add	r2, r3
 80021d8:	8afb      	ldrh	r3, [r7, #22]
 80021da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80021de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80021e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80021e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80021ea:	b29b      	uxth	r3, r3
 80021ec:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80021ee:	8b7b      	ldrh	r3, [r7, #26]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	f000 8087 	beq.w	8002304 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6818      	ldr	r0, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	6959      	ldr	r1, [r3, #20]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	891a      	ldrh	r2, [r3, #8]
 8002202:	8b7b      	ldrh	r3, [r7, #26]
 8002204:	f004 fc08 	bl	8006a18 <USB_ReadPMA>
 8002208:	e07c      	b.n	8002304 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002212:	b29b      	uxth	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	4413      	add	r3, r2
 800221e:	3306      	adds	r3, #6
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	6812      	ldr	r2, [r2, #0]
 8002226:	4413      	add	r3, r2
 8002228:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800222c:	881b      	ldrh	r3, [r3, #0]
 800222e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002232:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	699a      	ldr	r2, [r3, #24]
 8002238:	8b7b      	ldrh	r3, [r7, #26]
 800223a:	429a      	cmp	r2, r3
 800223c:	d306      	bcc.n	800224c <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	699a      	ldr	r2, [r3, #24]
 8002242:	8b7b      	ldrh	r3, [r7, #26]
 8002244:	1ad2      	subs	r2, r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	619a      	str	r2, [r3, #24]
 800224a:	e002      	b.n	8002252 <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 800224c:	68bb      	ldr	r3, [r7, #8]
 800224e:	2200      	movs	r2, #0
 8002250:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	699b      	ldr	r3, [r3, #24]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d123      	bne.n	80022a2 <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	461a      	mov	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	009b      	lsls	r3, r3, #2
 8002266:	4413      	add	r3, r2
 8002268:	881b      	ldrh	r3, [r3, #0]
 800226a:	b29b      	uxth	r3, r3
 800226c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002270:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002274:	83fb      	strh	r3, [r7, #30]
 8002276:	8bfb      	ldrh	r3, [r7, #30]
 8002278:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800227c:	83fb      	strh	r3, [r7, #30]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	461a      	mov	r2, r3
 8002284:	68bb      	ldr	r3, [r7, #8]
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	009b      	lsls	r3, r3, #2
 800228a:	441a      	add	r2, r3
 800228c:	8bfb      	ldrh	r3, [r7, #30]
 800228e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002292:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002296:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800229a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800229e:	b29b      	uxth	r3, r3
 80022a0:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 80022a2:	88fb      	ldrh	r3, [r7, #6]
 80022a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d11f      	bne.n	80022ec <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	461a      	mov	r2, r3
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	4413      	add	r3, r2
 80022ba:	881b      	ldrh	r3, [r3, #0]
 80022bc:	b29b      	uxth	r3, r3
 80022be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80022c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022c6:	83bb      	strh	r3, [r7, #28]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	461a      	mov	r2, r3
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	781b      	ldrb	r3, [r3, #0]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	441a      	add	r2, r3
 80022d6:	8bbb      	ldrh	r3, [r7, #28]
 80022d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80022dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80022e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80022e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80022e8:	b29b      	uxth	r3, r3
 80022ea:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 80022ec:	8b7b      	ldrh	r3, [r7, #26]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d008      	beq.n	8002304 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	6959      	ldr	r1, [r3, #20]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	895a      	ldrh	r2, [r3, #10]
 80022fe:	8b7b      	ldrh	r3, [r7, #26]
 8002300:	f004 fb8a 	bl	8006a18 <USB_ReadPMA>
    }
  }

  return count;
 8002304:	8b7b      	ldrh	r3, [r7, #26]
}
 8002306:	4618      	mov	r0, r3
 8002308:	3720      	adds	r7, #32
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}

0800230e <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800230e:	b580      	push	{r7, lr}
 8002310:	b0a2      	sub	sp, #136	; 0x88
 8002312:	af00      	add	r7, sp, #0
 8002314:	60f8      	str	r0, [r7, #12]
 8002316:	60b9      	str	r1, [r7, #8]
 8002318:	4613      	mov	r3, r2
 800231a:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800231c:	88fb      	ldrh	r3, [r7, #6]
 800231e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002322:	2b00      	cmp	r3, #0
 8002324:	f000 81c7 	beq.w	80026b6 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002330:	b29b      	uxth	r3, r3
 8002332:	461a      	mov	r2, r3
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4413      	add	r3, r2
 800233c:	3302      	adds	r3, #2
 800233e:	005b      	lsls	r3, r3, #1
 8002340:	68fa      	ldr	r2, [r7, #12]
 8002342:	6812      	ldr	r2, [r2, #0]
 8002344:	4413      	add	r3, r2
 8002346:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800234a:	881b      	ldrh	r3, [r3, #0]
 800234c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002350:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	699a      	ldr	r2, [r3, #24]
 8002358:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800235c:	429a      	cmp	r2, r3
 800235e:	d907      	bls.n	8002370 <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	699a      	ldr	r2, [r3, #24]
 8002364:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002368:	1ad2      	subs	r2, r2, r3
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	619a      	str	r2, [r3, #24]
 800236e:	e002      	b.n	8002376 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	2200      	movs	r2, #0
 8002374:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002376:	68bb      	ldr	r3, [r7, #8]
 8002378:	699b      	ldr	r3, [r3, #24]
 800237a:	2b00      	cmp	r3, #0
 800237c:	f040 80b9 	bne.w	80024f2 <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002380:	68bb      	ldr	r3, [r7, #8]
 8002382:	785b      	ldrb	r3, [r3, #1]
 8002384:	2b00      	cmp	r3, #0
 8002386:	d126      	bne.n	80023d6 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002396:	b29b      	uxth	r3, r3
 8002398:	461a      	mov	r2, r3
 800239a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800239c:	4413      	add	r3, r2
 800239e:	62bb      	str	r3, [r7, #40]	; 0x28
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	781b      	ldrb	r3, [r3, #0]
 80023a4:	011a      	lsls	r2, r3, #4
 80023a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023a8:	4413      	add	r3, r2
 80023aa:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
 80023b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	b29b      	uxth	r3, r3
 80023b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023c2:	881b      	ldrh	r3, [r3, #0]
 80023c4:	b29b      	uxth	r3, r3
 80023c6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80023ca:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80023ce:	b29a      	uxth	r2, r3
 80023d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023d2:	801a      	strh	r2, [r3, #0]
 80023d4:	e01a      	b.n	800240c <HAL_PCD_EP_DB_Transmit+0xfe>
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	785b      	ldrb	r3, [r3, #1]
 80023da:	2b01      	cmp	r3, #1
 80023dc:	d116      	bne.n	800240c <HAL_PCD_EP_DB_Transmit+0xfe>
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	633b      	str	r3, [r7, #48]	; 0x30
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023ec:	b29b      	uxth	r3, r3
 80023ee:	461a      	mov	r2, r3
 80023f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f2:	4413      	add	r3, r2
 80023f4:	633b      	str	r3, [r7, #48]	; 0x30
 80023f6:	68bb      	ldr	r3, [r7, #8]
 80023f8:	781b      	ldrb	r3, [r3, #0]
 80023fa:	011a      	lsls	r2, r3, #4
 80023fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fe:	4413      	add	r3, r2
 8002400:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002404:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002408:	2200      	movs	r2, #0
 800240a:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	623b      	str	r3, [r7, #32]
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	785b      	ldrb	r3, [r3, #1]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d126      	bne.n	8002468 <HAL_PCD_EP_DB_Transmit+0x15a>
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	61bb      	str	r3, [r7, #24]
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002428:	b29b      	uxth	r3, r3
 800242a:	461a      	mov	r2, r3
 800242c:	69bb      	ldr	r3, [r7, #24]
 800242e:	4413      	add	r3, r2
 8002430:	61bb      	str	r3, [r7, #24]
 8002432:	68bb      	ldr	r3, [r7, #8]
 8002434:	781b      	ldrb	r3, [r3, #0]
 8002436:	011a      	lsls	r2, r3, #4
 8002438:	69bb      	ldr	r3, [r7, #24]
 800243a:	4413      	add	r3, r2
 800243c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002440:	617b      	str	r3, [r7, #20]
 8002442:	697b      	ldr	r3, [r7, #20]
 8002444:	881b      	ldrh	r3, [r3, #0]
 8002446:	b29b      	uxth	r3, r3
 8002448:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800244c:	b29a      	uxth	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	801a      	strh	r2, [r3, #0]
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b29b      	uxth	r3, r3
 8002458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800245c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002460:	b29a      	uxth	r2, r3
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	801a      	strh	r2, [r3, #0]
 8002466:	e017      	b.n	8002498 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	785b      	ldrb	r3, [r3, #1]
 800246c:	2b01      	cmp	r3, #1
 800246e:	d113      	bne.n	8002498 <HAL_PCD_EP_DB_Transmit+0x18a>
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002478:	b29b      	uxth	r3, r3
 800247a:	461a      	mov	r2, r3
 800247c:	6a3b      	ldr	r3, [r7, #32]
 800247e:	4413      	add	r3, r2
 8002480:	623b      	str	r3, [r7, #32]
 8002482:	68bb      	ldr	r3, [r7, #8]
 8002484:	781b      	ldrb	r3, [r3, #0]
 8002486:	011a      	lsls	r2, r3, #4
 8002488:	6a3b      	ldr	r3, [r7, #32]
 800248a:	4413      	add	r3, r2
 800248c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002490:	61fb      	str	r3, [r7, #28]
 8002492:	69fb      	ldr	r3, [r7, #28]
 8002494:	2200      	movs	r2, #0
 8002496:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	4619      	mov	r1, r3
 800249e:	68f8      	ldr	r0, [r7, #12]
 80024a0:	f005 fea5 	bl	80081ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024a4:	88fb      	ldrh	r3, [r7, #6]
 80024a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	f000 82d4 	beq.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	461a      	mov	r2, r3
 80024b6:	68bb      	ldr	r3, [r7, #8]
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4413      	add	r3, r2
 80024be:	881b      	ldrh	r3, [r3, #0]
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80024c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80024ca:	827b      	strh	r3, [r7, #18]
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	441a      	add	r2, r3
 80024da:	8a7b      	ldrh	r3, [r7, #18]
 80024dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80024e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80024e4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80024e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024ec:	b29b      	uxth	r3, r3
 80024ee:	8013      	strh	r3, [r2, #0]
 80024f0:	e2b2      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d021      	beq.n	8002540 <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	461a      	mov	r2, r3
 8002502:	68bb      	ldr	r3, [r7, #8]
 8002504:	781b      	ldrb	r3, [r3, #0]
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	4413      	add	r3, r2
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	b29b      	uxth	r3, r3
 800250e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002512:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002516:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	461a      	mov	r2, r3
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	009b      	lsls	r3, r3, #2
 8002526:	441a      	add	r2, r3
 8002528:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800252c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002530:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002534:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002538:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800253c:	b29b      	uxth	r3, r3
 800253e:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002546:	2b01      	cmp	r3, #1
 8002548:	f040 8286 	bne.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	695a      	ldr	r2, [r3, #20]
 8002550:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002554:	441a      	add	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	69da      	ldr	r2, [r3, #28]
 800255e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002562:	441a      	add	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	6a1a      	ldr	r2, [r3, #32]
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	429a      	cmp	r2, r3
 8002572:	d309      	bcc.n	8002588 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	691b      	ldr	r3, [r3, #16]
 8002578:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	6a1a      	ldr	r2, [r3, #32]
 800257e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002580:	1ad2      	subs	r2, r2, r3
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	621a      	str	r2, [r3, #32]
 8002586:	e015      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002588:	68bb      	ldr	r3, [r7, #8]
 800258a:	6a1b      	ldr	r3, [r3, #32]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d107      	bne.n	80025a0 <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8002590:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002594:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002596:	68bb      	ldr	r3, [r7, #8]
 8002598:	2200      	movs	r2, #0
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800259e:	e009      	b.n	80025b4 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 80025a8:	68bb      	ldr	r3, [r7, #8]
 80025aa:	6a1b      	ldr	r3, [r3, #32]
 80025ac:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	2200      	movs	r2, #0
 80025b2:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	785b      	ldrb	r3, [r3, #1]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d155      	bne.n	8002668 <HAL_PCD_EP_DB_Transmit+0x35a>
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	63bb      	str	r3, [r7, #56]	; 0x38
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	461a      	mov	r2, r3
 80025ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025d0:	4413      	add	r3, r2
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	011a      	lsls	r2, r3, #4
 80025da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025dc:	4413      	add	r3, r2
 80025de:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80025e2:	637b      	str	r3, [r7, #52]	; 0x34
 80025e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d112      	bne.n	8002610 <HAL_PCD_EP_DB_Transmit+0x302>
 80025ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002608:	b29a      	uxth	r2, r3
 800260a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	e047      	b.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002612:	2b3e      	cmp	r3, #62	; 0x3e
 8002614:	d811      	bhi.n	800263a <HAL_PCD_EP_DB_Transmit+0x32c>
 8002616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002618:	085b      	lsrs	r3, r3, #1
 800261a:	64bb      	str	r3, [r7, #72]	; 0x48
 800261c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b00      	cmp	r3, #0
 8002624:	d002      	beq.n	800262c <HAL_PCD_EP_DB_Transmit+0x31e>
 8002626:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002628:	3301      	adds	r3, #1
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
 800262c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800262e:	b29b      	uxth	r3, r3
 8002630:	029b      	lsls	r3, r3, #10
 8002632:	b29a      	uxth	r2, r3
 8002634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002636:	801a      	strh	r2, [r3, #0]
 8002638:	e032      	b.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x392>
 800263a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800263c:	095b      	lsrs	r3, r3, #5
 800263e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002642:	f003 031f 	and.w	r3, r3, #31
 8002646:	2b00      	cmp	r3, #0
 8002648:	d102      	bne.n	8002650 <HAL_PCD_EP_DB_Transmit+0x342>
 800264a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800264c:	3b01      	subs	r3, #1
 800264e:	64bb      	str	r3, [r7, #72]	; 0x48
 8002650:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002652:	b29b      	uxth	r3, r3
 8002654:	029b      	lsls	r3, r3, #10
 8002656:	b29b      	uxth	r3, r3
 8002658:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800265c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002660:	b29a      	uxth	r2, r3
 8002662:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002664:	801a      	strh	r2, [r3, #0]
 8002666:	e01b      	b.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	785b      	ldrb	r3, [r3, #1]
 800266c:	2b01      	cmp	r3, #1
 800266e:	d117      	bne.n	80026a0 <HAL_PCD_EP_DB_Transmit+0x392>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	643b      	str	r3, [r7, #64]	; 0x40
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800267e:	b29b      	uxth	r3, r3
 8002680:	461a      	mov	r2, r3
 8002682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002684:	4413      	add	r3, r2
 8002686:	643b      	str	r3, [r7, #64]	; 0x40
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	011a      	lsls	r2, r3, #4
 800268e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002690:	4413      	add	r3, r2
 8002692:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002696:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002698:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800269a:	b29a      	uxth	r2, r3
 800269c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800269e:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	6818      	ldr	r0, [r3, #0]
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	6959      	ldr	r1, [r3, #20]
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	891a      	ldrh	r2, [r3, #8]
 80026ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026ae:	b29b      	uxth	r3, r3
 80026b0:	f004 f96d 	bl	800698e <USB_WritePMA>
 80026b4:	e1d0      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026be:	b29b      	uxth	r3, r3
 80026c0:	461a      	mov	r2, r3
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	00db      	lsls	r3, r3, #3
 80026c8:	4413      	add	r3, r2
 80026ca:	3306      	adds	r3, #6
 80026cc:	005b      	lsls	r3, r3, #1
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	6812      	ldr	r2, [r2, #0]
 80026d2:	4413      	add	r3, r2
 80026d4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80026d8:	881b      	ldrh	r3, [r3, #0]
 80026da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80026de:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	699a      	ldr	r2, [r3, #24]
 80026e6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d307      	bcc.n	80026fe <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	699a      	ldr	r2, [r3, #24]
 80026f2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026f6:	1ad2      	subs	r2, r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	619a      	str	r2, [r3, #24]
 80026fc:	e002      	b.n	8002704 <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 80026fe:	68bb      	ldr	r3, [r7, #8]
 8002700:	2200      	movs	r2, #0
 8002702:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	699b      	ldr	r3, [r3, #24]
 8002708:	2b00      	cmp	r3, #0
 800270a:	f040 80c4 	bne.w	8002896 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800270e:	68bb      	ldr	r3, [r7, #8]
 8002710:	785b      	ldrb	r3, [r3, #1]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d126      	bne.n	8002764 <HAL_PCD_EP_DB_Transmit+0x456>
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002724:	b29b      	uxth	r3, r3
 8002726:	461a      	mov	r2, r3
 8002728:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800272a:	4413      	add	r3, r2
 800272c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	011a      	lsls	r2, r3, #4
 8002734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002736:	4413      	add	r3, r2
 8002738:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800273c:	66bb      	str	r3, [r7, #104]	; 0x68
 800273e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002740:	881b      	ldrh	r3, [r3, #0]
 8002742:	b29b      	uxth	r3, r3
 8002744:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002748:	b29a      	uxth	r2, r3
 800274a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800274c:	801a      	strh	r2, [r3, #0]
 800274e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002750:	881b      	ldrh	r3, [r3, #0]
 8002752:	b29b      	uxth	r3, r3
 8002754:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002758:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800275c:	b29a      	uxth	r2, r3
 800275e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002760:	801a      	strh	r2, [r3, #0]
 8002762:	e01a      	b.n	800279a <HAL_PCD_EP_DB_Transmit+0x48c>
 8002764:	68bb      	ldr	r3, [r7, #8]
 8002766:	785b      	ldrb	r3, [r3, #1]
 8002768:	2b01      	cmp	r3, #1
 800276a:	d116      	bne.n	800279a <HAL_PCD_EP_DB_Transmit+0x48c>
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	677b      	str	r3, [r7, #116]	; 0x74
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800277a:	b29b      	uxth	r3, r3
 800277c:	461a      	mov	r2, r3
 800277e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002780:	4413      	add	r3, r2
 8002782:	677b      	str	r3, [r7, #116]	; 0x74
 8002784:	68bb      	ldr	r3, [r7, #8]
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	011a      	lsls	r2, r3, #4
 800278a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278c:	4413      	add	r3, r2
 800278e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002792:	673b      	str	r3, [r7, #112]	; 0x70
 8002794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002796:	2200      	movs	r2, #0
 8002798:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	67bb      	str	r3, [r7, #120]	; 0x78
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	785b      	ldrb	r3, [r3, #1]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d12f      	bne.n	8002808 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027b8:	b29b      	uxth	r3, r3
 80027ba:	461a      	mov	r2, r3
 80027bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027c0:	4413      	add	r3, r2
 80027c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	011a      	lsls	r2, r3, #4
 80027cc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80027d0:	4413      	add	r3, r2
 80027d2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80027d6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80027da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027de:	881b      	ldrh	r3, [r3, #0]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80027e6:	b29a      	uxth	r2, r3
 80027e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027ec:	801a      	strh	r2, [r3, #0]
 80027ee:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80027f2:	881b      	ldrh	r3, [r3, #0]
 80027f4:	b29b      	uxth	r3, r3
 80027f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027fe:	b29a      	uxth	r2, r3
 8002800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002804:	801a      	strh	r2, [r3, #0]
 8002806:	e017      	b.n	8002838 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	785b      	ldrb	r3, [r3, #1]
 800280c:	2b01      	cmp	r3, #1
 800280e:	d113      	bne.n	8002838 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002818:	b29b      	uxth	r3, r3
 800281a:	461a      	mov	r2, r3
 800281c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800281e:	4413      	add	r3, r2
 8002820:	67bb      	str	r3, [r7, #120]	; 0x78
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	011a      	lsls	r2, r3, #4
 8002828:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800282a:	4413      	add	r3, r2
 800282c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002830:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002832:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002834:	2200      	movs	r2, #0
 8002836:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002838:	68bb      	ldr	r3, [r7, #8]
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	4619      	mov	r1, r3
 800283e:	68f8      	ldr	r0, [r7, #12]
 8002840:	f005 fcd5 	bl	80081ee <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002844:	88fb      	ldrh	r3, [r7, #6]
 8002846:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800284a:	2b00      	cmp	r3, #0
 800284c:	f040 8104 	bne.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	461a      	mov	r2, r3
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	4413      	add	r3, r2
 800285e:	881b      	ldrh	r3, [r3, #0]
 8002860:	b29b      	uxth	r3, r3
 8002862:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002866:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800286a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	461a      	mov	r2, r3
 8002874:	68bb      	ldr	r3, [r7, #8]
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	441a      	add	r2, r3
 800287c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002880:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002884:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002888:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800288c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002890:	b29b      	uxth	r3, r3
 8002892:	8013      	strh	r3, [r2, #0]
 8002894:	e0e0      	b.n	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002896:	88fb      	ldrh	r3, [r7, #6]
 8002898:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800289c:	2b00      	cmp	r3, #0
 800289e:	d121      	bne.n	80028e4 <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	461a      	mov	r2, r3
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	009b      	lsls	r3, r3, #2
 80028ac:	4413      	add	r3, r2
 80028ae:	881b      	ldrh	r3, [r3, #0]
 80028b0:	b29b      	uxth	r3, r3
 80028b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80028b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028ba:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	461a      	mov	r2, r3
 80028c4:	68bb      	ldr	r3, [r7, #8]
 80028c6:	781b      	ldrb	r3, [r3, #0]
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	441a      	add	r2, r3
 80028cc:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 80028d0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80028d4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80028d8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80028dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	f040 80b4 	bne.w	8002a58 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	695a      	ldr	r2, [r3, #20]
 80028f4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80028f8:	441a      	add	r2, r3
 80028fa:	68bb      	ldr	r3, [r7, #8]
 80028fc:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	69da      	ldr	r2, [r3, #28]
 8002902:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002906:	441a      	add	r2, r3
 8002908:	68bb      	ldr	r3, [r7, #8]
 800290a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 800290c:	68bb      	ldr	r3, [r7, #8]
 800290e:	6a1a      	ldr	r2, [r3, #32]
 8002910:	68bb      	ldr	r3, [r7, #8]
 8002912:	691b      	ldr	r3, [r3, #16]
 8002914:	429a      	cmp	r2, r3
 8002916:	d309      	bcc.n	800292c <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	691b      	ldr	r3, [r3, #16]
 800291c:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 800291e:	68bb      	ldr	r3, [r7, #8]
 8002920:	6a1a      	ldr	r2, [r3, #32]
 8002922:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002924:	1ad2      	subs	r2, r2, r3
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	621a      	str	r2, [r3, #32]
 800292a:	e015      	b.n	8002958 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d107      	bne.n	8002944 <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002934:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002938:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2200      	movs	r2, #0
 800293e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002942:	e009      	b.n	8002958 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	6a1b      	ldr	r3, [r3, #32]
 8002948:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 800294a:	68bb      	ldr	r3, [r7, #8]
 800294c:	2200      	movs	r2, #0
 800294e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	2200      	movs	r2, #0
 8002954:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	667b      	str	r3, [r7, #100]	; 0x64
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	785b      	ldrb	r3, [r3, #1]
 8002962:	2b00      	cmp	r3, #0
 8002964:	d155      	bne.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x704>
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002974:	b29b      	uxth	r3, r3
 8002976:	461a      	mov	r2, r3
 8002978:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800297a:	4413      	add	r3, r2
 800297c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	011a      	lsls	r2, r3, #4
 8002984:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002986:	4413      	add	r3, r2
 8002988:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800298c:	65bb      	str	r3, [r7, #88]	; 0x58
 800298e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002990:	2b00      	cmp	r3, #0
 8002992:	d112      	bne.n	80029ba <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002994:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002996:	881b      	ldrh	r3, [r3, #0]
 8002998:	b29b      	uxth	r3, r3
 800299a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800299e:	b29a      	uxth	r2, r3
 80029a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a2:	801a      	strh	r2, [r3, #0]
 80029a4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029a6:	881b      	ldrh	r3, [r3, #0]
 80029a8:	b29b      	uxth	r3, r3
 80029aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80029ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80029b2:	b29a      	uxth	r2, r3
 80029b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029b6:	801a      	strh	r2, [r3, #0]
 80029b8:	e044      	b.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x736>
 80029ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029bc:	2b3e      	cmp	r3, #62	; 0x3e
 80029be:	d811      	bhi.n	80029e4 <HAL_PCD_EP_DB_Transmit+0x6d6>
 80029c0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c2:	085b      	lsrs	r3, r3, #1
 80029c4:	657b      	str	r3, [r7, #84]	; 0x54
 80029c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d002      	beq.n	80029d6 <HAL_PCD_EP_DB_Transmit+0x6c8>
 80029d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d2:	3301      	adds	r3, #1
 80029d4:	657b      	str	r3, [r7, #84]	; 0x54
 80029d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029d8:	b29b      	uxth	r3, r3
 80029da:	029b      	lsls	r3, r3, #10
 80029dc:	b29a      	uxth	r2, r3
 80029de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80029e0:	801a      	strh	r2, [r3, #0]
 80029e2:	e02f      	b.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x736>
 80029e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029e6:	095b      	lsrs	r3, r3, #5
 80029e8:	657b      	str	r3, [r7, #84]	; 0x54
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	f003 031f 	and.w	r3, r3, #31
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d102      	bne.n	80029fa <HAL_PCD_EP_DB_Transmit+0x6ec>
 80029f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029f6:	3b01      	subs	r3, #1
 80029f8:	657b      	str	r3, [r7, #84]	; 0x54
 80029fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80029fc:	b29b      	uxth	r3, r3
 80029fe:	029b      	lsls	r3, r3, #10
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a06:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a0a:	b29a      	uxth	r2, r3
 8002a0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002a0e:	801a      	strh	r2, [r3, #0]
 8002a10:	e018      	b.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	785b      	ldrb	r3, [r3, #1]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d114      	bne.n	8002a44 <HAL_PCD_EP_DB_Transmit+0x736>
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a22:	b29b      	uxth	r3, r3
 8002a24:	461a      	mov	r2, r3
 8002a26:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a28:	4413      	add	r3, r2
 8002a2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	781b      	ldrb	r3, [r3, #0]
 8002a30:	011a      	lsls	r2, r3, #4
 8002a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002a34:	4413      	add	r3, r2
 8002a36:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002a3a:	663b      	str	r3, [r7, #96]	; 0x60
 8002a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a42:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	6818      	ldr	r0, [r3, #0]
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6959      	ldr	r1, [r3, #20]
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	895a      	ldrh	r2, [r3, #10]
 8002a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a52:	b29b      	uxth	r3, r3
 8002a54:	f003 ff9b 	bl	800698e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	781b      	ldrb	r3, [r3, #0]
 8002a62:	009b      	lsls	r3, r3, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	881b      	ldrh	r3, [r3, #0]
 8002a68:	b29b      	uxth	r3, r3
 8002a6a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a6e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002a72:	823b      	strh	r3, [r7, #16]
 8002a74:	8a3b      	ldrh	r3, [r7, #16]
 8002a76:	f083 0310 	eor.w	r3, r3, #16
 8002a7a:	823b      	strh	r3, [r7, #16]
 8002a7c:	8a3b      	ldrh	r3, [r7, #16]
 8002a7e:	f083 0320 	eor.w	r3, r3, #32
 8002a82:	823b      	strh	r3, [r7, #16]
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	781b      	ldrb	r3, [r3, #0]
 8002a8e:	009b      	lsls	r3, r3, #2
 8002a90:	441a      	add	r2, r3
 8002a92:	8a3b      	ldrh	r3, [r7, #16]
 8002a94:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a98:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a9c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002aa4:	b29b      	uxth	r3, r3
 8002aa6:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3788      	adds	r7, #136	; 0x88
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}

08002ab2 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002ab2:	b480      	push	{r7}
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	607b      	str	r3, [r7, #4]
 8002abc:	460b      	mov	r3, r1
 8002abe:	817b      	strh	r3, [r7, #10]
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002ac4:	897b      	ldrh	r3, [r7, #10]
 8002ac6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d00b      	beq.n	8002ae8 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002ad0:	897b      	ldrh	r3, [r7, #10]
 8002ad2:	f003 0307 	and.w	r3, r3, #7
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	009b      	lsls	r3, r3, #2
 8002adc:	4413      	add	r3, r2
 8002ade:	00db      	lsls	r3, r3, #3
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4413      	add	r3, r2
 8002ae4:	617b      	str	r3, [r7, #20]
 8002ae6:	e009      	b.n	8002afc <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002ae8:	897a      	ldrh	r2, [r7, #10]
 8002aea:	4613      	mov	r3, r2
 8002aec:	009b      	lsls	r3, r3, #2
 8002aee:	4413      	add	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002af6:	68fa      	ldr	r2, [r7, #12]
 8002af8:	4413      	add	r3, r2
 8002afa:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002afc:	893b      	ldrh	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d107      	bne.n	8002b12 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002b02:	697b      	ldr	r3, [r7, #20]
 8002b04:	2200      	movs	r2, #0
 8002b06:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	b29a      	uxth	r2, r3
 8002b0c:	697b      	ldr	r3, [r7, #20]
 8002b0e:	80da      	strh	r2, [r3, #6]
 8002b10:	e00b      	b.n	8002b2a <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002b12:	697b      	ldr	r3, [r7, #20]
 8002b14:	2201      	movs	r2, #1
 8002b16:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	b29a      	uxth	r2, r3
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	0c1b      	lsrs	r3, r3, #16
 8002b24:	b29a      	uxth	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002b2a:	2300      	movs	r3, #0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	371c      	adds	r7, #28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bc80      	pop	{r7}
 8002b34:	4770      	bx	lr
	...

08002b38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af00      	add	r7, sp, #0
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d101      	bne.n	8002b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b46:	2301      	movs	r3, #1
 8002b48:	e26c      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	f000 8087 	beq.w	8002c66 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002b58:	4b92      	ldr	r3, [pc, #584]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f003 030c 	and.w	r3, r3, #12
 8002b60:	2b04      	cmp	r3, #4
 8002b62:	d00c      	beq.n	8002b7e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002b64:	4b8f      	ldr	r3, [pc, #572]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	f003 030c 	and.w	r3, r3, #12
 8002b6c:	2b08      	cmp	r3, #8
 8002b6e:	d112      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
 8002b70:	4b8c      	ldr	r3, [pc, #560]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d10b      	bne.n	8002b96 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b7e:	4b89      	ldr	r3, [pc, #548]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06c      	beq.n	8002c64 <HAL_RCC_OscConfig+0x12c>
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	685b      	ldr	r3, [r3, #4]
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d168      	bne.n	8002c64 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	e246      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	685b      	ldr	r3, [r3, #4]
 8002b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b9e:	d106      	bne.n	8002bae <HAL_RCC_OscConfig+0x76>
 8002ba0:	4b80      	ldr	r3, [pc, #512]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a7f      	ldr	r2, [pc, #508]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002ba6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002baa:	6013      	str	r3, [r2, #0]
 8002bac:	e02e      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	685b      	ldr	r3, [r3, #4]
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d10c      	bne.n	8002bd0 <HAL_RCC_OscConfig+0x98>
 8002bb6:	4b7b      	ldr	r3, [pc, #492]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a7a      	ldr	r2, [pc, #488]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bbc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	4b78      	ldr	r3, [pc, #480]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4a77      	ldr	r2, [pc, #476]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bc8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bcc:	6013      	str	r3, [r2, #0]
 8002bce:	e01d      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002bd8:	d10c      	bne.n	8002bf4 <HAL_RCC_OscConfig+0xbc>
 8002bda:	4b72      	ldr	r3, [pc, #456]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	4a71      	ldr	r2, [pc, #452]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002be4:	6013      	str	r3, [r2, #0]
 8002be6:	4b6f      	ldr	r3, [pc, #444]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a6e      	ldr	r2, [pc, #440]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bf0:	6013      	str	r3, [r2, #0]
 8002bf2:	e00b      	b.n	8002c0c <HAL_RCC_OscConfig+0xd4>
 8002bf4:	4b6b      	ldr	r3, [pc, #428]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a6a      	ldr	r2, [pc, #424]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bfe:	6013      	str	r3, [r2, #0]
 8002c00:	4b68      	ldr	r3, [pc, #416]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a67      	ldr	r2, [pc, #412]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002c0a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d013      	beq.n	8002c3c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fd fe26 	bl	8000864 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c1c:	f7fd fe22 	bl	8000864 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b64      	cmp	r3, #100	; 0x64
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e1fa      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c2e:	4b5d      	ldr	r3, [pc, #372]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d0f0      	beq.n	8002c1c <HAL_RCC_OscConfig+0xe4>
 8002c3a:	e014      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c3c:	f7fd fe12 	bl	8000864 <HAL_GetTick>
 8002c40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c42:	e008      	b.n	8002c56 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c44:	f7fd fe0e 	bl	8000864 <HAL_GetTick>
 8002c48:	4602      	mov	r2, r0
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	1ad3      	subs	r3, r2, r3
 8002c4e:	2b64      	cmp	r3, #100	; 0x64
 8002c50:	d901      	bls.n	8002c56 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002c52:	2303      	movs	r3, #3
 8002c54:	e1e6      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c56:	4b53      	ldr	r3, [pc, #332]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d1f0      	bne.n	8002c44 <HAL_RCC_OscConfig+0x10c>
 8002c62:	e000      	b.n	8002c66 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d063      	beq.n	8002d3a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c72:	4b4c      	ldr	r3, [pc, #304]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f003 030c 	and.w	r3, r3, #12
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d00b      	beq.n	8002c96 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002c7e:	4b49      	ldr	r3, [pc, #292]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	f003 030c 	and.w	r3, r3, #12
 8002c86:	2b08      	cmp	r3, #8
 8002c88:	d11c      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
 8002c8a:	4b46      	ldr	r3, [pc, #280]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d116      	bne.n	8002cc4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	4b43      	ldr	r3, [pc, #268]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 0302 	and.w	r3, r3, #2
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d005      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d001      	beq.n	8002cae <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002caa:	2301      	movs	r3, #1
 8002cac:	e1ba      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cae:	4b3d      	ldr	r3, [pc, #244]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	695b      	ldr	r3, [r3, #20]
 8002cba:	00db      	lsls	r3, r3, #3
 8002cbc:	4939      	ldr	r1, [pc, #228]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002cc2:	e03a      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	691b      	ldr	r3, [r3, #16]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d020      	beq.n	8002d0e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ccc:	4b36      	ldr	r3, [pc, #216]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002cce:	2201      	movs	r2, #1
 8002cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd2:	f7fd fdc7 	bl	8000864 <HAL_GetTick>
 8002cd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd8:	e008      	b.n	8002cec <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cda:	f7fd fdc3 	bl	8000864 <HAL_GetTick>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	693b      	ldr	r3, [r7, #16]
 8002ce2:	1ad3      	subs	r3, r2, r3
 8002ce4:	2b02      	cmp	r3, #2
 8002ce6:	d901      	bls.n	8002cec <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	e19b      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cec:	4b2d      	ldr	r3, [pc, #180]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f003 0302 	and.w	r3, r3, #2
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d0f0      	beq.n	8002cda <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cf8:	4b2a      	ldr	r3, [pc, #168]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	695b      	ldr	r3, [r3, #20]
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	4927      	ldr	r1, [pc, #156]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	600b      	str	r3, [r1, #0]
 8002d0c:	e015      	b.n	8002d3a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d0e:	4b26      	ldr	r3, [pc, #152]	; (8002da8 <HAL_RCC_OscConfig+0x270>)
 8002d10:	2200      	movs	r2, #0
 8002d12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d14:	f7fd fda6 	bl	8000864 <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d1c:	f7fd fda2 	bl	8000864 <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e17a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d2e:	4b1d      	ldr	r3, [pc, #116]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 0302 	and.w	r3, r3, #2
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1f0      	bne.n	8002d1c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f003 0308 	and.w	r3, r3, #8
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d03a      	beq.n	8002dbc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	699b      	ldr	r3, [r3, #24]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d019      	beq.n	8002d82 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d4e:	4b17      	ldr	r3, [pc, #92]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d50:	2201      	movs	r2, #1
 8002d52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d54:	f7fd fd86 	bl	8000864 <HAL_GetTick>
 8002d58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d5a:	e008      	b.n	8002d6e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5c:	f7fd fd82 	bl	8000864 <HAL_GetTick>
 8002d60:	4602      	mov	r2, r0
 8002d62:	693b      	ldr	r3, [r7, #16]
 8002d64:	1ad3      	subs	r3, r2, r3
 8002d66:	2b02      	cmp	r3, #2
 8002d68:	d901      	bls.n	8002d6e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002d6a:	2303      	movs	r3, #3
 8002d6c:	e15a      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d6e:	4b0d      	ldr	r3, [pc, #52]	; (8002da4 <HAL_RCC_OscConfig+0x26c>)
 8002d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d72:	f003 0302 	and.w	r3, r3, #2
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d0f0      	beq.n	8002d5c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002d7a:	2001      	movs	r0, #1
 8002d7c:	f000 faa6 	bl	80032cc <RCC_Delay>
 8002d80:	e01c      	b.n	8002dbc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d82:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <HAL_RCC_OscConfig+0x274>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d88:	f7fd fd6c 	bl	8000864 <HAL_GetTick>
 8002d8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d8e:	e00f      	b.n	8002db0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d90:	f7fd fd68 	bl	8000864 <HAL_GetTick>
 8002d94:	4602      	mov	r2, r0
 8002d96:	693b      	ldr	r3, [r7, #16]
 8002d98:	1ad3      	subs	r3, r2, r3
 8002d9a:	2b02      	cmp	r3, #2
 8002d9c:	d908      	bls.n	8002db0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002d9e:	2303      	movs	r3, #3
 8002da0:	e140      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
 8002da2:	bf00      	nop
 8002da4:	40021000 	.word	0x40021000
 8002da8:	42420000 	.word	0x42420000
 8002dac:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002db0:	4b9e      	ldr	r3, [pc, #632]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002db2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d1e9      	bne.n	8002d90 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0304 	and.w	r3, r3, #4
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 80a6 	beq.w	8002f16 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dce:	4b97      	ldr	r3, [pc, #604]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002dd0:	69db      	ldr	r3, [r3, #28]
 8002dd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d10d      	bne.n	8002df6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dda:	4b94      	ldr	r3, [pc, #592]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ddc:	69db      	ldr	r3, [r3, #28]
 8002dde:	4a93      	ldr	r2, [pc, #588]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002de4:	61d3      	str	r3, [r2, #28]
 8002de6:	4b91      	ldr	r3, [pc, #580]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002de8:	69db      	ldr	r3, [r3, #28]
 8002dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dee:	60bb      	str	r3, [r7, #8]
 8002df0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002df2:	2301      	movs	r3, #1
 8002df4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df6:	4b8e      	ldr	r3, [pc, #568]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d118      	bne.n	8002e34 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e02:	4b8b      	ldr	r3, [pc, #556]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a8a      	ldr	r2, [pc, #552]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e0e:	f7fd fd29 	bl	8000864 <HAL_GetTick>
 8002e12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e14:	e008      	b.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e16:	f7fd fd25 	bl	8000864 <HAL_GetTick>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b64      	cmp	r3, #100	; 0x64
 8002e22:	d901      	bls.n	8002e28 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002e24:	2303      	movs	r3, #3
 8002e26:	e0fd      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e28:	4b81      	ldr	r3, [pc, #516]	; (8003030 <HAL_RCC_OscConfig+0x4f8>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d0f0      	beq.n	8002e16 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	68db      	ldr	r3, [r3, #12]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d106      	bne.n	8002e4a <HAL_RCC_OscConfig+0x312>
 8002e3c:	4b7b      	ldr	r3, [pc, #492]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
 8002e40:	4a7a      	ldr	r2, [pc, #488]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e42:	f043 0301 	orr.w	r3, r3, #1
 8002e46:	6213      	str	r3, [r2, #32]
 8002e48:	e02d      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d10c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x334>
 8002e52:	4b76      	ldr	r3, [pc, #472]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e54:	6a1b      	ldr	r3, [r3, #32]
 8002e56:	4a75      	ldr	r2, [pc, #468]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e58:	f023 0301 	bic.w	r3, r3, #1
 8002e5c:	6213      	str	r3, [r2, #32]
 8002e5e:	4b73      	ldr	r3, [pc, #460]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e60:	6a1b      	ldr	r3, [r3, #32]
 8002e62:	4a72      	ldr	r2, [pc, #456]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e64:	f023 0304 	bic.w	r3, r3, #4
 8002e68:	6213      	str	r3, [r2, #32]
 8002e6a:	e01c      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b05      	cmp	r3, #5
 8002e72:	d10c      	bne.n	8002e8e <HAL_RCC_OscConfig+0x356>
 8002e74:	4b6d      	ldr	r3, [pc, #436]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e76:	6a1b      	ldr	r3, [r3, #32]
 8002e78:	4a6c      	ldr	r2, [pc, #432]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e7a:	f043 0304 	orr.w	r3, r3, #4
 8002e7e:	6213      	str	r3, [r2, #32]
 8002e80:	4b6a      	ldr	r3, [pc, #424]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e82:	6a1b      	ldr	r3, [r3, #32]
 8002e84:	4a69      	ldr	r2, [pc, #420]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e86:	f043 0301 	orr.w	r3, r3, #1
 8002e8a:	6213      	str	r3, [r2, #32]
 8002e8c:	e00b      	b.n	8002ea6 <HAL_RCC_OscConfig+0x36e>
 8002e8e:	4b67      	ldr	r3, [pc, #412]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e90:	6a1b      	ldr	r3, [r3, #32]
 8002e92:	4a66      	ldr	r2, [pc, #408]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6213      	str	r3, [r2, #32]
 8002e9a:	4b64      	ldr	r3, [pc, #400]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	4a63      	ldr	r2, [pc, #396]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ea0:	f023 0304 	bic.w	r3, r3, #4
 8002ea4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	68db      	ldr	r3, [r3, #12]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d015      	beq.n	8002eda <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fd fcd9 	bl	8000864 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002eb4:	e00a      	b.n	8002ecc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002eb6:	f7fd fcd5 	bl	8000864 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d901      	bls.n	8002ecc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e0ab      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ecc:	4b57      	ldr	r3, [pc, #348]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ece:	6a1b      	ldr	r3, [r3, #32]
 8002ed0:	f003 0302 	and.w	r3, r3, #2
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d0ee      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x37e>
 8002ed8:	e014      	b.n	8002f04 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eda:	f7fd fcc3 	bl	8000864 <HAL_GetTick>
 8002ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ee0:	e00a      	b.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ee2:	f7fd fcbf 	bl	8000864 <HAL_GetTick>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	693b      	ldr	r3, [r7, #16]
 8002eea:	1ad3      	subs	r3, r2, r3
 8002eec:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef0:	4293      	cmp	r3, r2
 8002ef2:	d901      	bls.n	8002ef8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	e095      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ef8:	4b4c      	ldr	r3, [pc, #304]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002efa:	6a1b      	ldr	r3, [r3, #32]
 8002efc:	f003 0302 	and.w	r3, r3, #2
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d1ee      	bne.n	8002ee2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f04:	7dfb      	ldrb	r3, [r7, #23]
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d105      	bne.n	8002f16 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f0a:	4b48      	ldr	r3, [pc, #288]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f0c:	69db      	ldr	r3, [r3, #28]
 8002f0e:	4a47      	ldr	r2, [pc, #284]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f14:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	69db      	ldr	r3, [r3, #28]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 8081 	beq.w	8003022 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002f20:	4b42      	ldr	r3, [pc, #264]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	f003 030c 	and.w	r3, r3, #12
 8002f28:	2b08      	cmp	r3, #8
 8002f2a:	d061      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	69db      	ldr	r3, [r3, #28]
 8002f30:	2b02      	cmp	r3, #2
 8002f32:	d146      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f34:	4b3f      	ldr	r3, [pc, #252]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f36:	2200      	movs	r2, #0
 8002f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f3a:	f7fd fc93 	bl	8000864 <HAL_GetTick>
 8002f3e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f40:	e008      	b.n	8002f54 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f42:	f7fd fc8f 	bl	8000864 <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	693b      	ldr	r3, [r7, #16]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d901      	bls.n	8002f54 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e067      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002f54:	4b35      	ldr	r3, [pc, #212]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d1f0      	bne.n	8002f42 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f68:	d108      	bne.n	8002f7c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002f6a:	4b30      	ldr	r3, [pc, #192]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	492d      	ldr	r1, [pc, #180]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002f7c:	4b2b      	ldr	r3, [pc, #172]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6a19      	ldr	r1, [r3, #32]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f8c:	430b      	orrs	r3, r1
 8002f8e:	4927      	ldr	r1, [pc, #156]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002f90:	4313      	orrs	r3, r2
 8002f92:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f94:	4b27      	ldr	r3, [pc, #156]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f9a:	f7fd fc63 	bl	8000864 <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fa2:	f7fd fc5f 	bl	8000864 <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e037      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002fb4:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x46a>
 8002fc0:	e02f      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCC_OscConfig+0x4fc>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc8:	f7fd fc4c 	bl	8000864 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd0:	f7fd fc48 	bl	8000864 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e020      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe2:	4b12      	ldr	r3, [pc, #72]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d1f0      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x498>
 8002fee:	e018      	b.n	8003022 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	69db      	ldr	r3, [r3, #28]
 8002ff4:	2b01      	cmp	r3, #1
 8002ff6:	d101      	bne.n	8002ffc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002ff8:	2301      	movs	r3, #1
 8002ffa:	e013      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_OscConfig+0x4f4>)
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6a1b      	ldr	r3, [r3, #32]
 800300c:	429a      	cmp	r2, r3
 800300e:	d106      	bne.n	800301e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800301a:	429a      	cmp	r2, r3
 800301c:	d001      	beq.n	8003022 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e000      	b.n	8003024 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8003022:	2300      	movs	r3, #0
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	42420060 	.word	0x42420060

08003038 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b084      	sub	sp, #16
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
 8003040:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d101      	bne.n	800304c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d0      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800304c:	4b6a      	ldr	r3, [pc, #424]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0307 	and.w	r3, r3, #7
 8003054:	683a      	ldr	r2, [r7, #0]
 8003056:	429a      	cmp	r2, r3
 8003058:	d910      	bls.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800305a:	4b67      	ldr	r3, [pc, #412]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f023 0207 	bic.w	r2, r3, #7
 8003062:	4965      	ldr	r1, [pc, #404]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800306a:	4b63      	ldr	r3, [pc, #396]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0307 	and.w	r3, r3, #7
 8003072:	683a      	ldr	r2, [r7, #0]
 8003074:	429a      	cmp	r2, r3
 8003076:	d001      	beq.n	800307c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003078:	2301      	movs	r3, #1
 800307a:	e0b8      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0302 	and.w	r3, r3, #2
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f003 0304 	and.w	r3, r3, #4
 8003090:	2b00      	cmp	r3, #0
 8003092:	d005      	beq.n	80030a0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003094:	4b59      	ldr	r3, [pc, #356]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 800309a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800309e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f003 0308 	and.w	r3, r3, #8
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d005      	beq.n	80030b8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80030ac:	4b53      	ldr	r3, [pc, #332]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	4a52      	ldr	r2, [pc, #328]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030b2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80030b6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030b8:	4b50      	ldr	r3, [pc, #320]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030ba:	685b      	ldr	r3, [r3, #4]
 80030bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689b      	ldr	r3, [r3, #8]
 80030c4:	494d      	ldr	r1, [pc, #308]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d040      	beq.n	8003158 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	2b01      	cmp	r3, #1
 80030dc:	d107      	bne.n	80030ee <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030de:	4b47      	ldr	r3, [pc, #284]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d115      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e07f      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d107      	bne.n	8003106 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f6:	4b41      	ldr	r3, [pc, #260]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d109      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e073      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003106:	4b3d      	ldr	r3, [pc, #244]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b00      	cmp	r3, #0
 8003110:	d101      	bne.n	8003116 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003112:	2301      	movs	r3, #1
 8003114:	e06b      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003116:	4b39      	ldr	r3, [pc, #228]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f023 0203 	bic.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4936      	ldr	r1, [pc, #216]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003124:	4313      	orrs	r3, r2
 8003126:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003128:	f7fd fb9c 	bl	8000864 <HAL_GetTick>
 800312c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800312e:	e00a      	b.n	8003146 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003130:	f7fd fb98 	bl	8000864 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	; 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e053      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003146:	4b2d      	ldr	r3, [pc, #180]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 020c 	and.w	r2, r3, #12
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	429a      	cmp	r2, r3
 8003156:	d1eb      	bne.n	8003130 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	f003 0307 	and.w	r3, r3, #7
 8003160:	683a      	ldr	r2, [r7, #0]
 8003162:	429a      	cmp	r2, r3
 8003164:	d210      	bcs.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f023 0207 	bic.w	r2, r3, #7
 800316e:	4922      	ldr	r1, [pc, #136]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	683b      	ldr	r3, [r7, #0]
 8003172:	4313      	orrs	r3, r2
 8003174:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003176:	4b20      	ldr	r3, [pc, #128]	; (80031f8 <HAL_RCC_ClockConfig+0x1c0>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 0307 	and.w	r3, r3, #7
 800317e:	683a      	ldr	r2, [r7, #0]
 8003180:	429a      	cmp	r2, r3
 8003182:	d001      	beq.n	8003188 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003184:	2301      	movs	r3, #1
 8003186:	e032      	b.n	80031ee <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	f003 0304 	and.w	r3, r3, #4
 8003190:	2b00      	cmp	r3, #0
 8003192:	d008      	beq.n	80031a6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003194:	4b19      	ldr	r3, [pc, #100]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	68db      	ldr	r3, [r3, #12]
 80031a0:	4916      	ldr	r1, [pc, #88]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031a2:	4313      	orrs	r3, r2
 80031a4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	f003 0308 	and.w	r3, r3, #8
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d009      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80031b2:	4b12      	ldr	r3, [pc, #72]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	691b      	ldr	r3, [r3, #16]
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	490e      	ldr	r1, [pc, #56]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80031c6:	f000 f821 	bl	800320c <HAL_RCC_GetSysClockFreq>
 80031ca:	4602      	mov	r2, r0
 80031cc:	4b0b      	ldr	r3, [pc, #44]	; (80031fc <HAL_RCC_ClockConfig+0x1c4>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	091b      	lsrs	r3, r3, #4
 80031d2:	f003 030f 	and.w	r3, r3, #15
 80031d6:	490a      	ldr	r1, [pc, #40]	; (8003200 <HAL_RCC_ClockConfig+0x1c8>)
 80031d8:	5ccb      	ldrb	r3, [r1, r3]
 80031da:	fa22 f303 	lsr.w	r3, r2, r3
 80031de:	4a09      	ldr	r2, [pc, #36]	; (8003204 <HAL_RCC_ClockConfig+0x1cc>)
 80031e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80031e2:	4b09      	ldr	r3, [pc, #36]	; (8003208 <HAL_RCC_ClockConfig+0x1d0>)
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	4618      	mov	r0, r3
 80031e8:	f7fd fafa 	bl	80007e0 <HAL_InitTick>

  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40022000 	.word	0x40022000
 80031fc:	40021000 	.word	0x40021000
 8003200:	0800871c 	.word	0x0800871c
 8003204:	20000168 	.word	0x20000168
 8003208:	2000016c 	.word	0x2000016c

0800320c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800320c:	b490      	push	{r4, r7}
 800320e:	b08a      	sub	sp, #40	; 0x28
 8003210:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8003212:	4b2a      	ldr	r3, [pc, #168]	; (80032bc <HAL_RCC_GetSysClockFreq+0xb0>)
 8003214:	1d3c      	adds	r4, r7, #4
 8003216:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003218:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800321c:	f240 2301 	movw	r3, #513	; 0x201
 8003220:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003222:	2300      	movs	r3, #0
 8003224:	61fb      	str	r3, [r7, #28]
 8003226:	2300      	movs	r3, #0
 8003228:	61bb      	str	r3, [r7, #24]
 800322a:	2300      	movs	r3, #0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	2300      	movs	r3, #0
 8003230:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003232:	2300      	movs	r3, #0
 8003234:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003236:	4b22      	ldr	r3, [pc, #136]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800323c:	69fb      	ldr	r3, [r7, #28]
 800323e:	f003 030c 	and.w	r3, r3, #12
 8003242:	2b04      	cmp	r3, #4
 8003244:	d002      	beq.n	800324c <HAL_RCC_GetSysClockFreq+0x40>
 8003246:	2b08      	cmp	r3, #8
 8003248:	d003      	beq.n	8003252 <HAL_RCC_GetSysClockFreq+0x46>
 800324a:	e02d      	b.n	80032a8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800324e:	623b      	str	r3, [r7, #32]
      break;
 8003250:	e02d      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003252:	69fb      	ldr	r3, [r7, #28]
 8003254:	0c9b      	lsrs	r3, r3, #18
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800325e:	4413      	add	r3, r2
 8003260:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003264:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003266:	69fb      	ldr	r3, [r7, #28]
 8003268:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800326c:	2b00      	cmp	r3, #0
 800326e:	d013      	beq.n	8003298 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003270:	4b13      	ldr	r3, [pc, #76]	; (80032c0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	0c5b      	lsrs	r3, r3, #17
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800327e:	4413      	add	r3, r2
 8003280:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003284:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003286:	697b      	ldr	r3, [r7, #20]
 8003288:	4a0e      	ldr	r2, [pc, #56]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800328a:	fb02 f203 	mul.w	r2, r2, r3
 800328e:	69bb      	ldr	r3, [r7, #24]
 8003290:	fbb2 f3f3 	udiv	r3, r2, r3
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
 8003296:	e004      	b.n	80032a2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003298:	697b      	ldr	r3, [r7, #20]
 800329a:	4a0b      	ldr	r2, [pc, #44]	; (80032c8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800329c:	fb02 f303 	mul.w	r3, r2, r3
 80032a0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a4:	623b      	str	r3, [r7, #32]
      break;
 80032a6:	e002      	b.n	80032ae <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80032a8:	4b06      	ldr	r3, [pc, #24]	; (80032c4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80032aa:	623b      	str	r3, [r7, #32]
      break;
 80032ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80032ae:	6a3b      	ldr	r3, [r7, #32]
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bc90      	pop	{r4, r7}
 80032b8:	4770      	bx	lr
 80032ba:	bf00      	nop
 80032bc:	080086c4 	.word	0x080086c4
 80032c0:	40021000 	.word	0x40021000
 80032c4:	007a1200 	.word	0x007a1200
 80032c8:	003d0900 	.word	0x003d0900

080032cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80032d4:	4b0a      	ldr	r3, [pc, #40]	; (8003300 <RCC_Delay+0x34>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a0a      	ldr	r2, [pc, #40]	; (8003304 <RCC_Delay+0x38>)
 80032da:	fba2 2303 	umull	r2, r3, r2, r3
 80032de:	0a5b      	lsrs	r3, r3, #9
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	fb02 f303 	mul.w	r3, r2, r3
 80032e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80032e8:	bf00      	nop
  }
  while (Delay --);
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	1e5a      	subs	r2, r3, #1
 80032ee:	60fa      	str	r2, [r7, #12]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d1f9      	bne.n	80032e8 <RCC_Delay+0x1c>
}
 80032f4:	bf00      	nop
 80032f6:	bf00      	nop
 80032f8:	3714      	adds	r7, #20
 80032fa:	46bd      	mov	sp, r7
 80032fc:	bc80      	pop	{r7}
 80032fe:	4770      	bx	lr
 8003300:	20000168 	.word	0x20000168
 8003304:	10624dd3 	.word	0x10624dd3

08003308 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003310:	2300      	movs	r3, #0
 8003312:	613b      	str	r3, [r7, #16]
 8003314:	2300      	movs	r3, #0
 8003316:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0301 	and.w	r3, r3, #1
 8003320:	2b00      	cmp	r3, #0
 8003322:	d07d      	beq.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8003324:	2300      	movs	r3, #0
 8003326:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003328:	4b4f      	ldr	r3, [pc, #316]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800332a:	69db      	ldr	r3, [r3, #28]
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	2b00      	cmp	r3, #0
 8003332:	d10d      	bne.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003334:	4b4c      	ldr	r3, [pc, #304]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	4a4b      	ldr	r2, [pc, #300]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800333e:	61d3      	str	r3, [r2, #28]
 8003340:	4b49      	ldr	r3, [pc, #292]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003342:	69db      	ldr	r3, [r3, #28]
 8003344:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003348:	60bb      	str	r3, [r7, #8]
 800334a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800334c:	2301      	movs	r3, #1
 800334e:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003350:	4b46      	ldr	r3, [pc, #280]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003358:	2b00      	cmp	r3, #0
 800335a:	d118      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800335c:	4b43      	ldr	r3, [pc, #268]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a42      	ldr	r2, [pc, #264]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003362:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003368:	f7fd fa7c 	bl	8000864 <HAL_GetTick>
 800336c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800336e:	e008      	b.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003370:	f7fd fa78 	bl	8000864 <HAL_GetTick>
 8003374:	4602      	mov	r2, r0
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	1ad3      	subs	r3, r2, r3
 800337a:	2b64      	cmp	r3, #100	; 0x64
 800337c:	d901      	bls.n	8003382 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e06d      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003382:	4b3a      	ldr	r3, [pc, #232]	; (800346c <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800338a:	2b00      	cmp	r3, #0
 800338c:	d0f0      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003390:	6a1b      	ldr	r3, [r3, #32]
 8003392:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003396:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2b00      	cmp	r3, #0
 800339c:	d02e      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d027      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80033ac:	4b2e      	ldr	r3, [pc, #184]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033ae:	6a1b      	ldr	r3, [r3, #32]
 80033b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80033b4:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80033b6:	4b2e      	ldr	r3, [pc, #184]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80033bc:	4b2c      	ldr	r3, [pc, #176]	; (8003470 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033be:	2200      	movs	r2, #0
 80033c0:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033c2:	4a29      	ldr	r2, [pc, #164]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f003 0301 	and.w	r3, r3, #1
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d014      	beq.n	80033fc <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d2:	f7fd fa47 	bl	8000864 <HAL_GetTick>
 80033d6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d8:	e00a      	b.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033da:	f7fd fa43 	bl	8000864 <HAL_GetTick>
 80033de:	4602      	mov	r2, r0
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	1ad3      	subs	r3, r2, r3
 80033e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d901      	bls.n	80033f0 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80033ec:	2303      	movs	r3, #3
 80033ee:	e036      	b.n	800345e <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f0:	4b1d      	ldr	r3, [pc, #116]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033f2:	6a1b      	ldr	r3, [r3, #32]
 80033f4:	f003 0302 	and.w	r3, r3, #2
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d0ee      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033fc:	4b1a      	ldr	r3, [pc, #104]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033fe:	6a1b      	ldr	r3, [r3, #32]
 8003400:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4917      	ldr	r1, [pc, #92]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340a:	4313      	orrs	r3, r2
 800340c:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800340e:	7dfb      	ldrb	r3, [r7, #23]
 8003410:	2b01      	cmp	r3, #1
 8003412:	d105      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003414:	4b14      	ldr	r3, [pc, #80]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003416:	69db      	ldr	r3, [r3, #28]
 8003418:	4a13      	ldr	r2, [pc, #76]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800341a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800341e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	f003 0302 	and.w	r3, r3, #2
 8003428:	2b00      	cmp	r3, #0
 800342a:	d008      	beq.n	800343e <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	490b      	ldr	r1, [pc, #44]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800343a:	4313      	orrs	r3, r2
 800343c:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0310 	and.w	r3, r3, #16
 8003446:	2b00      	cmp	r3, #0
 8003448:	d008      	beq.n	800345c <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800344a:	4b07      	ldr	r3, [pc, #28]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	4904      	ldr	r1, [pc, #16]	; (8003468 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3718      	adds	r7, #24
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	40021000 	.word	0x40021000
 800346c:	40007000 	.word	0x40007000
 8003470:	42420440 	.word	0x42420440

08003474 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003474:	b480      	push	{r7}
 8003476:	b085      	sub	sp, #20
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003482:	b2db      	uxtb	r3, r3
 8003484:	2b01      	cmp	r3, #1
 8003486:	d001      	beq.n	800348c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e03a      	b.n	8003502 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	2202      	movs	r2, #2
 8003490:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68da      	ldr	r2, [r3, #12]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f042 0201 	orr.w	r2, r2, #1
 80034a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a18      	ldr	r2, [pc, #96]	; (800350c <HAL_TIM_Base_Start_IT+0x98>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d00e      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x58>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b6:	d009      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x58>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	4a14      	ldr	r2, [pc, #80]	; (8003510 <HAL_TIM_Base_Start_IT+0x9c>)
 80034be:	4293      	cmp	r3, r2
 80034c0:	d004      	beq.n	80034cc <HAL_TIM_Base_Start_IT+0x58>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4a13      	ldr	r2, [pc, #76]	; (8003514 <HAL_TIM_Base_Start_IT+0xa0>)
 80034c8:	4293      	cmp	r3, r2
 80034ca:	d111      	bne.n	80034f0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2b06      	cmp	r3, #6
 80034dc:	d010      	beq.n	8003500 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f042 0201 	orr.w	r2, r2, #1
 80034ec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034ee:	e007      	b.n	8003500 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	681a      	ldr	r2, [r3, #0]
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f042 0201 	orr.w	r2, r2, #1
 80034fe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3714      	adds	r7, #20
 8003506:	46bd      	mov	sp, r7
 8003508:	bc80      	pop	{r7}
 800350a:	4770      	bx	lr
 800350c:	40012c00 	.word	0x40012c00
 8003510:	40000400 	.word	0x40000400
 8003514:	40000800 	.word	0x40000800

08003518 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e041      	b.n	80035ae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d106      	bne.n	8003544 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f7fd f810 	bl	8000564 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2202      	movs	r2, #2
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3304      	adds	r3, #4
 8003554:	4619      	mov	r1, r3
 8003556:	4610      	mov	r0, r2
 8003558:	f000 fda4 	bl	80040a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2201      	movs	r2, #1
 8003590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2201      	movs	r2, #1
 8003598:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2201      	movs	r2, #1
 80035a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ac:	2300      	movs	r3, #0
}
 80035ae:	4618      	mov	r0, r3
 80035b0:	3708      	adds	r7, #8
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bd80      	pop	{r7, pc}
	...

080035b8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b084      	sub	sp, #16
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80035c2:	683b      	ldr	r3, [r7, #0]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d109      	bne.n	80035dc <HAL_TIM_PWM_Start+0x24>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	bf14      	ite	ne
 80035d4:	2301      	movne	r3, #1
 80035d6:	2300      	moveq	r3, #0
 80035d8:	b2db      	uxtb	r3, r3
 80035da:	e022      	b.n	8003622 <HAL_TIM_PWM_Start+0x6a>
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d109      	bne.n	80035f6 <HAL_TIM_PWM_Start+0x3e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	bf14      	ite	ne
 80035ee:	2301      	movne	r3, #1
 80035f0:	2300      	moveq	r3, #0
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	e015      	b.n	8003622 <HAL_TIM_PWM_Start+0x6a>
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	d109      	bne.n	8003610 <HAL_TIM_PWM_Start+0x58>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003602:	b2db      	uxtb	r3, r3
 8003604:	2b01      	cmp	r3, #1
 8003606:	bf14      	ite	ne
 8003608:	2301      	movne	r3, #1
 800360a:	2300      	moveq	r3, #0
 800360c:	b2db      	uxtb	r3, r3
 800360e:	e008      	b.n	8003622 <HAL_TIM_PWM_Start+0x6a>
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003616:	b2db      	uxtb	r3, r3
 8003618:	2b01      	cmp	r3, #1
 800361a:	bf14      	ite	ne
 800361c:	2301      	movne	r3, #1
 800361e:	2300      	moveq	r3, #0
 8003620:	b2db      	uxtb	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d001      	beq.n	800362a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	e05e      	b.n	80036e8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d104      	bne.n	800363a <HAL_TIM_PWM_Start+0x82>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2202      	movs	r2, #2
 8003634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003638:	e013      	b.n	8003662 <HAL_TIM_PWM_Start+0xaa>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	2b04      	cmp	r3, #4
 800363e:	d104      	bne.n	800364a <HAL_TIM_PWM_Start+0x92>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2202      	movs	r2, #2
 8003644:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003648:	e00b      	b.n	8003662 <HAL_TIM_PWM_Start+0xaa>
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	2b08      	cmp	r3, #8
 800364e:	d104      	bne.n	800365a <HAL_TIM_PWM_Start+0xa2>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2202      	movs	r2, #2
 8003654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003658:	e003      	b.n	8003662 <HAL_TIM_PWM_Start+0xaa>
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2202      	movs	r2, #2
 800365e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	6839      	ldr	r1, [r7, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f000 ff04 	bl	8004478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a1e      	ldr	r2, [pc, #120]	; (80036f0 <HAL_TIM_PWM_Start+0x138>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d107      	bne.n	800368a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003688:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a18      	ldr	r2, [pc, #96]	; (80036f0 <HAL_TIM_PWM_Start+0x138>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIM_PWM_Start+0xfa>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800369c:	d009      	beq.n	80036b2 <HAL_TIM_PWM_Start+0xfa>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a14      	ldr	r2, [pc, #80]	; (80036f4 <HAL_TIM_PWM_Start+0x13c>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_PWM_Start+0xfa>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a12      	ldr	r2, [pc, #72]	; (80036f8 <HAL_TIM_PWM_Start+0x140>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d111      	bne.n	80036d6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0307 	and.w	r3, r3, #7
 80036bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d010      	beq.n	80036e6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681a      	ldr	r2, [r3, #0]
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f042 0201 	orr.w	r2, r2, #1
 80036d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d4:	e007      	b.n	80036e6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f042 0201 	orr.w	r2, r2, #1
 80036e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80036e6:	2300      	movs	r3, #0
}
 80036e8:	4618      	mov	r0, r3
 80036ea:	3710      	adds	r7, #16
 80036ec:	46bd      	mov	sp, r7
 80036ee:	bd80      	pop	{r7, pc}
 80036f0:	40012c00 	.word	0x40012c00
 80036f4:	40000400 	.word	0x40000400
 80036f8:	40000800 	.word	0x40000800

080036fc <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2200      	movs	r2, #0
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 feb2 	bl	8004478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a29      	ldr	r2, [pc, #164]	; (80037c0 <HAL_TIM_PWM_Stop+0xc4>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d117      	bne.n	800374e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	f241 1311 	movw	r3, #4369	; 0x1111
 8003728:	4013      	ands	r3, r2
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10f      	bne.n	800374e <HAL_TIM_PWM_Stop+0x52>
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	6a1a      	ldr	r2, [r3, #32]
 8003734:	f240 4344 	movw	r3, #1092	; 0x444
 8003738:	4013      	ands	r3, r2
 800373a:	2b00      	cmp	r3, #0
 800373c:	d107      	bne.n	800374e <HAL_TIM_PWM_Stop+0x52>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	6a1a      	ldr	r2, [r3, #32]
 8003754:	f241 1311 	movw	r3, #4369	; 0x1111
 8003758:	4013      	ands	r3, r2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d10f      	bne.n	800377e <HAL_TIM_PWM_Stop+0x82>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	6a1a      	ldr	r2, [r3, #32]
 8003764:	f240 4344 	movw	r3, #1092	; 0x444
 8003768:	4013      	ands	r3, r2
 800376a:	2b00      	cmp	r3, #0
 800376c:	d107      	bne.n	800377e <HAL_TIM_PWM_Stop+0x82>
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	681a      	ldr	r2, [r3, #0]
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	f022 0201 	bic.w	r2, r2, #1
 800377c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d104      	bne.n	800378e <HAL_TIM_PWM_Stop+0x92>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800378c:	e013      	b.n	80037b6 <HAL_TIM_PWM_Stop+0xba>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b04      	cmp	r3, #4
 8003792:	d104      	bne.n	800379e <HAL_TIM_PWM_Stop+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2201      	movs	r2, #1
 8003798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800379c:	e00b      	b.n	80037b6 <HAL_TIM_PWM_Stop+0xba>
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d104      	bne.n	80037ae <HAL_TIM_PWM_Stop+0xb2>
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	2201      	movs	r2, #1
 80037a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037ac:	e003      	b.n	80037b6 <HAL_TIM_PWM_Stop+0xba>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2201      	movs	r2, #1
 80037b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80037b6:	2300      	movs	r3, #0
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3708      	adds	r7, #8
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}
 80037c0:	40012c00 	.word	0x40012c00

080037c4 <HAL_TIM_PWM_Start_DMA>:
  * @param  pData The source Buffer address.
  * @param  Length The length of data to be transferred from memory to TIM peripheral
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b086      	sub	sp, #24
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
 80037d0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Set the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_BUSY)
 80037d2:	68bb      	ldr	r3, [r7, #8]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d109      	bne.n	80037ec <HAL_TIM_PWM_Start_DMA+0x28>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	2b02      	cmp	r3, #2
 80037e2:	bf0c      	ite	eq
 80037e4:	2301      	moveq	r3, #1
 80037e6:	2300      	movne	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	e022      	b.n	8003832 <HAL_TIM_PWM_Start_DMA+0x6e>
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	2b04      	cmp	r3, #4
 80037f0:	d109      	bne.n	8003806 <HAL_TIM_PWM_Start_DMA+0x42>
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	bf0c      	ite	eq
 80037fe:	2301      	moveq	r3, #1
 8003800:	2300      	movne	r3, #0
 8003802:	b2db      	uxtb	r3, r3
 8003804:	e015      	b.n	8003832 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	2b08      	cmp	r3, #8
 800380a:	d109      	bne.n	8003820 <HAL_TIM_PWM_Start_DMA+0x5c>
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b02      	cmp	r3, #2
 8003816:	bf0c      	ite	eq
 8003818:	2301      	moveq	r3, #1
 800381a:	2300      	movne	r3, #0
 800381c:	b2db      	uxtb	r3, r3
 800381e:	e008      	b.n	8003832 <HAL_TIM_PWM_Start_DMA+0x6e>
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003826:	b2db      	uxtb	r3, r3
 8003828:	2b02      	cmp	r3, #2
 800382a:	bf0c      	ite	eq
 800382c:	2301      	moveq	r3, #1
 800382e:	2300      	movne	r3, #0
 8003830:	b2db      	uxtb	r3, r3
 8003832:	2b00      	cmp	r3, #0
 8003834:	d001      	beq.n	800383a <HAL_TIM_PWM_Start_DMA+0x76>
  {
    return HAL_BUSY;
 8003836:	2302      	movs	r3, #2
 8003838:	e14e      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
  }
  else if (TIM_CHANNEL_STATE_GET(htim, Channel) == HAL_TIM_CHANNEL_STATE_READY)
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d109      	bne.n	8003854 <HAL_TIM_PWM_Start_DMA+0x90>
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003846:	b2db      	uxtb	r3, r3
 8003848:	2b01      	cmp	r3, #1
 800384a:	bf0c      	ite	eq
 800384c:	2301      	moveq	r3, #1
 800384e:	2300      	movne	r3, #0
 8003850:	b2db      	uxtb	r3, r3
 8003852:	e022      	b.n	800389a <HAL_TIM_PWM_Start_DMA+0xd6>
 8003854:	68bb      	ldr	r3, [r7, #8]
 8003856:	2b04      	cmp	r3, #4
 8003858:	d109      	bne.n	800386e <HAL_TIM_PWM_Start_DMA+0xaa>
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003860:	b2db      	uxtb	r3, r3
 8003862:	2b01      	cmp	r3, #1
 8003864:	bf0c      	ite	eq
 8003866:	2301      	moveq	r3, #1
 8003868:	2300      	movne	r3, #0
 800386a:	b2db      	uxtb	r3, r3
 800386c:	e015      	b.n	800389a <HAL_TIM_PWM_Start_DMA+0xd6>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b08      	cmp	r3, #8
 8003872:	d109      	bne.n	8003888 <HAL_TIM_PWM_Start_DMA+0xc4>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800387a:	b2db      	uxtb	r3, r3
 800387c:	2b01      	cmp	r3, #1
 800387e:	bf0c      	ite	eq
 8003880:	2301      	moveq	r3, #1
 8003882:	2300      	movne	r3, #0
 8003884:	b2db      	uxtb	r3, r3
 8003886:	e008      	b.n	800389a <HAL_TIM_PWM_Start_DMA+0xd6>
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b01      	cmp	r3, #1
 8003892:	bf0c      	ite	eq
 8003894:	2301      	moveq	r3, #1
 8003896:	2300      	movne	r3, #0
 8003898:	b2db      	uxtb	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d024      	beq.n	80038e8 <HAL_TIM_PWM_Start_DMA+0x124>
  {
    if ((pData == NULL) && (Length > 0U))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d104      	bne.n	80038ae <HAL_TIM_PWM_Start_DMA+0xea>
 80038a4:	887b      	ldrh	r3, [r7, #2]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d001      	beq.n	80038ae <HAL_TIM_PWM_Start_DMA+0xea>
    {
      return HAL_ERROR;
 80038aa:	2301      	movs	r3, #1
 80038ac:	e114      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d104      	bne.n	80038be <HAL_TIM_PWM_Start_DMA+0xfa>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2202      	movs	r2, #2
 80038b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038bc:	e016      	b.n	80038ec <HAL_TIM_PWM_Start_DMA+0x128>
 80038be:	68bb      	ldr	r3, [r7, #8]
 80038c0:	2b04      	cmp	r3, #4
 80038c2:	d104      	bne.n	80038ce <HAL_TIM_PWM_Start_DMA+0x10a>
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2202      	movs	r2, #2
 80038c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038cc:	e00e      	b.n	80038ec <HAL_TIM_PWM_Start_DMA+0x128>
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	2b08      	cmp	r3, #8
 80038d2:	d104      	bne.n	80038de <HAL_TIM_PWM_Start_DMA+0x11a>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2202      	movs	r2, #2
 80038d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038dc:	e006      	b.n	80038ec <HAL_TIM_PWM_Start_DMA+0x128>
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80038e6:	e001      	b.n	80038ec <HAL_TIM_PWM_Start_DMA+0x128>
    }
  }
  else
  {
    return HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	e0f5      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b0c      	cmp	r3, #12
 80038f0:	f200 80ae 	bhi.w	8003a50 <HAL_TIM_PWM_Start_DMA+0x28c>
 80038f4:	a201      	add	r2, pc, #4	; (adr r2, 80038fc <HAL_TIM_PWM_Start_DMA+0x138>)
 80038f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038fa:	bf00      	nop
 80038fc:	08003931 	.word	0x08003931
 8003900:	08003a51 	.word	0x08003a51
 8003904:	08003a51 	.word	0x08003a51
 8003908:	08003a51 	.word	0x08003a51
 800390c:	08003979 	.word	0x08003979
 8003910:	08003a51 	.word	0x08003a51
 8003914:	08003a51 	.word	0x08003a51
 8003918:	08003a51 	.word	0x08003a51
 800391c:	080039c1 	.word	0x080039c1
 8003920:	08003a51 	.word	0x08003a51
 8003924:	08003a51 	.word	0x08003a51
 8003928:	08003a51 	.word	0x08003a51
 800392c:	08003a09 	.word	0x08003a09
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003934:	4a6a      	ldr	r2, [pc, #424]	; (8003ae0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393c:	4a69      	ldr	r2, [pc, #420]	; (8003ae4 <HAL_TIM_PWM_Start_DMA+0x320>)
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003944:	4a68      	ldr	r2, [pc, #416]	; (8003ae8 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003946:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)pData, (uint32_t)&htim->Instance->CCR1,
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	6a58      	ldr	r0, [r3, #36]	; 0x24
 800394c:	6879      	ldr	r1, [r7, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	3334      	adds	r3, #52	; 0x34
 8003954:	461a      	mov	r2, r3
 8003956:	887b      	ldrh	r3, [r7, #2]
 8003958:	f7fd f8f6 	bl	8000b48 <HAL_DMA_Start_IT>
 800395c:	4603      	mov	r3, r0
 800395e:	2b00      	cmp	r3, #0
 8003960:	d001      	beq.n	8003966 <HAL_TIM_PWM_Start_DMA+0x1a2>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	e0b8      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
      }

      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68da      	ldr	r2, [r3, #12]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003974:	60da      	str	r2, [r3, #12]
      break;
 8003976:	e06c      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800397c:	4a58      	ldr	r2, [pc, #352]	; (8003ae0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	4a57      	ldr	r2, [pc, #348]	; (8003ae4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003986:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398c:	4a56      	ldr	r2, [pc, #344]	; (8003ae8 <HAL_TIM_PWM_Start_DMA+0x324>)
 800398e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)pData, (uint32_t)&htim->Instance->CCR2,
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003994:	6879      	ldr	r1, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	3338      	adds	r3, #56	; 0x38
 800399c:	461a      	mov	r2, r3
 800399e:	887b      	ldrh	r3, [r7, #2]
 80039a0:	f7fd f8d2 	bl	8000b48 <HAL_DMA_Start_IT>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_TIM_PWM_Start_DMA+0x1ea>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039aa:	2301      	movs	r3, #1
 80039ac:	e094      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	68da      	ldr	r2, [r3, #12]
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80039bc:	60da      	str	r2, [r3, #12]
      break;
 80039be:	e048      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMADelayPulseCplt;
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c4:	4a46      	ldr	r2, [pc, #280]	; (8003ae0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 80039c6:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4a45      	ldr	r2, [pc, #276]	; (8003ae4 <HAL_TIM_PWM_Start_DMA+0x320>)
 80039ce:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d4:	4a44      	ldr	r2, [pc, #272]	; (8003ae8 <HAL_TIM_PWM_Start_DMA+0x324>)
 80039d6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)pData, (uint32_t)&htim->Instance->CCR3,
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 80039dc:	6879      	ldr	r1, [r7, #4]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	333c      	adds	r3, #60	; 0x3c
 80039e4:	461a      	mov	r2, r3
 80039e6:	887b      	ldrh	r3, [r7, #2]
 80039e8:	f7fd f8ae 	bl	8000b48 <HAL_DMA_Start_IT>
 80039ec:	4603      	mov	r3, r0
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d001      	beq.n	80039f6 <HAL_TIM_PWM_Start_DMA+0x232>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 80039f2:	2301      	movs	r3, #1
 80039f4:	e070      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Output Capture/Compare 3 request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	68da      	ldr	r2, [r3, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a04:	60da      	str	r2, [r3, #12]
      break;
 8003a06:	e024      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA compare callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMADelayPulseCplt;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0c:	4a34      	ldr	r2, [pc, #208]	; (8003ae0 <HAL_TIM_PWM_Start_DMA+0x31c>)
 8003a0e:	629a      	str	r2, [r3, #40]	; 0x28
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMADelayPulseHalfCplt;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a14:	4a33      	ldr	r2, [pc, #204]	; (8003ae4 <HAL_TIM_PWM_Start_DMA+0x320>)
 8003a16:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a1c:	4a32      	ldr	r2, [pc, #200]	; (8003ae8 <HAL_TIM_PWM_Start_DMA+0x324>)
 8003a1e:	631a      	str	r2, [r3, #48]	; 0x30

      /* Enable the DMA channel */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)pData, (uint32_t)&htim->Instance->CCR4,
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003a24:	6879      	ldr	r1, [r7, #4]
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	3340      	adds	r3, #64	; 0x40
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	887b      	ldrh	r3, [r7, #2]
 8003a30:	f7fd f88a 	bl	8000b48 <HAL_DMA_Start_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_TIM_PWM_Start_DMA+0x27a>
                         Length) != HAL_OK)
      {
        /* Return error status */
        return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e04c      	b.n	8003ad8 <HAL_TIM_PWM_Start_DMA+0x314>
      }
      /* Enable the TIM Capture/Compare 4 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68da      	ldr	r2, [r3, #12]
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a4c:	60da      	str	r2, [r3, #12]
      break;
 8003a4e:	e000      	b.n	8003a52 <HAL_TIM_PWM_Start_DMA+0x28e>
    }

    default:
      break;
 8003a50:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	2201      	movs	r2, #1
 8003a58:	68b9      	ldr	r1, [r7, #8]
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	f000 fd0c 	bl	8004478 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	4a21      	ldr	r2, [pc, #132]	; (8003aec <HAL_TIM_PWM_Start_DMA+0x328>)
 8003a66:	4293      	cmp	r3, r2
 8003a68:	d107      	bne.n	8003a7a <HAL_TIM_PWM_Start_DMA+0x2b6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003a78:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a1b      	ldr	r2, [pc, #108]	; (8003aec <HAL_TIM_PWM_Start_DMA+0x328>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d00e      	beq.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a8c:	d009      	beq.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	4a17      	ldr	r2, [pc, #92]	; (8003af0 <HAL_TIM_PWM_Start_DMA+0x32c>)
 8003a94:	4293      	cmp	r3, r2
 8003a96:	d004      	beq.n	8003aa2 <HAL_TIM_PWM_Start_DMA+0x2de>
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a15      	ldr	r2, [pc, #84]	; (8003af4 <HAL_TIM_PWM_Start_DMA+0x330>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d111      	bne.n	8003ac6 <HAL_TIM_PWM_Start_DMA+0x302>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	617b      	str	r3, [r7, #20]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003aae:	697b      	ldr	r3, [r7, #20]
 8003ab0:	2b06      	cmp	r3, #6
 8003ab2:	d010      	beq.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x312>
    {
      __HAL_TIM_ENABLE(htim);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f042 0201 	orr.w	r2, r2, #1
 8003ac2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ac4:	e007      	b.n	8003ad6 <HAL_TIM_PWM_Start_DMA+0x312>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681a      	ldr	r2, [r3, #0]
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f042 0201 	orr.w	r2, r2, #1
 8003ad4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad6:	2300      	movs	r3, #0
}
 8003ad8:	4618      	mov	r0, r3
 8003ada:	3718      	adds	r7, #24
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	08003f95 	.word	0x08003f95
 8003ae4:	0800403d 	.word	0x0800403d
 8003ae8:	08003f03 	.word	0x08003f03
 8003aec:	40012c00 	.word	0x40012c00
 8003af0:	40000400 	.word	0x40000400
 8003af4:	40000800 	.word	0x40000800

08003af8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b082      	sub	sp, #8
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d122      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68db      	ldr	r3, [r3, #12]
 8003b14:	f003 0302 	and.w	r3, r3, #2
 8003b18:	2b02      	cmp	r3, #2
 8003b1a:	d11b      	bne.n	8003b54 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	f06f 0202 	mvn.w	r2, #2
 8003b24:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2201      	movs	r2, #1
 8003b2a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	f003 0303 	and.w	r3, r3, #3
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d003      	beq.n	8003b42 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f9b4 	bl	8003ea8 <HAL_TIM_IC_CaptureCallback>
 8003b40:	e005      	b.n	8003b4e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f000 f9a7 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f9b6 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	691b      	ldr	r3, [r3, #16]
 8003b5a:	f003 0304 	and.w	r3, r3, #4
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d122      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f003 0304 	and.w	r3, r3, #4
 8003b6c:	2b04      	cmp	r3, #4
 8003b6e:	d11b      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f06f 0204 	mvn.w	r2, #4
 8003b78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2202      	movs	r2, #2
 8003b7e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d003      	beq.n	8003b96 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8e:	6878      	ldr	r0, [r7, #4]
 8003b90:	f000 f98a 	bl	8003ea8 <HAL_TIM_IC_CaptureCallback>
 8003b94:	e005      	b.n	8003ba2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f000 f97d 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b9c:	6878      	ldr	r0, [r7, #4]
 8003b9e:	f000 f98c 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	691b      	ldr	r3, [r3, #16]
 8003bae:	f003 0308 	and.w	r3, r3, #8
 8003bb2:	2b08      	cmp	r3, #8
 8003bb4:	d122      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	f003 0308 	and.w	r3, r3, #8
 8003bc0:	2b08      	cmp	r3, #8
 8003bc2:	d11b      	bne.n	8003bfc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f06f 0208 	mvn.w	r2, #8
 8003bcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2204      	movs	r2, #4
 8003bd2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	69db      	ldr	r3, [r3, #28]
 8003bda:	f003 0303 	and.w	r3, r3, #3
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d003      	beq.n	8003bea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003be2:	6878      	ldr	r0, [r7, #4]
 8003be4:	f000 f960 	bl	8003ea8 <HAL_TIM_IC_CaptureCallback>
 8003be8:	e005      	b.n	8003bf6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f953 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 f962 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	691b      	ldr	r3, [r3, #16]
 8003c02:	f003 0310 	and.w	r3, r3, #16
 8003c06:	2b10      	cmp	r3, #16
 8003c08:	d122      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	f003 0310 	and.w	r3, r3, #16
 8003c14:	2b10      	cmp	r3, #16
 8003c16:	d11b      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	f06f 0210 	mvn.w	r2, #16
 8003c20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2208      	movs	r2, #8
 8003c26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	69db      	ldr	r3, [r3, #28]
 8003c2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d003      	beq.n	8003c3e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f000 f936 	bl	8003ea8 <HAL_TIM_IC_CaptureCallback>
 8003c3c:	e005      	b.n	8003c4a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 f929 	bl	8003e96 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f938 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0301 	and.w	r3, r3, #1
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10e      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b01      	cmp	r3, #1
 8003c6a:	d107      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0201 	mvn.w	r2, #1
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f904 	bl	8003e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c86:	2b80      	cmp	r3, #128	; 0x80
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c94:	2b80      	cmp	r3, #128	; 0x80
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fc73 	bl	800458e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cb2:	2b40      	cmp	r3, #64	; 0x40
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b40      	cmp	r3, #64	; 0x40
 8003cc2:	d107      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f905 	bl	8003ede <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0320 	and.w	r3, r3, #32
 8003cde:	2b20      	cmp	r3, #32
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0320 	and.w	r3, r3, #32
 8003cec:	2b20      	cmp	r3, #32
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0220 	mvn.w	r2, #32
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 fc3e 	bl	800457c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d00:	bf00      	nop
 8003d02:	3708      	adds	r7, #8
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b084      	sub	sp, #16
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d101      	bne.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003d1e:	2302      	movs	r3, #2
 8003d20:	e0ac      	b.n	8003e7c <HAL_TIM_PWM_ConfigChannel+0x174>
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2b0c      	cmp	r3, #12
 8003d2e:	f200 809f 	bhi.w	8003e70 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003d32:	a201      	add	r2, pc, #4	; (adr r2, 8003d38 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003d34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d38:	08003d6d 	.word	0x08003d6d
 8003d3c:	08003e71 	.word	0x08003e71
 8003d40:	08003e71 	.word	0x08003e71
 8003d44:	08003e71 	.word	0x08003e71
 8003d48:	08003dad 	.word	0x08003dad
 8003d4c:	08003e71 	.word	0x08003e71
 8003d50:	08003e71 	.word	0x08003e71
 8003d54:	08003e71 	.word	0x08003e71
 8003d58:	08003def 	.word	0x08003def
 8003d5c:	08003e71 	.word	0x08003e71
 8003d60:	08003e71 	.word	0x08003e71
 8003d64:	08003e71 	.word	0x08003e71
 8003d68:	08003e2f 	.word	0x08003e2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	4618      	mov	r0, r3
 8003d74:	f000 f9f8 	bl	8004168 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	699a      	ldr	r2, [r3, #24]
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f042 0208 	orr.w	r2, r2, #8
 8003d86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699a      	ldr	r2, [r3, #24]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f022 0204 	bic.w	r2, r2, #4
 8003d96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	6999      	ldr	r1, [r3, #24]
 8003d9e:	68bb      	ldr	r3, [r7, #8]
 8003da0:	691a      	ldr	r2, [r3, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	619a      	str	r2, [r3, #24]
      break;
 8003daa:	e062      	b.n	8003e72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	68b9      	ldr	r1, [r7, #8]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f000 fa3e 	bl	8004234 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003dc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	699a      	ldr	r2, [r3, #24]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	6999      	ldr	r1, [r3, #24]
 8003dde:	68bb      	ldr	r3, [r7, #8]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	021a      	lsls	r2, r3, #8
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	430a      	orrs	r2, r1
 8003dea:	619a      	str	r2, [r3, #24]
      break;
 8003dec:	e041      	b.n	8003e72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	68b9      	ldr	r1, [r7, #8]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 fa87 	bl	8004308 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	69da      	ldr	r2, [r3, #28]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f042 0208 	orr.w	r2, r2, #8
 8003e08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	69da      	ldr	r2, [r3, #28]
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	f022 0204 	bic.w	r2, r2, #4
 8003e18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69d9      	ldr	r1, [r3, #28]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	430a      	orrs	r2, r1
 8003e2a:	61da      	str	r2, [r3, #28]
      break;
 8003e2c:	e021      	b.n	8003e72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	68b9      	ldr	r1, [r7, #8]
 8003e34:	4618      	mov	r0, r3
 8003e36:	f000 fad1 	bl	80043dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	69da      	ldr	r2, [r3, #28]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003e48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	69da      	ldr	r2, [r3, #28]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003e58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	69d9      	ldr	r1, [r3, #28]
 8003e60:	68bb      	ldr	r3, [r7, #8]
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	021a      	lsls	r2, r3, #8
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	430a      	orrs	r2, r1
 8003e6c:	61da      	str	r2, [r3, #28]
      break;
 8003e6e:	e000      	b.n	8003e72 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003e70:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003e7a:	2300      	movs	r3, #0
}
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	3710      	adds	r7, #16
 8003e80:	46bd      	mov	sp, r7
 8003e82:	bd80      	pop	{r7, pc}

08003e84 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e84:	b480      	push	{r7}
 8003e86:	b083      	sub	sp, #12
 8003e88:	af00      	add	r7, sp, #0
 8003e8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bc80      	pop	{r7}
 8003e94:	4770      	bx	lr

08003e96 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e96:	b480      	push	{r7}
 8003e98:	b083      	sub	sp, #12
 8003e9a:	af00      	add	r7, sp, #0
 8003e9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e9e:	bf00      	nop
 8003ea0:	370c      	adds	r7, #12
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bc80      	pop	{r7}
 8003ea6:	4770      	bx	lr

08003ea8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b083      	sub	sp, #12
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003eb0:	bf00      	nop
 8003eb2:	370c      	adds	r7, #12
 8003eb4:	46bd      	mov	sp, r7
 8003eb6:	bc80      	pop	{r7}
 8003eb8:	4770      	bx	lr

08003eba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eba:	b480      	push	{r7}
 8003ebc:	b083      	sub	sp, #12
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ec2:	bf00      	nop
 8003ec4:	370c      	adds	r7, #12
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bc80      	pop	{r7}
 8003eca:	4770      	bx	lr

08003ecc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>:
  * @brief  PWM Pulse finished half complete callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b083      	sub	sp, #12
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedHalfCpltCallback could be implemented in the user file
   */
}
 8003ed4:	bf00      	nop
 8003ed6:	370c      	adds	r7, #12
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bc80      	pop	{r7}
 8003edc:	4770      	bx	lr

08003ede <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bc80      	pop	{r7}
 8003eee:	4770      	bx	lr

08003ef0 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b083      	sub	sp, #12
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8003ef8:	bf00      	nop
 8003efa:	370c      	adds	r7, #12
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bc80      	pop	{r7}
 8003f00:	4770      	bx	lr

08003f02 <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0e:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f14:	687a      	ldr	r2, [r7, #4]
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d107      	bne.n	8003f2a <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2201      	movs	r2, #1
 8003f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f28:	e02a      	b.n	8003f80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2e:	687a      	ldr	r2, [r7, #4]
 8003f30:	429a      	cmp	r2, r3
 8003f32:	d107      	bne.n	8003f44 <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	2202      	movs	r2, #2
 8003f38:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2201      	movs	r2, #1
 8003f3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f42:	e01d      	b.n	8003f80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d107      	bne.n	8003f5e <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2204      	movs	r2, #4
 8003f52:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f5c:	e010      	b.n	8003f80 <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d107      	bne.n	8003f78 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2208      	movs	r2, #8
 8003f6c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2201      	movs	r2, #1
 8003f72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003f76:	e003      	b.n	8003f80 <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7ff ffb5 	bl	8003ef0 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	771a      	strb	r2, [r3, #28]
}
 8003f8c:	bf00      	nop
 8003f8e:	3710      	adds	r7, #16
 8003f90:	46bd      	mov	sp, r7
 8003f92:	bd80      	pop	{r7, pc}

08003f94 <TIM_DMADelayPulseCplt>:
  * @brief  TIM DMA Delay Pulse complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
static void TIM_DMADelayPulseCplt(DMA_HandleTypeDef *hdma)
{
 8003f94:	b580      	push	{r7, lr}
 8003f96:	b084      	sub	sp, #16
 8003f98:	af00      	add	r7, sp, #0
 8003f9a:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa6:	687a      	ldr	r2, [r7, #4]
 8003fa8:	429a      	cmp	r2, r3
 8003faa:	d10b      	bne.n	8003fc4 <TIM_DMADelayPulseCplt+0x30>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d136      	bne.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fc2:	e031      	b.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fc8:	687a      	ldr	r2, [r7, #4]
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d10b      	bne.n	8003fe6 <TIM_DMADelayPulseCplt+0x52>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2202      	movs	r2, #2
 8003fd2:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d125      	bne.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fe4:	e020      	b.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fea:	687a      	ldr	r2, [r7, #4]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d10b      	bne.n	8004008 <TIM_DMADelayPulseCplt+0x74>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2204      	movs	r2, #4
 8003ff4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	699b      	ldr	r3, [r3, #24]
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d114      	bne.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004006:	e00f      	b.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	429a      	cmp	r2, r3
 8004010:	d10a      	bne.n	8004028 <TIM_DMADelayPulseCplt+0x94>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2208      	movs	r2, #8
 8004016:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	699b      	ldr	r3, [r3, #24]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d103      	bne.n	8004028 <TIM_DMADelayPulseCplt+0x94>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2201      	movs	r2, #1
 8004024:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004028:	68f8      	ldr	r0, [r7, #12]
 800402a:	f7ff ff46 	bl	8003eba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2200      	movs	r2, #0
 8004032:	771a      	strb	r2, [r3, #28]
}
 8004034:	bf00      	nop
 8004036:	3710      	adds	r7, #16
 8004038:	46bd      	mov	sp, r7
 800403a:	bd80      	pop	{r7, pc}

0800403c <TIM_DMADelayPulseHalfCplt>:
  * @brief  TIM DMA Delay Pulse half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMADelayPulseHalfCplt(DMA_HandleTypeDef *hdma)
{
 800403c:	b580      	push	{r7, lr}
 800403e:	b084      	sub	sp, #16
 8004040:	af00      	add	r7, sp, #0
 8004042:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004048:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	429a      	cmp	r2, r3
 8004052:	d103      	bne.n	800405c <TIM_DMADelayPulseHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	2201      	movs	r2, #1
 8004058:	771a      	strb	r2, [r3, #28]
 800405a:	e019      	b.n	8004090 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	429a      	cmp	r2, r3
 8004064:	d103      	bne.n	800406e <TIM_DMADelayPulseHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2202      	movs	r2, #2
 800406a:	771a      	strb	r2, [r3, #28]
 800406c:	e010      	b.n	8004090 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004072:	687a      	ldr	r2, [r7, #4]
 8004074:	429a      	cmp	r2, r3
 8004076:	d103      	bne.n	8004080 <TIM_DMADelayPulseHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2204      	movs	r2, #4
 800407c:	771a      	strb	r2, [r3, #28]
 800407e:	e007      	b.n	8004090 <TIM_DMADelayPulseHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004084:	687a      	ldr	r2, [r7, #4]
 8004086:	429a      	cmp	r2, r3
 8004088:	d102      	bne.n	8004090 <TIM_DMADelayPulseHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2208      	movs	r2, #8
 800408e:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->PWM_PulseFinishedHalfCpltCallback(htim);
#else
  HAL_TIM_PWM_PulseFinishedHalfCpltCallback(htim);
 8004090:	68f8      	ldr	r0, [r7, #12]
 8004092:	f7ff ff1b 	bl	8003ecc <HAL_TIM_PWM_PulseFinishedHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	2200      	movs	r2, #0
 800409a:	771a      	strb	r2, [r3, #28]
}
 800409c:	bf00      	nop
 800409e:	3710      	adds	r7, #16
 80040a0:	46bd      	mov	sp, r7
 80040a2:	bd80      	pop	{r7, pc}

080040a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b085      	sub	sp, #20
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a29      	ldr	r2, [pc, #164]	; (800415c <TIM_Base_SetConfig+0xb8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d00b      	beq.n	80040d4 <TIM_Base_SetConfig+0x30>
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040c2:	d007      	beq.n	80040d4 <TIM_Base_SetConfig+0x30>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	4a26      	ldr	r2, [pc, #152]	; (8004160 <TIM_Base_SetConfig+0xbc>)
 80040c8:	4293      	cmp	r3, r2
 80040ca:	d003      	beq.n	80040d4 <TIM_Base_SetConfig+0x30>
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	4a25      	ldr	r2, [pc, #148]	; (8004164 <TIM_Base_SetConfig+0xc0>)
 80040d0:	4293      	cmp	r3, r2
 80040d2:	d108      	bne.n	80040e6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	68fa      	ldr	r2, [r7, #12]
 80040e2:	4313      	orrs	r3, r2
 80040e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a1c      	ldr	r2, [pc, #112]	; (800415c <TIM_Base_SetConfig+0xb8>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d00b      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040f4:	d007      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a19      	ldr	r2, [pc, #100]	; (8004160 <TIM_Base_SetConfig+0xbc>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d003      	beq.n	8004106 <TIM_Base_SetConfig+0x62>
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	4a18      	ldr	r2, [pc, #96]	; (8004164 <TIM_Base_SetConfig+0xc0>)
 8004102:	4293      	cmp	r3, r2
 8004104:	d108      	bne.n	8004118 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800410c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	68db      	ldr	r3, [r3, #12]
 8004112:	68fa      	ldr	r2, [r7, #12]
 8004114:	4313      	orrs	r3, r2
 8004116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	68fa      	ldr	r2, [r7, #12]
 800412a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689a      	ldr	r2, [r3, #8]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681a      	ldr	r2, [r3, #0]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <TIM_Base_SetConfig+0xb8>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]
}
 8004152:	bf00      	nop
 8004154:	3714      	adds	r7, #20
 8004156:	46bd      	mov	sp, r7
 8004158:	bc80      	pop	{r7}
 800415a:	4770      	bx	lr
 800415c:	40012c00 	.word	0x40012c00
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800

08004168 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004168:	b480      	push	{r7}
 800416a:	b087      	sub	sp, #28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6a1b      	ldr	r3, [r3, #32]
 8004176:	f023 0201 	bic.w	r2, r3, #1
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	699b      	ldr	r3, [r3, #24]
 800418e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004196:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	f023 0303 	bic.w	r3, r3, #3
 800419e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	68fa      	ldr	r2, [r7, #12]
 80041a6:	4313      	orrs	r3, r2
 80041a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f023 0302 	bic.w	r3, r3, #2
 80041b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	689b      	ldr	r3, [r3, #8]
 80041b6:	697a      	ldr	r2, [r7, #20]
 80041b8:	4313      	orrs	r3, r2
 80041ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a1c      	ldr	r2, [pc, #112]	; (8004230 <TIM_OC1_SetConfig+0xc8>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d10c      	bne.n	80041de <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041c4:	697b      	ldr	r3, [r7, #20]
 80041c6:	f023 0308 	bic.w	r3, r3, #8
 80041ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	68db      	ldr	r3, [r3, #12]
 80041d0:	697a      	ldr	r2, [r7, #20]
 80041d2:	4313      	orrs	r3, r2
 80041d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	f023 0304 	bic.w	r3, r3, #4
 80041dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a13      	ldr	r2, [pc, #76]	; (8004230 <TIM_OC1_SetConfig+0xc8>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	bc80      	pop	{r7}
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	40012c00 	.word	0x40012c00

08004234 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004234:	b480      	push	{r7}
 8004236:	b087      	sub	sp, #28
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
 800423c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a1b      	ldr	r3, [r3, #32]
 800424e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	685b      	ldr	r3, [r3, #4]
 8004254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004262:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800426a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	021b      	lsls	r3, r3, #8
 8004272:	68fa      	ldr	r2, [r7, #12]
 8004274:	4313      	orrs	r3, r2
 8004276:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004278:	697b      	ldr	r3, [r7, #20]
 800427a:	f023 0320 	bic.w	r3, r3, #32
 800427e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	011b      	lsls	r3, r3, #4
 8004286:	697a      	ldr	r2, [r7, #20]
 8004288:	4313      	orrs	r3, r2
 800428a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	4a1d      	ldr	r2, [pc, #116]	; (8004304 <TIM_OC2_SetConfig+0xd0>)
 8004290:	4293      	cmp	r3, r2
 8004292:	d10d      	bne.n	80042b0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800429a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	011b      	lsls	r3, r3, #4
 80042a2:	697a      	ldr	r2, [r7, #20]
 80042a4:	4313      	orrs	r3, r2
 80042a6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042a8:	697b      	ldr	r3, [r7, #20]
 80042aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ae:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	4a14      	ldr	r2, [pc, #80]	; (8004304 <TIM_OC2_SetConfig+0xd0>)
 80042b4:	4293      	cmp	r3, r2
 80042b6:	d113      	bne.n	80042e0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042be:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042c8:	683b      	ldr	r3, [r7, #0]
 80042ca:	695b      	ldr	r3, [r3, #20]
 80042cc:	009b      	lsls	r3, r3, #2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	009b      	lsls	r3, r3, #2
 80042da:	693a      	ldr	r2, [r7, #16]
 80042dc:	4313      	orrs	r3, r2
 80042de:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	685a      	ldr	r2, [r3, #4]
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	621a      	str	r2, [r3, #32]
}
 80042fa:	bf00      	nop
 80042fc:	371c      	adds	r7, #28
 80042fe:	46bd      	mov	sp, r7
 8004300:	bc80      	pop	{r7}
 8004302:	4770      	bx	lr
 8004304:	40012c00 	.word	0x40012c00

08004308 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a1b      	ldr	r3, [r3, #32]
 8004322:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	69db      	ldr	r3, [r3, #28]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f023 0303 	bic.w	r3, r3, #3
 800433e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	4313      	orrs	r3, r2
 8004348:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800434a:	697b      	ldr	r3, [r7, #20]
 800434c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004350:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	021b      	lsls	r3, r3, #8
 8004358:	697a      	ldr	r2, [r7, #20]
 800435a:	4313      	orrs	r3, r2
 800435c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	4a1d      	ldr	r2, [pc, #116]	; (80043d8 <TIM_OC3_SetConfig+0xd0>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10d      	bne.n	8004382 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800436c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800437a:	697b      	ldr	r3, [r7, #20]
 800437c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004380:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a14      	ldr	r2, [pc, #80]	; (80043d8 <TIM_OC3_SetConfig+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d113      	bne.n	80043b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800438a:	693b      	ldr	r3, [r7, #16]
 800438c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004390:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004398:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	695b      	ldr	r3, [r3, #20]
 800439e:	011b      	lsls	r3, r3, #4
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	699b      	ldr	r3, [r3, #24]
 80043aa:	011b      	lsls	r3, r3, #4
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	693a      	ldr	r2, [r7, #16]
 80043b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	685a      	ldr	r2, [r3, #4]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	621a      	str	r2, [r3, #32]
}
 80043cc:	bf00      	nop
 80043ce:	371c      	adds	r7, #28
 80043d0:	46bd      	mov	sp, r7
 80043d2:	bc80      	pop	{r7}
 80043d4:	4770      	bx	lr
 80043d6:	bf00      	nop
 80043d8:	40012c00 	.word	0x40012c00

080043dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004412:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	021b      	lsls	r3, r3, #8
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	4313      	orrs	r3, r2
 800441e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004426:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004428:	683b      	ldr	r3, [r7, #0]
 800442a:	689b      	ldr	r3, [r3, #8]
 800442c:	031b      	lsls	r3, r3, #12
 800442e:	693a      	ldr	r2, [r7, #16]
 8004430:	4313      	orrs	r3, r2
 8004432:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a0f      	ldr	r2, [pc, #60]	; (8004474 <TIM_OC4_SetConfig+0x98>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d109      	bne.n	8004450 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004442:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	019b      	lsls	r3, r3, #6
 800444a:	697a      	ldr	r2, [r7, #20]
 800444c:	4313      	orrs	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68fa      	ldr	r2, [r7, #12]
 800445a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	621a      	str	r2, [r3, #32]
}
 800446a:	bf00      	nop
 800446c:	371c      	adds	r7, #28
 800446e:	46bd      	mov	sp, r7
 8004470:	bc80      	pop	{r7}
 8004472:	4770      	bx	lr
 8004474:	40012c00 	.word	0x40012c00

08004478 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004478:	b480      	push	{r7}
 800447a:	b087      	sub	sp, #28
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	f003 031f 	and.w	r3, r3, #31
 800448a:	2201      	movs	r2, #1
 800448c:	fa02 f303 	lsl.w	r3, r2, r3
 8004490:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	6a1a      	ldr	r2, [r3, #32]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	43db      	mvns	r3, r3
 800449a:	401a      	ands	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	6a1a      	ldr	r2, [r3, #32]
 80044a4:	68bb      	ldr	r3, [r7, #8]
 80044a6:	f003 031f 	and.w	r3, r3, #31
 80044aa:	6879      	ldr	r1, [r7, #4]
 80044ac:	fa01 f303 	lsl.w	r3, r1, r3
 80044b0:	431a      	orrs	r2, r3
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	621a      	str	r2, [r3, #32]
}
 80044b6:	bf00      	nop
 80044b8:	371c      	adds	r7, #28
 80044ba:	46bd      	mov	sp, r7
 80044bc:	bc80      	pop	{r7}
 80044be:	4770      	bx	lr

080044c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044c0:	b480      	push	{r7}
 80044c2:	b085      	sub	sp, #20
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	6078      	str	r0, [r7, #4]
 80044c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044d0:	2b01      	cmp	r3, #1
 80044d2:	d101      	bne.n	80044d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044d4:	2302      	movs	r3, #2
 80044d6:	e046      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2201      	movs	r2, #1
 80044dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	4313      	orrs	r3, r2
 8004508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68fa      	ldr	r2, [r7, #12]
 8004510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a16      	ldr	r2, [pc, #88]	; (8004570 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004524:	d009      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a12      	ldr	r2, [pc, #72]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a10      	ldr	r2, [pc, #64]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	bc80      	pop	{r7}
 800456e:	4770      	bx	lr
 8004570:	40012c00 	.word	0x40012c00
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800

0800457c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800457c:	b480      	push	{r7}
 800457e:	b083      	sub	sp, #12
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004584:	bf00      	nop
 8004586:	370c      	adds	r7, #12
 8004588:	46bd      	mov	sp, r7
 800458a:	bc80      	pop	{r7}
 800458c:	4770      	bx	lr

0800458e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004596:	bf00      	nop
 8004598:	370c      	adds	r7, #12
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80045a0:	b084      	sub	sp, #16
 80045a2:	b480      	push	{r7}
 80045a4:	b083      	sub	sp, #12
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	f107 0014 	add.w	r0, r7, #20
 80045ae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bc80      	pop	{r7}
 80045bc:	b004      	add	sp, #16
 80045be:	4770      	bx	lr

080045c0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045d0:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045d4:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	b29a      	uxth	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80045e0:	2300      	movs	r3, #0
}
 80045e2:	4618      	mov	r0, r3
 80045e4:	3714      	adds	r7, #20
 80045e6:	46bd      	mov	sp, r7
 80045e8:	bc80      	pop	{r7}
 80045ea:	4770      	bx	lr

080045ec <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b085      	sub	sp, #20
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80045f4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80045f8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8004600:	b29a      	uxth	r2, r3
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	b29b      	uxth	r3, r3
 8004606:	43db      	mvns	r3, r3
 8004608:	b29b      	uxth	r3, r3
 800460a:	4013      	ands	r3, r2
 800460c:	b29a      	uxth	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8004614:	2300      	movs	r3, #0
}
 8004616:	4618      	mov	r0, r3
 8004618:	3714      	adds	r7, #20
 800461a:	46bd      	mov	sp, r7
 800461c:	bc80      	pop	{r7}
 800461e:	4770      	bx	lr

08004620 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	460b      	mov	r3, r1
 800462a:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 800462c:	2300      	movs	r3, #0
}
 800462e:	4618      	mov	r0, r3
 8004630:	370c      	adds	r7, #12
 8004632:	46bd      	mov	sp, r7
 8004634:	bc80      	pop	{r7}
 8004636:	4770      	bx	lr

08004638 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004638:	b084      	sub	sp, #16
 800463a:	b480      	push	{r7}
 800463c:	b083      	sub	sp, #12
 800463e:	af00      	add	r7, sp, #0
 8004640:	6078      	str	r0, [r7, #4]
 8004642:	f107 0014 	add.w	r0, r7, #20
 8004646:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2200      	movs	r2, #0
 800465e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2200      	movs	r2, #0
 8004666:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 800466a:	2300      	movs	r3, #0
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	b004      	add	sp, #16
 8004676:	4770      	bx	lr

08004678 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004678:	b480      	push	{r7}
 800467a:	b09b      	sub	sp, #108	; 0x6c
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004682:	2300      	movs	r3, #0
 8004684:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004688:	687a      	ldr	r2, [r7, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	781b      	ldrb	r3, [r3, #0]
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	4413      	add	r3, r2
 8004692:	881b      	ldrh	r3, [r3, #0]
 8004694:	b29b      	uxth	r3, r3
 8004696:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 800469a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800469e:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 80046a2:	683b      	ldr	r3, [r7, #0]
 80046a4:	78db      	ldrb	r3, [r3, #3]
 80046a6:	2b03      	cmp	r3, #3
 80046a8:	d81f      	bhi.n	80046ea <USB_ActivateEndpoint+0x72>
 80046aa:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <USB_ActivateEndpoint+0x38>)
 80046ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046dd 	.word	0x080046dd
 80046b8:	080046f3 	.word	0x080046f3
 80046bc:	080046cf 	.word	0x080046cf
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80046c0:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80046c8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046cc:	e012      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80046ce:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046d2:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80046d6:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046da:	e00b      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80046dc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80046e0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80046e4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80046e8:	e004      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80046f0:	e000      	b.n	80046f4 <USB_ActivateEndpoint+0x7c>
      break;
 80046f2:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	441a      	add	r2, r3
 80046fe:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8004702:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004706:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800470a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800470e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004712:	b29b      	uxth	r3, r3
 8004714:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	683b      	ldr	r3, [r7, #0]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	009b      	lsls	r3, r3, #2
 800471e:	4413      	add	r3, r2
 8004720:	881b      	ldrh	r3, [r3, #0]
 8004722:	b29b      	uxth	r3, r3
 8004724:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004728:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800472c:	b29a      	uxth	r2, r3
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b29b      	uxth	r3, r3
 8004734:	4313      	orrs	r3, r2
 8004736:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 800473a:	687a      	ldr	r2, [r7, #4]
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	781b      	ldrb	r3, [r3, #0]
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	441a      	add	r2, r3
 8004744:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004748:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800474c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004750:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004754:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004758:	b29b      	uxth	r3, r3
 800475a:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	7b1b      	ldrb	r3, [r3, #12]
 8004760:	2b00      	cmp	r3, #0
 8004762:	f040 8149 	bne.w	80049f8 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	785b      	ldrb	r3, [r3, #1]
 800476a:	2b00      	cmp	r3, #0
 800476c:	f000 8084 	beq.w	8004878 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	617b      	str	r3, [r7, #20]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	4413      	add	r3, r2
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	011a      	lsls	r2, r3, #4
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	4413      	add	r3, r2
 800478e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004792:	613b      	str	r3, [r7, #16]
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	88db      	ldrh	r3, [r3, #6]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047a4:	687a      	ldr	r2, [r7, #4]
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	781b      	ldrb	r3, [r3, #0]
 80047aa:	009b      	lsls	r3, r3, #2
 80047ac:	4413      	add	r3, r2
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	81fb      	strh	r3, [r7, #14]
 80047b2:	89fb      	ldrh	r3, [r7, #14]
 80047b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d01b      	beq.n	80047f4 <USB_ActivateEndpoint+0x17c>
 80047bc:	687a      	ldr	r2, [r7, #4]
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	781b      	ldrb	r3, [r3, #0]
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	881b      	ldrh	r3, [r3, #0]
 80047c8:	b29b      	uxth	r3, r3
 80047ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047d2:	81bb      	strh	r3, [r7, #12]
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	683b      	ldr	r3, [r7, #0]
 80047d8:	781b      	ldrb	r3, [r3, #0]
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	441a      	add	r2, r3
 80047de:	89bb      	ldrh	r3, [r7, #12]
 80047e0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80047e4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80047e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80047ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	78db      	ldrb	r3, [r3, #3]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d020      	beq.n	800483e <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047fc:	687a      	ldr	r2, [r7, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	4413      	add	r3, r2
 8004806:	881b      	ldrh	r3, [r3, #0]
 8004808:	b29b      	uxth	r3, r3
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800480e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004812:	813b      	strh	r3, [r7, #8]
 8004814:	893b      	ldrh	r3, [r7, #8]
 8004816:	f083 0320 	eor.w	r3, r3, #32
 800481a:	813b      	strh	r3, [r7, #8]
 800481c:	687a      	ldr	r2, [r7, #4]
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	009b      	lsls	r3, r3, #2
 8004824:	441a      	add	r2, r3
 8004826:	893b      	ldrh	r3, [r7, #8]
 8004828:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800482c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004830:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004834:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004838:	b29b      	uxth	r3, r3
 800483a:	8013      	strh	r3, [r2, #0]
 800483c:	e27f      	b.n	8004d3e <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800483e:	687a      	ldr	r2, [r7, #4]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	009b      	lsls	r3, r3, #2
 8004846:	4413      	add	r3, r2
 8004848:	881b      	ldrh	r3, [r3, #0]
 800484a:	b29b      	uxth	r3, r3
 800484c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004850:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004854:	817b      	strh	r3, [r7, #10]
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	441a      	add	r2, r3
 8004860:	897b      	ldrh	r3, [r7, #10]
 8004862:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004866:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800486a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	b29b      	uxth	r3, r3
 8004874:	8013      	strh	r3, [r2, #0]
 8004876:	e262      	b.n	8004d3e <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004882:	b29b      	uxth	r3, r3
 8004884:	461a      	mov	r2, r3
 8004886:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004888:	4413      	add	r3, r2
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	781b      	ldrb	r3, [r3, #0]
 8004890:	011a      	lsls	r2, r3, #4
 8004892:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004894:	4413      	add	r3, r2
 8004896:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 800489a:	62bb      	str	r3, [r7, #40]	; 0x28
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	88db      	ldrh	r3, [r3, #6]
 80048a0:	085b      	lsrs	r3, r3, #1
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	005b      	lsls	r3, r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	627b      	str	r3, [r7, #36]	; 0x24
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80048b6:	b29b      	uxth	r3, r3
 80048b8:	461a      	mov	r2, r3
 80048ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048bc:	4413      	add	r3, r2
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	011a      	lsls	r2, r3, #4
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	4413      	add	r3, r2
 80048ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80048ce:	623b      	str	r3, [r7, #32]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	691b      	ldr	r3, [r3, #16]
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d112      	bne.n	80048fe <USB_ActivateEndpoint+0x286>
 80048d8:	6a3b      	ldr	r3, [r7, #32]
 80048da:	881b      	ldrh	r3, [r3, #0]
 80048dc:	b29b      	uxth	r3, r3
 80048de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80048e2:	b29a      	uxth	r2, r3
 80048e4:	6a3b      	ldr	r3, [r7, #32]
 80048e6:	801a      	strh	r2, [r3, #0]
 80048e8:	6a3b      	ldr	r3, [r7, #32]
 80048ea:	881b      	ldrh	r3, [r3, #0]
 80048ec:	b29b      	uxth	r3, r3
 80048ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80048f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80048f6:	b29a      	uxth	r2, r3
 80048f8:	6a3b      	ldr	r3, [r7, #32]
 80048fa:	801a      	strh	r2, [r3, #0]
 80048fc:	e02f      	b.n	800495e <USB_ActivateEndpoint+0x2e6>
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b3e      	cmp	r3, #62	; 0x3e
 8004904:	d813      	bhi.n	800492e <USB_ActivateEndpoint+0x2b6>
 8004906:	683b      	ldr	r3, [r7, #0]
 8004908:	691b      	ldr	r3, [r3, #16]
 800490a:	085b      	lsrs	r3, r3, #1
 800490c:	663b      	str	r3, [r7, #96]	; 0x60
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <USB_ActivateEndpoint+0x2a8>
 800491a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800491c:	3301      	adds	r3, #1
 800491e:	663b      	str	r3, [r7, #96]	; 0x60
 8004920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004922:	b29b      	uxth	r3, r3
 8004924:	029b      	lsls	r3, r3, #10
 8004926:	b29a      	uxth	r2, r3
 8004928:	6a3b      	ldr	r3, [r7, #32]
 800492a:	801a      	strh	r2, [r3, #0]
 800492c:	e017      	b.n	800495e <USB_ActivateEndpoint+0x2e6>
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	095b      	lsrs	r3, r3, #5
 8004934:	663b      	str	r3, [r7, #96]	; 0x60
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	691b      	ldr	r3, [r3, #16]
 800493a:	f003 031f 	and.w	r3, r3, #31
 800493e:	2b00      	cmp	r3, #0
 8004940:	d102      	bne.n	8004948 <USB_ActivateEndpoint+0x2d0>
 8004942:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004944:	3b01      	subs	r3, #1
 8004946:	663b      	str	r3, [r7, #96]	; 0x60
 8004948:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800494a:	b29b      	uxth	r3, r3
 800494c:	029b      	lsls	r3, r3, #10
 800494e:	b29b      	uxth	r3, r3
 8004950:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8004954:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004958:	b29a      	uxth	r2, r3
 800495a:	6a3b      	ldr	r3, [r7, #32]
 800495c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800495e:	687a      	ldr	r2, [r7, #4]
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4413      	add	r3, r2
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	83fb      	strh	r3, [r7, #30]
 800496c:	8bfb      	ldrh	r3, [r7, #30]
 800496e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01b      	beq.n	80049ae <USB_ActivateEndpoint+0x336>
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	781b      	ldrb	r3, [r3, #0]
 800497c:	009b      	lsls	r3, r3, #2
 800497e:	4413      	add	r3, r2
 8004980:	881b      	ldrh	r3, [r3, #0]
 8004982:	b29b      	uxth	r3, r3
 8004984:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004988:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800498c:	83bb      	strh	r3, [r7, #28]
 800498e:	687a      	ldr	r2, [r7, #4]
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	781b      	ldrb	r3, [r3, #0]
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	441a      	add	r2, r3
 8004998:	8bbb      	ldrh	r3, [r7, #28]
 800499a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800499e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049aa:	b29b      	uxth	r3, r3
 80049ac:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80049ae:	687a      	ldr	r2, [r7, #4]
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	881b      	ldrh	r3, [r3, #0]
 80049ba:	b29b      	uxth	r3, r3
 80049bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80049c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049c4:	837b      	strh	r3, [r7, #26]
 80049c6:	8b7b      	ldrh	r3, [r7, #26]
 80049c8:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80049cc:	837b      	strh	r3, [r7, #26]
 80049ce:	8b7b      	ldrh	r3, [r7, #26]
 80049d0:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80049d4:	837b      	strh	r3, [r7, #26]
 80049d6:	687a      	ldr	r2, [r7, #4]
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	781b      	ldrb	r3, [r3, #0]
 80049dc:	009b      	lsls	r3, r3, #2
 80049de:	441a      	add	r2, r3
 80049e0:	8b7b      	ldrh	r3, [r7, #26]
 80049e2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049e6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	8013      	strh	r3, [r2, #0]
 80049f6:	e1a2      	b.n	8004d3e <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	781b      	ldrb	r3, [r3, #0]
 80049fe:	009b      	lsls	r3, r3, #2
 8004a00:	4413      	add	r3, r2
 8004a02:	881b      	ldrh	r3, [r3, #0]
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a0e:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8004a12:	687a      	ldr	r2, [r7, #4]
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	781b      	ldrb	r3, [r3, #0]
 8004a18:	009b      	lsls	r3, r3, #2
 8004a1a:	441a      	add	r2, r3
 8004a1c:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004a20:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a24:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a28:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a30:	b29b      	uxth	r3, r3
 8004a32:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a3e:	b29b      	uxth	r3, r3
 8004a40:	461a      	mov	r2, r3
 8004a42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a44:	4413      	add	r3, r2
 8004a46:	65bb      	str	r3, [r7, #88]	; 0x58
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	011a      	lsls	r2, r3, #4
 8004a4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a50:	4413      	add	r3, r2
 8004a52:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004a56:	657b      	str	r3, [r7, #84]	; 0x54
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	891b      	ldrh	r3, [r3, #8]
 8004a5c:	085b      	lsrs	r3, r3, #1
 8004a5e:	b29b      	uxth	r3, r3
 8004a60:	005b      	lsls	r3, r3, #1
 8004a62:	b29a      	uxth	r2, r3
 8004a64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a66:	801a      	strh	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	461a      	mov	r2, r3
 8004a76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a78:	4413      	add	r3, r2
 8004a7a:	653b      	str	r3, [r7, #80]	; 0x50
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	011a      	lsls	r2, r3, #4
 8004a82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a84:	4413      	add	r3, r2
 8004a86:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	895b      	ldrh	r3, [r3, #10]
 8004a90:	085b      	lsrs	r3, r3, #1
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	005b      	lsls	r3, r3, #1
 8004a96:	b29a      	uxth	r2, r3
 8004a98:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9a:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	785b      	ldrb	r3, [r3, #1]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f040 8091 	bne.w	8004bc8 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	009b      	lsls	r3, r3, #2
 8004aae:	4413      	add	r3, r2
 8004ab0:	881b      	ldrh	r3, [r3, #0]
 8004ab2:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8004ab4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004ab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d01b      	beq.n	8004af6 <USB_ActivateEndpoint+0x47e>
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	4413      	add	r3, r2
 8004ac8:	881b      	ldrh	r3, [r3, #0]
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ad0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ad4:	877b      	strh	r3, [r7, #58]	; 0x3a
 8004ad6:	687a      	ldr	r2, [r7, #4]
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	781b      	ldrb	r3, [r3, #0]
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	441a      	add	r2, r3
 8004ae0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8004ae2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ae6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004aea:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004af2:	b29b      	uxth	r3, r3
 8004af4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	4413      	add	r3, r2
 8004b00:	881b      	ldrh	r3, [r3, #0]
 8004b02:	873b      	strh	r3, [r7, #56]	; 0x38
 8004b04:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8004b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d01b      	beq.n	8004b46 <USB_ActivateEndpoint+0x4ce>
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	009b      	lsls	r3, r3, #2
 8004b16:	4413      	add	r3, r2
 8004b18:	881b      	ldrh	r3, [r3, #0]
 8004b1a:	b29b      	uxth	r3, r3
 8004b1c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b24:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	683b      	ldr	r3, [r7, #0]
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	441a      	add	r2, r3
 8004b30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004b32:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b36:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b3e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b42:	b29b      	uxth	r3, r3
 8004b44:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b46:	687a      	ldr	r2, [r7, #4]
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	009b      	lsls	r3, r3, #2
 8004b4e:	4413      	add	r3, r2
 8004b50:	881b      	ldrh	r3, [r3, #0]
 8004b52:	b29b      	uxth	r3, r3
 8004b54:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004b58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b60:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004b64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b66:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b68:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004b6c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004b6e:	687a      	ldr	r2, [r7, #4]
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	009b      	lsls	r3, r3, #2
 8004b76:	441a      	add	r2, r3
 8004b78:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004b7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b8e:	687a      	ldr	r2, [r7, #4]
 8004b90:	683b      	ldr	r3, [r7, #0]
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	009b      	lsls	r3, r3, #2
 8004b96:	4413      	add	r3, r2
 8004b98:	881b      	ldrh	r3, [r3, #0]
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba4:	867b      	strh	r3, [r7, #50]	; 0x32
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	781b      	ldrb	r3, [r3, #0]
 8004bac:	009b      	lsls	r3, r3, #2
 8004bae:	441a      	add	r2, r3
 8004bb0:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004bb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bbe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	8013      	strh	r3, [r2, #0]
 8004bc6:	e0ba      	b.n	8004d3e <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004bc8:	687a      	ldr	r2, [r7, #4]
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	009b      	lsls	r3, r3, #2
 8004bd0:	4413      	add	r3, r2
 8004bd2:	881b      	ldrh	r3, [r3, #0]
 8004bd4:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004bd8:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004bdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d01d      	beq.n	8004c20 <USB_ActivateEndpoint+0x5a8>
 8004be4:	687a      	ldr	r2, [r7, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	781b      	ldrb	r3, [r3, #0]
 8004bea:	009b      	lsls	r3, r3, #2
 8004bec:	4413      	add	r3, r2
 8004bee:	881b      	ldrh	r3, [r3, #0]
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bfa:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	441a      	add	r2, r3
 8004c08:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004c0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c14:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004c18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c1c:	b29b      	uxth	r3, r3
 8004c1e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c20:	687a      	ldr	r2, [r7, #4]
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	009b      	lsls	r3, r3, #2
 8004c28:	4413      	add	r3, r2
 8004c2a:	881b      	ldrh	r3, [r3, #0]
 8004c2c:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004c30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004c34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d01d      	beq.n	8004c78 <USB_ActivateEndpoint+0x600>
 8004c3c:	687a      	ldr	r2, [r7, #4]
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	781b      	ldrb	r3, [r3, #0]
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	881b      	ldrh	r3, [r3, #0]
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c52:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004c56:	687a      	ldr	r2, [r7, #4]
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	781b      	ldrb	r3, [r3, #0]
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	441a      	add	r2, r3
 8004c60:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004c64:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c68:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c70:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004c74:	b29b      	uxth	r3, r3
 8004c76:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	78db      	ldrb	r3, [r3, #3]
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d024      	beq.n	8004cca <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	781b      	ldrb	r3, [r3, #0]
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	881b      	ldrh	r3, [r3, #0]
 8004c8c:	b29b      	uxth	r3, r3
 8004c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c96:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004c9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004c9e:	f083 0320 	eor.w	r3, r3, #32
 8004ca2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004ca6:	687a      	ldr	r2, [r7, #4]
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	009b      	lsls	r3, r3, #2
 8004cae:	441a      	add	r2, r3
 8004cb0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004cb4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cb8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cbc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cc4:	b29b      	uxth	r3, r3
 8004cc6:	8013      	strh	r3, [r2, #0]
 8004cc8:	e01d      	b.n	8004d06 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cca:	687a      	ldr	r2, [r7, #4]
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	009b      	lsls	r3, r3, #2
 8004cd2:	4413      	add	r3, r2
 8004cd4:	881b      	ldrh	r3, [r3, #0]
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cdc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ce0:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004ce4:	687a      	ldr	r2, [r7, #4]
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	441a      	add	r2, r3
 8004cee:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004cf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cf6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cfa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d02:	b29b      	uxth	r3, r3
 8004d04:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d06:	687a      	ldr	r2, [r7, #4]
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	781b      	ldrb	r3, [r3, #0]
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	881b      	ldrh	r3, [r3, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d1c:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004d1e:	687a      	ldr	r2, [r7, #4]
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	441a      	add	r2, r3
 8004d28:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004d3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	376c      	adds	r7, #108	; 0x6c
 8004d46:	46bd      	mov	sp, r7
 8004d48:	bc80      	pop	{r7}
 8004d4a:	4770      	bx	lr

08004d4c <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d4c:	b480      	push	{r7}
 8004d4e:	b08d      	sub	sp, #52	; 0x34
 8004d50:	af00      	add	r7, sp, #0
 8004d52:	6078      	str	r0, [r7, #4]
 8004d54:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	7b1b      	ldrb	r3, [r3, #12]
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	f040 808e 	bne.w	8004e7c <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d044      	beq.n	8004df2 <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	781b      	ldrb	r3, [r3, #0]
 8004d6e:	009b      	lsls	r3, r3, #2
 8004d70:	4413      	add	r3, r2
 8004d72:	881b      	ldrh	r3, [r3, #0]
 8004d74:	81bb      	strh	r3, [r7, #12]
 8004d76:	89bb      	ldrh	r3, [r7, #12]
 8004d78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d01b      	beq.n	8004db8 <USB_DeactivateEndpoint+0x6c>
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	781b      	ldrb	r3, [r3, #0]
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	881b      	ldrh	r3, [r3, #0]
 8004d8c:	b29b      	uxth	r3, r3
 8004d8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d96:	817b      	strh	r3, [r7, #10]
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	781b      	ldrb	r3, [r3, #0]
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	441a      	add	r2, r3
 8004da2:	897b      	ldrh	r3, [r7, #10]
 8004da4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004da8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dac:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004db0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004db4:	b29b      	uxth	r3, r3
 8004db6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	683b      	ldr	r3, [r7, #0]
 8004dbc:	781b      	ldrb	r3, [r3, #0]
 8004dbe:	009b      	lsls	r3, r3, #2
 8004dc0:	4413      	add	r3, r2
 8004dc2:	881b      	ldrh	r3, [r3, #0]
 8004dc4:	b29b      	uxth	r3, r3
 8004dc6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004dca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004dce:	813b      	strh	r3, [r7, #8]
 8004dd0:	687a      	ldr	r2, [r7, #4]
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	781b      	ldrb	r3, [r3, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	441a      	add	r2, r3
 8004dda:	893b      	ldrh	r3, [r7, #8]
 8004ddc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004de0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004de4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004de8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dec:	b29b      	uxth	r3, r3
 8004dee:	8013      	strh	r3, [r2, #0]
 8004df0:	e192      	b.n	8005118 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004df2:	687a      	ldr	r2, [r7, #4]
 8004df4:	683b      	ldr	r3, [r7, #0]
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	009b      	lsls	r3, r3, #2
 8004dfa:	4413      	add	r3, r2
 8004dfc:	881b      	ldrh	r3, [r3, #0]
 8004dfe:	827b      	strh	r3, [r7, #18]
 8004e00:	8a7b      	ldrh	r3, [r7, #18]
 8004e02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d01b      	beq.n	8004e42 <USB_DeactivateEndpoint+0xf6>
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	683b      	ldr	r3, [r7, #0]
 8004e0e:	781b      	ldrb	r3, [r3, #0]
 8004e10:	009b      	lsls	r3, r3, #2
 8004e12:	4413      	add	r3, r2
 8004e14:	881b      	ldrh	r3, [r3, #0]
 8004e16:	b29b      	uxth	r3, r3
 8004e18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e20:	823b      	strh	r3, [r7, #16]
 8004e22:	687a      	ldr	r2, [r7, #4]
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	781b      	ldrb	r3, [r3, #0]
 8004e28:	009b      	lsls	r3, r3, #2
 8004e2a:	441a      	add	r2, r3
 8004e2c:	8a3b      	ldrh	r3, [r7, #16]
 8004e2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e36:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004e3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e42:	687a      	ldr	r2, [r7, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	781b      	ldrb	r3, [r3, #0]
 8004e48:	009b      	lsls	r3, r3, #2
 8004e4a:	4413      	add	r3, r2
 8004e4c:	881b      	ldrh	r3, [r3, #0]
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e58:	81fb      	strh	r3, [r7, #14]
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	009b      	lsls	r3, r3, #2
 8004e62:	441a      	add	r2, r3
 8004e64:	89fb      	ldrh	r3, [r7, #14]
 8004e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e76:	b29b      	uxth	r3, r3
 8004e78:	8013      	strh	r3, [r2, #0]
 8004e7a:	e14d      	b.n	8005118 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	785b      	ldrb	r3, [r3, #1]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	f040 80a5 	bne.w	8004fd0 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	009b      	lsls	r3, r3, #2
 8004e8e:	4413      	add	r3, r2
 8004e90:	881b      	ldrh	r3, [r3, #0]
 8004e92:	843b      	strh	r3, [r7, #32]
 8004e94:	8c3b      	ldrh	r3, [r7, #32]
 8004e96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d01b      	beq.n	8004ed6 <USB_DeactivateEndpoint+0x18a>
 8004e9e:	687a      	ldr	r2, [r7, #4]
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	781b      	ldrb	r3, [r3, #0]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	4413      	add	r3, r2
 8004ea8:	881b      	ldrh	r3, [r3, #0]
 8004eaa:	b29b      	uxth	r3, r3
 8004eac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004eb4:	83fb      	strh	r3, [r7, #30]
 8004eb6:	687a      	ldr	r2, [r7, #4]
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	009b      	lsls	r3, r3, #2
 8004ebe:	441a      	add	r2, r3
 8004ec0:	8bfb      	ldrh	r3, [r7, #30]
 8004ec2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ec6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ece:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ed2:	b29b      	uxth	r3, r3
 8004ed4:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ed6:	687a      	ldr	r2, [r7, #4]
 8004ed8:	683b      	ldr	r3, [r7, #0]
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	4413      	add	r3, r2
 8004ee0:	881b      	ldrh	r3, [r3, #0]
 8004ee2:	83bb      	strh	r3, [r7, #28]
 8004ee4:	8bbb      	ldrh	r3, [r7, #28]
 8004ee6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d01b      	beq.n	8004f26 <USB_DeactivateEndpoint+0x1da>
 8004eee:	687a      	ldr	r2, [r7, #4]
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	781b      	ldrb	r3, [r3, #0]
 8004ef4:	009b      	lsls	r3, r3, #2
 8004ef6:	4413      	add	r3, r2
 8004ef8:	881b      	ldrh	r3, [r3, #0]
 8004efa:	b29b      	uxth	r3, r3
 8004efc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f04:	837b      	strh	r3, [r7, #26]
 8004f06:	687a      	ldr	r2, [r7, #4]
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	781b      	ldrb	r3, [r3, #0]
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	441a      	add	r2, r3
 8004f10:	8b7b      	ldrh	r3, [r7, #26]
 8004f12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f22:	b29b      	uxth	r3, r3
 8004f24:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004f26:	687a      	ldr	r2, [r7, #4]
 8004f28:	683b      	ldr	r3, [r7, #0]
 8004f2a:	781b      	ldrb	r3, [r3, #0]
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	4413      	add	r3, r2
 8004f30:	881b      	ldrh	r3, [r3, #0]
 8004f32:	b29b      	uxth	r3, r3
 8004f34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f3c:	833b      	strh	r3, [r7, #24]
 8004f3e:	687a      	ldr	r2, [r7, #4]
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	781b      	ldrb	r3, [r3, #0]
 8004f44:	009b      	lsls	r3, r3, #2
 8004f46:	441a      	add	r2, r3
 8004f48:	8b3b      	ldrh	r3, [r7, #24]
 8004f4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f56:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	881b      	ldrh	r3, [r3, #0]
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004f70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f74:	82fb      	strh	r3, [r7, #22]
 8004f76:	687a      	ldr	r2, [r7, #4]
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	009b      	lsls	r3, r3, #2
 8004f7e:	441a      	add	r2, r3
 8004f80:	8afb      	ldrh	r3, [r7, #22]
 8004f82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f8a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f92:	b29b      	uxth	r3, r3
 8004f94:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	683b      	ldr	r3, [r7, #0]
 8004f9a:	781b      	ldrb	r3, [r3, #0]
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	881b      	ldrh	r3, [r3, #0]
 8004fa2:	b29b      	uxth	r3, r3
 8004fa4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fa8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fac:	82bb      	strh	r3, [r7, #20]
 8004fae:	687a      	ldr	r2, [r7, #4]
 8004fb0:	683b      	ldr	r3, [r7, #0]
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	009b      	lsls	r3, r3, #2
 8004fb6:	441a      	add	r2, r3
 8004fb8:	8abb      	ldrh	r3, [r7, #20]
 8004fba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fca:	b29b      	uxth	r3, r3
 8004fcc:	8013      	strh	r3, [r2, #0]
 8004fce:	e0a3      	b.n	8005118 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004fd0:	687a      	ldr	r2, [r7, #4]
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	781b      	ldrb	r3, [r3, #0]
 8004fd6:	009b      	lsls	r3, r3, #2
 8004fd8:	4413      	add	r3, r2
 8004fda:	881b      	ldrh	r3, [r3, #0]
 8004fdc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004fde:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004fe0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d01b      	beq.n	8005020 <USB_DeactivateEndpoint+0x2d4>
 8004fe8:	687a      	ldr	r2, [r7, #4]
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	881b      	ldrh	r3, [r3, #0]
 8004ff4:	b29b      	uxth	r3, r3
 8004ff6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ffa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffe:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8005000:	687a      	ldr	r2, [r7, #4]
 8005002:	683b      	ldr	r3, [r7, #0]
 8005004:	781b      	ldrb	r3, [r3, #0]
 8005006:	009b      	lsls	r3, r3, #2
 8005008:	441a      	add	r2, r3
 800500a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800500c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005010:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005014:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005018:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800501c:	b29b      	uxth	r3, r3
 800501e:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005020:	687a      	ldr	r2, [r7, #4]
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	781b      	ldrb	r3, [r3, #0]
 8005026:	009b      	lsls	r3, r3, #2
 8005028:	4413      	add	r3, r2
 800502a:	881b      	ldrh	r3, [r3, #0]
 800502c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800502e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8005030:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005034:	2b00      	cmp	r3, #0
 8005036:	d01b      	beq.n	8005070 <USB_DeactivateEndpoint+0x324>
 8005038:	687a      	ldr	r2, [r7, #4]
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	009b      	lsls	r3, r3, #2
 8005040:	4413      	add	r3, r2
 8005042:	881b      	ldrh	r3, [r3, #0]
 8005044:	b29b      	uxth	r3, r3
 8005046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800504a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800504e:	853b      	strh	r3, [r7, #40]	; 0x28
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	781b      	ldrb	r3, [r3, #0]
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	441a      	add	r2, r3
 800505a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800505c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005060:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005064:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005068:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800506c:	b29b      	uxth	r3, r3
 800506e:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8005070:	687a      	ldr	r2, [r7, #4]
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	781b      	ldrb	r3, [r3, #0]
 8005076:	009b      	lsls	r3, r3, #2
 8005078:	4413      	add	r3, r2
 800507a:	881b      	ldrh	r3, [r3, #0]
 800507c:	b29b      	uxth	r3, r3
 800507e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005082:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005086:	84fb      	strh	r3, [r7, #38]	; 0x26
 8005088:	687a      	ldr	r2, [r7, #4]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	441a      	add	r2, r3
 8005092:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005094:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005098:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800509c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80050a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050a4:	b29b      	uxth	r3, r3
 80050a6:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80050a8:	687a      	ldr	r2, [r7, #4]
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	781b      	ldrb	r3, [r3, #0]
 80050ae:	009b      	lsls	r3, r3, #2
 80050b0:	4413      	add	r3, r2
 80050b2:	881b      	ldrh	r3, [r3, #0]
 80050b4:	b29b      	uxth	r3, r3
 80050b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80050ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80050be:	84bb      	strh	r3, [r7, #36]	; 0x24
 80050c0:	687a      	ldr	r2, [r7, #4]
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	009b      	lsls	r3, r3, #2
 80050c8:	441a      	add	r2, r3
 80050ca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80050cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80050d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80050d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80050dc:	b29b      	uxth	r3, r3
 80050de:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	009b      	lsls	r3, r3, #2
 80050e8:	4413      	add	r3, r2
 80050ea:	881b      	ldrh	r3, [r3, #0]
 80050ec:	b29b      	uxth	r3, r3
 80050ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80050f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f6:	847b      	strh	r3, [r7, #34]	; 0x22
 80050f8:	687a      	ldr	r2, [r7, #4]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	009b      	lsls	r3, r3, #2
 8005100:	441a      	add	r2, r3
 8005102:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005104:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005108:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800510c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005110:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005114:	b29b      	uxth	r3, r3
 8005116:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005118:	2300      	movs	r3, #0
}
 800511a:	4618      	mov	r0, r3
 800511c:	3734      	adds	r7, #52	; 0x34
 800511e:	46bd      	mov	sp, r7
 8005120:	bc80      	pop	{r7}
 8005122:	4770      	bx	lr

08005124 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005124:	b580      	push	{r7, lr}
 8005126:	b0cc      	sub	sp, #304	; 0x130
 8005128:	af00      	add	r7, sp, #0
 800512a:	1d3b      	adds	r3, r7, #4
 800512c:	6018      	str	r0, [r3, #0]
 800512e:	463b      	mov	r3, r7
 8005130:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005132:	463b      	mov	r3, r7
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	785b      	ldrb	r3, [r3, #1]
 8005138:	2b01      	cmp	r3, #1
 800513a:	f040 872e 	bne.w	8005f9a <USB_EPStartXfer+0xe76>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800513e:	463b      	mov	r3, r7
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	699a      	ldr	r2, [r3, #24]
 8005144:	463b      	mov	r3, r7
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	691b      	ldr	r3, [r3, #16]
 800514a:	429a      	cmp	r2, r3
 800514c:	d905      	bls.n	800515a <USB_EPStartXfer+0x36>
    {
      len = ep->maxpacket;
 800514e:	463b      	mov	r3, r7
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	691b      	ldr	r3, [r3, #16]
 8005154:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005158:	e004      	b.n	8005164 <USB_EPStartXfer+0x40>
    }
    else
    {
      len = ep->xfer_len;
 800515a:	463b      	mov	r3, r7
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005164:	463b      	mov	r3, r7
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	7b1b      	ldrb	r3, [r3, #12]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d134      	bne.n	80051d8 <USB_EPStartXfer+0xb4>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 800516e:	463b      	mov	r3, r7
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6959      	ldr	r1, [r3, #20]
 8005174:	463b      	mov	r3, r7
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	88da      	ldrh	r2, [r3, #6]
 800517a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800517e:	b29b      	uxth	r3, r3
 8005180:	1d38      	adds	r0, r7, #4
 8005182:	6800      	ldr	r0, [r0, #0]
 8005184:	f001 fc03 	bl	800698e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005188:	f107 0310 	add.w	r3, r7, #16
 800518c:	1d3a      	adds	r2, r7, #4
 800518e:	6812      	ldr	r2, [r2, #0]
 8005190:	601a      	str	r2, [r3, #0]
 8005192:	1d3b      	adds	r3, r7, #4
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800519a:	b29b      	uxth	r3, r3
 800519c:	4619      	mov	r1, r3
 800519e:	f107 0310 	add.w	r3, r7, #16
 80051a2:	f107 0210 	add.w	r2, r7, #16
 80051a6:	6812      	ldr	r2, [r2, #0]
 80051a8:	440a      	add	r2, r1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	463b      	mov	r3, r7
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	781b      	ldrb	r3, [r3, #0]
 80051b2:	011a      	lsls	r2, r3, #4
 80051b4:	f107 0310 	add.w	r3, r7, #16
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4413      	add	r3, r2
 80051bc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80051c0:	f107 030c 	add.w	r3, r7, #12
 80051c4:	601a      	str	r2, [r3, #0]
 80051c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051ca:	b29a      	uxth	r2, r3
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	801a      	strh	r2, [r3, #0]
 80051d4:	f000 beac 	b.w	8005f30 <USB_EPStartXfer+0xe0c>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80051d8:	463b      	mov	r3, r7
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	78db      	ldrb	r3, [r3, #3]
 80051de:	2b02      	cmp	r3, #2
 80051e0:	f040 838c 	bne.w	80058fc <USB_EPStartXfer+0x7d8>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80051e4:	463b      	mov	r3, r7
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	6a1a      	ldr	r2, [r3, #32]
 80051ea:	463b      	mov	r3, r7
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	691b      	ldr	r3, [r3, #16]
 80051f0:	429a      	cmp	r2, r3
 80051f2:	f240 8330 	bls.w	8005856 <USB_EPStartXfer+0x732>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 80051f6:	1d3b      	adds	r3, r7, #4
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	463b      	mov	r3, r7
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800520c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005210:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005214:	1d3b      	adds	r3, r7, #4
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	463b      	mov	r3, r7
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	009b      	lsls	r3, r3, #2
 8005220:	441a      	add	r2, r3
 8005222:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8005226:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800522a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800522e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005232:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005236:	b29b      	uxth	r3, r3
 8005238:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800523a:	463b      	mov	r3, r7
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	6a1a      	ldr	r2, [r3, #32]
 8005240:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005244:	1ad2      	subs	r2, r2, r3
 8005246:	463b      	mov	r3, r7
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800524c:	1d3b      	adds	r3, r7, #4
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	463b      	mov	r3, r7
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	009b      	lsls	r3, r3, #2
 8005258:	4413      	add	r3, r2
 800525a:	881b      	ldrh	r3, [r3, #0]
 800525c:	b29b      	uxth	r3, r3
 800525e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005262:	2b00      	cmp	r3, #0
 8005264:	f000 819e 	beq.w	80055a4 <USB_EPStartXfer+0x480>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005268:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800526c:	1d3a      	adds	r2, r7, #4
 800526e:	6812      	ldr	r2, [r2, #0]
 8005270:	601a      	str	r2, [r3, #0]
 8005272:	463b      	mov	r3, r7
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	785b      	ldrb	r3, [r3, #1]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d17a      	bne.n	8005372 <USB_EPStartXfer+0x24e>
 800527c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005280:	1d3a      	adds	r2, r7, #4
 8005282:	6812      	ldr	r2, [r2, #0]
 8005284:	601a      	str	r2, [r3, #0]
 8005286:	1d3b      	adds	r3, r7, #4
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800528e:	b29b      	uxth	r3, r3
 8005290:	4619      	mov	r1, r3
 8005292:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8005296:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800529a:	6812      	ldr	r2, [r2, #0]
 800529c:	440a      	add	r2, r1
 800529e:	601a      	str	r2, [r3, #0]
 80052a0:	463b      	mov	r3, r7
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	011a      	lsls	r2, r3, #4
 80052a8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4413      	add	r3, r2
 80052b0:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80052b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052b8:	601a      	str	r2, [r3, #0]
 80052ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d11a      	bne.n	80052f8 <USB_EPStartXfer+0x1d4>
 80052c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	881b      	ldrh	r3, [r3, #0]
 80052ca:	b29b      	uxth	r3, r3
 80052cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052d0:	b29a      	uxth	r2, r3
 80052d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	801a      	strh	r2, [r3, #0]
 80052da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052ec:	b29a      	uxth	r2, r3
 80052ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	801a      	strh	r2, [r3, #0]
 80052f6:	e062      	b.n	80053be <USB_EPStartXfer+0x29a>
 80052f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fc:	2b3e      	cmp	r3, #62	; 0x3e
 80052fe:	d819      	bhi.n	8005334 <USB_EPStartXfer+0x210>
 8005300:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005304:	085b      	lsrs	r3, r3, #1
 8005306:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800530a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800530e:	f003 0301 	and.w	r3, r3, #1
 8005312:	2b00      	cmp	r3, #0
 8005314:	d004      	beq.n	8005320 <USB_EPStartXfer+0x1fc>
 8005316:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800531a:	3301      	adds	r3, #1
 800531c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005320:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005324:	b29b      	uxth	r3, r3
 8005326:	029b      	lsls	r3, r3, #10
 8005328:	b29a      	uxth	r2, r3
 800532a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	801a      	strh	r2, [r3, #0]
 8005332:	e044      	b.n	80053be <USB_EPStartXfer+0x29a>
 8005334:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005338:	095b      	lsrs	r3, r3, #5
 800533a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800533e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005342:	f003 031f 	and.w	r3, r3, #31
 8005346:	2b00      	cmp	r3, #0
 8005348:	d104      	bne.n	8005354 <USB_EPStartXfer+0x230>
 800534a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800534e:	3b01      	subs	r3, #1
 8005350:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005354:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005358:	b29b      	uxth	r3, r3
 800535a:	029b      	lsls	r3, r3, #10
 800535c:	b29b      	uxth	r3, r3
 800535e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005362:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005366:	b29a      	uxth	r2, r3
 8005368:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	801a      	strh	r2, [r3, #0]
 8005370:	e025      	b.n	80053be <USB_EPStartXfer+0x29a>
 8005372:	463b      	mov	r3, r7
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	785b      	ldrb	r3, [r3, #1]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d120      	bne.n	80053be <USB_EPStartXfer+0x29a>
 800537c:	1d3b      	adds	r3, r7, #4
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005384:	b29b      	uxth	r3, r3
 8005386:	4619      	mov	r1, r3
 8005388:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800538c:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8005390:	6812      	ldr	r2, [r2, #0]
 8005392:	440a      	add	r2, r1
 8005394:	601a      	str	r2, [r3, #0]
 8005396:	463b      	mov	r3, r7
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	781b      	ldrb	r3, [r3, #0]
 800539c:	011a      	lsls	r2, r3, #4
 800539e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	4413      	add	r3, r2
 80053a6:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80053aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ae:	601a      	str	r2, [r3, #0]
 80053b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053b4:	b29a      	uxth	r2, r3
 80053b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053be:	463b      	mov	r3, r7
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	895b      	ldrh	r3, [r3, #10]
 80053c4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053c8:	463b      	mov	r3, r7
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6959      	ldr	r1, [r3, #20]
 80053ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053d2:	b29b      	uxth	r3, r3
 80053d4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80053d8:	1d38      	adds	r0, r7, #4
 80053da:	6800      	ldr	r0, [r0, #0]
 80053dc:	f001 fad7 	bl	800698e <USB_WritePMA>
            ep->xfer_buff += len;
 80053e0:	463b      	mov	r3, r7
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	695a      	ldr	r2, [r3, #20]
 80053e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053ea:	441a      	add	r2, r3
 80053ec:	463b      	mov	r3, r7
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80053f2:	463b      	mov	r3, r7
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6a1a      	ldr	r2, [r3, #32]
 80053f8:	463b      	mov	r3, r7
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	691b      	ldr	r3, [r3, #16]
 80053fe:	429a      	cmp	r2, r3
 8005400:	d909      	bls.n	8005416 <USB_EPStartXfer+0x2f2>
            {
              ep->xfer_len_db -= len;
 8005402:	463b      	mov	r3, r7
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	6a1a      	ldr	r2, [r3, #32]
 8005408:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800540c:	1ad2      	subs	r2, r2, r3
 800540e:	463b      	mov	r3, r7
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	621a      	str	r2, [r3, #32]
 8005414:	e008      	b.n	8005428 <USB_EPStartXfer+0x304>
            }
            else
            {
              len = ep->xfer_len_db;
 8005416:	463b      	mov	r3, r7
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	6a1b      	ldr	r3, [r3, #32]
 800541c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005420:	463b      	mov	r3, r7
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	2200      	movs	r2, #0
 8005426:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005428:	463b      	mov	r3, r7
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	785b      	ldrb	r3, [r3, #1]
 800542e:	2b00      	cmp	r3, #0
 8005430:	d17a      	bne.n	8005528 <USB_EPStartXfer+0x404>
 8005432:	f107 0318 	add.w	r3, r7, #24
 8005436:	1d3a      	adds	r2, r7, #4
 8005438:	6812      	ldr	r2, [r2, #0]
 800543a:	601a      	str	r2, [r3, #0]
 800543c:	1d3b      	adds	r3, r7, #4
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005444:	b29b      	uxth	r3, r3
 8005446:	4619      	mov	r1, r3
 8005448:	f107 0318 	add.w	r3, r7, #24
 800544c:	f107 0218 	add.w	r2, r7, #24
 8005450:	6812      	ldr	r2, [r2, #0]
 8005452:	440a      	add	r2, r1
 8005454:	601a      	str	r2, [r3, #0]
 8005456:	463b      	mov	r3, r7
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	011a      	lsls	r2, r3, #4
 800545e:	f107 0318 	add.w	r3, r7, #24
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	4413      	add	r3, r2
 8005466:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800546a:	f107 0314 	add.w	r3, r7, #20
 800546e:	601a      	str	r2, [r3, #0]
 8005470:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005474:	2b00      	cmp	r3, #0
 8005476:	d11a      	bne.n	80054ae <USB_EPStartXfer+0x38a>
 8005478:	f107 0314 	add.w	r3, r7, #20
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	881b      	ldrh	r3, [r3, #0]
 8005480:	b29b      	uxth	r3, r3
 8005482:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005486:	b29a      	uxth	r2, r3
 8005488:	f107 0314 	add.w	r3, r7, #20
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	801a      	strh	r2, [r3, #0]
 8005490:	f107 0314 	add.w	r3, r7, #20
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	881b      	ldrh	r3, [r3, #0]
 8005498:	b29b      	uxth	r3, r3
 800549a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800549e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80054a2:	b29a      	uxth	r2, r3
 80054a4:	f107 0314 	add.w	r3, r7, #20
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	801a      	strh	r2, [r3, #0]
 80054ac:	e067      	b.n	800557e <USB_EPStartXfer+0x45a>
 80054ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054b2:	2b3e      	cmp	r3, #62	; 0x3e
 80054b4:	d819      	bhi.n	80054ea <USB_EPStartXfer+0x3c6>
 80054b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ba:	085b      	lsrs	r3, r3, #1
 80054bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054c4:	f003 0301 	and.w	r3, r3, #1
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d004      	beq.n	80054d6 <USB_EPStartXfer+0x3b2>
 80054cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054d0:	3301      	adds	r3, #1
 80054d2:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054d6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80054da:	b29b      	uxth	r3, r3
 80054dc:	029b      	lsls	r3, r3, #10
 80054de:	b29a      	uxth	r2, r3
 80054e0:	f107 0314 	add.w	r3, r7, #20
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	801a      	strh	r2, [r3, #0]
 80054e8:	e049      	b.n	800557e <USB_EPStartXfer+0x45a>
 80054ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80054f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80054f8:	f003 031f 	and.w	r3, r3, #31
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d104      	bne.n	800550a <USB_EPStartXfer+0x3e6>
 8005500:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005504:	3b01      	subs	r3, #1
 8005506:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800550a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800550e:	b29b      	uxth	r3, r3
 8005510:	029b      	lsls	r3, r3, #10
 8005512:	b29b      	uxth	r3, r3
 8005514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800551c:	b29a      	uxth	r2, r3
 800551e:	f107 0314 	add.w	r3, r7, #20
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	801a      	strh	r2, [r3, #0]
 8005526:	e02a      	b.n	800557e <USB_EPStartXfer+0x45a>
 8005528:	463b      	mov	r3, r7
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	785b      	ldrb	r3, [r3, #1]
 800552e:	2b01      	cmp	r3, #1
 8005530:	d125      	bne.n	800557e <USB_EPStartXfer+0x45a>
 8005532:	f107 0320 	add.w	r3, r7, #32
 8005536:	1d3a      	adds	r2, r7, #4
 8005538:	6812      	ldr	r2, [r2, #0]
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	1d3b      	adds	r3, r7, #4
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005544:	b29b      	uxth	r3, r3
 8005546:	4619      	mov	r1, r3
 8005548:	f107 0320 	add.w	r3, r7, #32
 800554c:	f107 0220 	add.w	r2, r7, #32
 8005550:	6812      	ldr	r2, [r2, #0]
 8005552:	440a      	add	r2, r1
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	463b      	mov	r3, r7
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	781b      	ldrb	r3, [r3, #0]
 800555c:	011a      	lsls	r2, r3, #4
 800555e:	f107 0320 	add.w	r3, r7, #32
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	4413      	add	r3, r2
 8005566:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800556a:	f107 031c 	add.w	r3, r7, #28
 800556e:	601a      	str	r2, [r3, #0]
 8005570:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005574:	b29a      	uxth	r2, r3
 8005576:	f107 031c 	add.w	r3, r7, #28
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800557e:	463b      	mov	r3, r7
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	891b      	ldrh	r3, [r3, #8]
 8005584:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005588:	463b      	mov	r3, r7
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	6959      	ldr	r1, [r3, #20]
 800558e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005592:	b29b      	uxth	r3, r3
 8005594:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005598:	1d38      	adds	r0, r7, #4
 800559a:	6800      	ldr	r0, [r0, #0]
 800559c:	f001 f9f7 	bl	800698e <USB_WritePMA>
 80055a0:	f000 bcc6 	b.w	8005f30 <USB_EPStartXfer+0xe0c>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80055a4:	463b      	mov	r3, r7
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	785b      	ldrb	r3, [r3, #1]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d164      	bne.n	8005678 <USB_EPStartXfer+0x554>
 80055ae:	1d3b      	adds	r3, r7, #4
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80055b4:	1d3b      	adds	r3, r7, #4
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055bc:	b29b      	uxth	r3, r3
 80055be:	461a      	mov	r2, r3
 80055c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055c2:	4413      	add	r3, r2
 80055c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80055c6:	463b      	mov	r3, r7
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	781b      	ldrb	r3, [r3, #0]
 80055cc:	011a      	lsls	r2, r3, #4
 80055ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80055d0:	4413      	add	r3, r2
 80055d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80055d6:	647b      	str	r3, [r7, #68]	; 0x44
 80055d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d112      	bne.n	8005606 <USB_EPStartXfer+0x4e2>
 80055e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055e2:	881b      	ldrh	r3, [r3, #0]
 80055e4:	b29b      	uxth	r3, r3
 80055e6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055ee:	801a      	strh	r2, [r3, #0]
 80055f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80055f2:	881b      	ldrh	r3, [r3, #0]
 80055f4:	b29b      	uxth	r3, r3
 80055f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055fe:	b29a      	uxth	r2, r3
 8005600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005602:	801a      	strh	r2, [r3, #0]
 8005604:	e057      	b.n	80056b6 <USB_EPStartXfer+0x592>
 8005606:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560a:	2b3e      	cmp	r3, #62	; 0x3e
 800560c:	d817      	bhi.n	800563e <USB_EPStartXfer+0x51a>
 800560e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005612:	085b      	lsrs	r3, r3, #1
 8005614:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005618:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561c:	f003 0301 	and.w	r3, r3, #1
 8005620:	2b00      	cmp	r3, #0
 8005622:	d004      	beq.n	800562e <USB_EPStartXfer+0x50a>
 8005624:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005628:	3301      	adds	r3, #1
 800562a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800562e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005632:	b29b      	uxth	r3, r3
 8005634:	029b      	lsls	r3, r3, #10
 8005636:	b29a      	uxth	r2, r3
 8005638:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800563a:	801a      	strh	r2, [r3, #0]
 800563c:	e03b      	b.n	80056b6 <USB_EPStartXfer+0x592>
 800563e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005648:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800564c:	f003 031f 	and.w	r3, r3, #31
 8005650:	2b00      	cmp	r3, #0
 8005652:	d104      	bne.n	800565e <USB_EPStartXfer+0x53a>
 8005654:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005658:	3b01      	subs	r3, #1
 800565a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800565e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005662:	b29b      	uxth	r3, r3
 8005664:	029b      	lsls	r3, r3, #10
 8005666:	b29b      	uxth	r3, r3
 8005668:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800566c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005670:	b29a      	uxth	r2, r3
 8005672:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005674:	801a      	strh	r2, [r3, #0]
 8005676:	e01e      	b.n	80056b6 <USB_EPStartXfer+0x592>
 8005678:	463b      	mov	r3, r7
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	785b      	ldrb	r3, [r3, #1]
 800567e:	2b01      	cmp	r3, #1
 8005680:	d119      	bne.n	80056b6 <USB_EPStartXfer+0x592>
 8005682:	1d3b      	adds	r3, r7, #4
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	653b      	str	r3, [r7, #80]	; 0x50
 8005688:	1d3b      	adds	r3, r7, #4
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005690:	b29b      	uxth	r3, r3
 8005692:	461a      	mov	r2, r3
 8005694:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005696:	4413      	add	r3, r2
 8005698:	653b      	str	r3, [r7, #80]	; 0x50
 800569a:	463b      	mov	r3, r7
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	781b      	ldrb	r3, [r3, #0]
 80056a0:	011a      	lsls	r2, r3, #4
 80056a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a4:	4413      	add	r3, r2
 80056a6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80056ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056b0:	b29a      	uxth	r2, r3
 80056b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80056b4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80056b6:	463b      	mov	r3, r7
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	891b      	ldrh	r3, [r3, #8]
 80056bc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80056c0:	463b      	mov	r3, r7
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	6959      	ldr	r1, [r3, #20]
 80056c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80056d0:	1d38      	adds	r0, r7, #4
 80056d2:	6800      	ldr	r0, [r0, #0]
 80056d4:	f001 f95b 	bl	800698e <USB_WritePMA>
            ep->xfer_buff += len;
 80056d8:	463b      	mov	r3, r7
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695a      	ldr	r2, [r3, #20]
 80056de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e2:	441a      	add	r2, r3
 80056e4:	463b      	mov	r3, r7
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80056ea:	463b      	mov	r3, r7
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	6a1a      	ldr	r2, [r3, #32]
 80056f0:	463b      	mov	r3, r7
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d909      	bls.n	800570e <USB_EPStartXfer+0x5ea>
            {
              ep->xfer_len_db -= len;
 80056fa:	463b      	mov	r3, r7
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	6a1a      	ldr	r2, [r3, #32]
 8005700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005704:	1ad2      	subs	r2, r2, r3
 8005706:	463b      	mov	r3, r7
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	621a      	str	r2, [r3, #32]
 800570c:	e008      	b.n	8005720 <USB_EPStartXfer+0x5fc>
            }
            else
            {
              len = ep->xfer_len_db;
 800570e:	463b      	mov	r3, r7
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	6a1b      	ldr	r3, [r3, #32]
 8005714:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005718:	463b      	mov	r3, r7
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	2200      	movs	r2, #0
 800571e:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005720:	1d3b      	adds	r3, r7, #4
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	643b      	str	r3, [r7, #64]	; 0x40
 8005726:	463b      	mov	r3, r7
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	785b      	ldrb	r3, [r3, #1]
 800572c:	2b00      	cmp	r3, #0
 800572e:	d164      	bne.n	80057fa <USB_EPStartXfer+0x6d6>
 8005730:	1d3b      	adds	r3, r7, #4
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	63bb      	str	r3, [r7, #56]	; 0x38
 8005736:	1d3b      	adds	r3, r7, #4
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800573e:	b29b      	uxth	r3, r3
 8005740:	461a      	mov	r2, r3
 8005742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005744:	4413      	add	r3, r2
 8005746:	63bb      	str	r3, [r7, #56]	; 0x38
 8005748:	463b      	mov	r3, r7
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	011a      	lsls	r2, r3, #4
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	4413      	add	r3, r2
 8005754:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005758:	637b      	str	r3, [r7, #52]	; 0x34
 800575a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800575e:	2b00      	cmp	r3, #0
 8005760:	d112      	bne.n	8005788 <USB_EPStartXfer+0x664>
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	881b      	ldrh	r3, [r3, #0]
 8005766:	b29b      	uxth	r3, r3
 8005768:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800576c:	b29a      	uxth	r2, r3
 800576e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005770:	801a      	strh	r2, [r3, #0]
 8005772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005774:	881b      	ldrh	r3, [r3, #0]
 8005776:	b29b      	uxth	r3, r3
 8005778:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800577c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005780:	b29a      	uxth	r2, r3
 8005782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005784:	801a      	strh	r2, [r3, #0]
 8005786:	e054      	b.n	8005832 <USB_EPStartXfer+0x70e>
 8005788:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800578c:	2b3e      	cmp	r3, #62	; 0x3e
 800578e:	d817      	bhi.n	80057c0 <USB_EPStartXfer+0x69c>
 8005790:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005794:	085b      	lsrs	r3, r3, #1
 8005796:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800579a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d004      	beq.n	80057b0 <USB_EPStartXfer+0x68c>
 80057a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057aa:	3301      	adds	r3, #1
 80057ac:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057b4:	b29b      	uxth	r3, r3
 80057b6:	029b      	lsls	r3, r3, #10
 80057b8:	b29a      	uxth	r2, r3
 80057ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057bc:	801a      	strh	r2, [r3, #0]
 80057be:	e038      	b.n	8005832 <USB_EPStartXfer+0x70e>
 80057c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ce:	f003 031f 	and.w	r3, r3, #31
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d104      	bne.n	80057e0 <USB_EPStartXfer+0x6bc>
 80057d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057da:	3b01      	subs	r3, #1
 80057dc:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80057e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	029b      	lsls	r3, r3, #10
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80057ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057f6:	801a      	strh	r2, [r3, #0]
 80057f8:	e01b      	b.n	8005832 <USB_EPStartXfer+0x70e>
 80057fa:	463b      	mov	r3, r7
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	785b      	ldrb	r3, [r3, #1]
 8005800:	2b01      	cmp	r3, #1
 8005802:	d116      	bne.n	8005832 <USB_EPStartXfer+0x70e>
 8005804:	1d3b      	adds	r3, r7, #4
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800580c:	b29b      	uxth	r3, r3
 800580e:	461a      	mov	r2, r3
 8005810:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005812:	4413      	add	r3, r2
 8005814:	643b      	str	r3, [r7, #64]	; 0x40
 8005816:	463b      	mov	r3, r7
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	781b      	ldrb	r3, [r3, #0]
 800581c:	011a      	lsls	r2, r3, #4
 800581e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005820:	4413      	add	r3, r2
 8005822:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005826:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005828:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800582c:	b29a      	uxth	r2, r3
 800582e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005830:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005832:	463b      	mov	r3, r7
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	895b      	ldrh	r3, [r3, #10]
 8005838:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800583c:	463b      	mov	r3, r7
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	6959      	ldr	r1, [r3, #20]
 8005842:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005846:	b29b      	uxth	r3, r3
 8005848:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800584c:	1d38      	adds	r0, r7, #4
 800584e:	6800      	ldr	r0, [r0, #0]
 8005850:	f001 f89d 	bl	800698e <USB_WritePMA>
 8005854:	e36c      	b.n	8005f30 <USB_EPStartXfer+0xe0c>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8005856:	463b      	mov	r3, r7
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6a1b      	ldr	r3, [r3, #32]
 800585c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	681a      	ldr	r2, [r3, #0]
 8005864:	463b      	mov	r3, r7
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	781b      	ldrb	r3, [r3, #0]
 800586a:	009b      	lsls	r3, r3, #2
 800586c:	4413      	add	r3, r2
 800586e:	881b      	ldrh	r3, [r3, #0]
 8005870:	b29b      	uxth	r3, r3
 8005872:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005876:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800587a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	681a      	ldr	r2, [r3, #0]
 8005882:	463b      	mov	r3, r7
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	781b      	ldrb	r3, [r3, #0]
 8005888:	009b      	lsls	r3, r3, #2
 800588a:	441a      	add	r2, r3
 800588c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005890:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005894:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800589c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80058a0:	b29b      	uxth	r3, r3
 80058a2:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80058a4:	1d3b      	adds	r3, r7, #4
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058aa:	1d3b      	adds	r3, r7, #4
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058b2:	b29b      	uxth	r3, r3
 80058b4:	461a      	mov	r2, r3
 80058b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058b8:	4413      	add	r3, r2
 80058ba:	65fb      	str	r3, [r7, #92]	; 0x5c
 80058bc:	463b      	mov	r3, r7
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	011a      	lsls	r2, r3, #4
 80058c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80058c6:	4413      	add	r3, r2
 80058c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80058cc:	65bb      	str	r3, [r7, #88]	; 0x58
 80058ce:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d2:	b29a      	uxth	r2, r3
 80058d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058d6:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80058d8:	463b      	mov	r3, r7
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	891b      	ldrh	r3, [r3, #8]
 80058de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80058e2:	463b      	mov	r3, r7
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	6959      	ldr	r1, [r3, #20]
 80058e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80058f2:	1d38      	adds	r0, r7, #4
 80058f4:	6800      	ldr	r0, [r0, #0]
 80058f6:	f001 f84a 	bl	800698e <USB_WritePMA>
 80058fa:	e319      	b.n	8005f30 <USB_EPStartXfer+0xe0c>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 80058fc:	1d3b      	adds	r3, r7, #4
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	463b      	mov	r3, r7
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4413      	add	r3, r2
 800590a:	881b      	ldrh	r3, [r3, #0]
 800590c:	b29b      	uxth	r3, r3
 800590e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005912:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005916:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800591a:	1d3b      	adds	r3, r7, #4
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	463b      	mov	r3, r7
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	781b      	ldrb	r3, [r3, #0]
 8005924:	009b      	lsls	r3, r3, #2
 8005926:	441a      	add	r2, r3
 8005928:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800592c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005930:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005934:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800593c:	b29b      	uxth	r3, r3
 800593e:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005940:	463b      	mov	r3, r7
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	6a1a      	ldr	r2, [r3, #32]
 8005946:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800594a:	1ad2      	subs	r2, r2, r3
 800594c:	463b      	mov	r3, r7
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005952:	1d3b      	adds	r3, r7, #4
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	463b      	mov	r3, r7
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	009b      	lsls	r3, r3, #2
 800595e:	4413      	add	r3, r2
 8005960:	881b      	ldrh	r3, [r3, #0]
 8005962:	b29b      	uxth	r3, r3
 8005964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005968:	2b00      	cmp	r3, #0
 800596a:	f000 8162 	beq.w	8005c32 <USB_EPStartXfer+0xb0e>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800596e:	1d3b      	adds	r3, r7, #4
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005976:	463b      	mov	r3, r7
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b00      	cmp	r3, #0
 800597e:	d164      	bne.n	8005a4a <USB_EPStartXfer+0x926>
 8005980:	1d3b      	adds	r3, r7, #4
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	67bb      	str	r3, [r7, #120]	; 0x78
 8005986:	1d3b      	adds	r3, r7, #4
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005994:	4413      	add	r3, r2
 8005996:	67bb      	str	r3, [r7, #120]	; 0x78
 8005998:	463b      	mov	r3, r7
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	781b      	ldrb	r3, [r3, #0]
 800599e:	011a      	lsls	r2, r3, #4
 80059a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059a2:	4413      	add	r3, r2
 80059a4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059a8:	677b      	str	r3, [r7, #116]	; 0x74
 80059aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d112      	bne.n	80059d8 <USB_EPStartXfer+0x8b4>
 80059b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059b4:	881b      	ldrh	r3, [r3, #0]
 80059b6:	b29b      	uxth	r3, r3
 80059b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80059bc:	b29a      	uxth	r2, r3
 80059be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c0:	801a      	strh	r2, [r3, #0]
 80059c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059c4:	881b      	ldrh	r3, [r3, #0]
 80059c6:	b29b      	uxth	r3, r3
 80059c8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80059cc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80059d0:	b29a      	uxth	r2, r3
 80059d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059d4:	801a      	strh	r2, [r3, #0]
 80059d6:	e057      	b.n	8005a88 <USB_EPStartXfer+0x964>
 80059d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059dc:	2b3e      	cmp	r3, #62	; 0x3e
 80059de:	d817      	bhi.n	8005a10 <USB_EPStartXfer+0x8ec>
 80059e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059e4:	085b      	lsrs	r3, r3, #1
 80059e6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 80059ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059ee:	f003 0301 	and.w	r3, r3, #1
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d004      	beq.n	8005a00 <USB_EPStartXfer+0x8dc>
 80059f6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80059fa:	3301      	adds	r3, #1
 80059fc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a04:	b29b      	uxth	r3, r3
 8005a06:	029b      	lsls	r3, r3, #10
 8005a08:	b29a      	uxth	r2, r3
 8005a0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a0c:	801a      	strh	r2, [r3, #0]
 8005a0e:	e03b      	b.n	8005a88 <USB_EPStartXfer+0x964>
 8005a10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a14:	095b      	lsrs	r3, r3, #5
 8005a16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a1e:	f003 031f 	and.w	r3, r3, #31
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d104      	bne.n	8005a30 <USB_EPStartXfer+0x90c>
 8005a26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a2a:	3b01      	subs	r3, #1
 8005a2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005a30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005a34:	b29b      	uxth	r3, r3
 8005a36:	029b      	lsls	r3, r3, #10
 8005a38:	b29b      	uxth	r3, r3
 8005a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005a42:	b29a      	uxth	r2, r3
 8005a44:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005a46:	801a      	strh	r2, [r3, #0]
 8005a48:	e01e      	b.n	8005a88 <USB_EPStartXfer+0x964>
 8005a4a:	463b      	mov	r3, r7
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	785b      	ldrb	r3, [r3, #1]
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d119      	bne.n	8005a88 <USB_EPStartXfer+0x964>
 8005a54:	1d3b      	adds	r3, r7, #4
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	461a      	mov	r2, r3
 8005a60:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a64:	4413      	add	r3, r2
 8005a66:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005a6a:	463b      	mov	r3, r7
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	781b      	ldrb	r3, [r3, #0]
 8005a70:	011a      	lsls	r2, r3, #4
 8005a72:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005a76:	4413      	add	r3, r2
 8005a78:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005a7c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005a7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a82:	b29a      	uxth	r2, r3
 8005a84:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005a86:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005a88:	463b      	mov	r3, r7
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	895b      	ldrh	r3, [r3, #10]
 8005a8e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005a92:	463b      	mov	r3, r7
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	6959      	ldr	r1, [r3, #20]
 8005a98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9c:	b29b      	uxth	r3, r3
 8005a9e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005aa2:	1d38      	adds	r0, r7, #4
 8005aa4:	6800      	ldr	r0, [r0, #0]
 8005aa6:	f000 ff72 	bl	800698e <USB_WritePMA>
          ep->xfer_buff += len;
 8005aaa:	463b      	mov	r3, r7
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695a      	ldr	r2, [r3, #20]
 8005ab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ab4:	441a      	add	r2, r3
 8005ab6:	463b      	mov	r3, r7
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005abc:	463b      	mov	r3, r7
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	6a1a      	ldr	r2, [r3, #32]
 8005ac2:	463b      	mov	r3, r7
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	691b      	ldr	r3, [r3, #16]
 8005ac8:	429a      	cmp	r2, r3
 8005aca:	d909      	bls.n	8005ae0 <USB_EPStartXfer+0x9bc>
          {
            ep->xfer_len_db -= len;
 8005acc:	463b      	mov	r3, r7
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	6a1a      	ldr	r2, [r3, #32]
 8005ad2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ad6:	1ad2      	subs	r2, r2, r3
 8005ad8:	463b      	mov	r3, r7
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	621a      	str	r2, [r3, #32]
 8005ade:	e008      	b.n	8005af2 <USB_EPStartXfer+0x9ce>
          }
          else
          {
            len = ep->xfer_len_db;
 8005ae0:	463b      	mov	r3, r7
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	6a1b      	ldr	r3, [r3, #32]
 8005ae6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005aea:	463b      	mov	r3, r7
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	2200      	movs	r2, #0
 8005af0:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005af2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	f000 821a 	beq.w	8005f30 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005afc:	463b      	mov	r3, r7
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	785b      	ldrb	r3, [r3, #1]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d164      	bne.n	8005bd0 <USB_EPStartXfer+0xaac>
 8005b06:	1d3b      	adds	r3, r7, #4
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b0c:	1d3b      	adds	r3, r7, #4
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	461a      	mov	r2, r3
 8005b18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b1a:	4413      	add	r3, r2
 8005b1c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005b1e:	463b      	mov	r3, r7
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	011a      	lsls	r2, r3, #4
 8005b26:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b28:	4413      	add	r3, r2
 8005b2a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005b2e:	667b      	str	r3, [r7, #100]	; 0x64
 8005b30:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d112      	bne.n	8005b5e <USB_EPStartXfer+0xa3a>
 8005b38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b3a:	881b      	ldrh	r3, [r3, #0]
 8005b3c:	b29b      	uxth	r3, r3
 8005b3e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b46:	801a      	strh	r2, [r3, #0]
 8005b48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b4a:	881b      	ldrh	r3, [r3, #0]
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005b52:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005b56:	b29a      	uxth	r2, r3
 8005b58:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b5a:	801a      	strh	r2, [r3, #0]
 8005b5c:	e057      	b.n	8005c0e <USB_EPStartXfer+0xaea>
 8005b5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b62:	2b3e      	cmp	r3, #62	; 0x3e
 8005b64:	d817      	bhi.n	8005b96 <USB_EPStartXfer+0xa72>
 8005b66:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b6a:	085b      	lsrs	r3, r3, #1
 8005b6c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b74:	f003 0301 	and.w	r3, r3, #1
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d004      	beq.n	8005b86 <USB_EPStartXfer+0xa62>
 8005b7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b80:	3301      	adds	r3, #1
 8005b82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005b8a:	b29b      	uxth	r3, r3
 8005b8c:	029b      	lsls	r3, r3, #10
 8005b8e:	b29a      	uxth	r2, r3
 8005b90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005b92:	801a      	strh	r2, [r3, #0]
 8005b94:	e03b      	b.n	8005c0e <USB_EPStartXfer+0xaea>
 8005b96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b9a:	095b      	lsrs	r3, r3, #5
 8005b9c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005ba0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ba4:	f003 031f 	and.w	r3, r3, #31
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d104      	bne.n	8005bb6 <USB_EPStartXfer+0xa92>
 8005bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005bb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005bba:	b29b      	uxth	r3, r3
 8005bbc:	029b      	lsls	r3, r3, #10
 8005bbe:	b29b      	uxth	r3, r3
 8005bc0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bc4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bc8:	b29a      	uxth	r2, r3
 8005bca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005bcc:	801a      	strh	r2, [r3, #0]
 8005bce:	e01e      	b.n	8005c0e <USB_EPStartXfer+0xaea>
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	785b      	ldrb	r3, [r3, #1]
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	d119      	bne.n	8005c0e <USB_EPStartXfer+0xaea>
 8005bda:	1d3b      	adds	r3, r7, #4
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	673b      	str	r3, [r7, #112]	; 0x70
 8005be0:	1d3b      	adds	r3, r7, #4
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005be8:	b29b      	uxth	r3, r3
 8005bea:	461a      	mov	r2, r3
 8005bec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bee:	4413      	add	r3, r2
 8005bf0:	673b      	str	r3, [r7, #112]	; 0x70
 8005bf2:	463b      	mov	r3, r7
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	781b      	ldrb	r3, [r3, #0]
 8005bf8:	011a      	lsls	r2, r3, #4
 8005bfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005bfc:	4413      	add	r3, r2
 8005bfe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c02:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c08:	b29a      	uxth	r2, r3
 8005c0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005c0e:	463b      	mov	r3, r7
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	891b      	ldrh	r3, [r3, #8]
 8005c14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005c18:	463b      	mov	r3, r7
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6959      	ldr	r1, [r3, #20]
 8005c1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005c28:	1d38      	adds	r0, r7, #4
 8005c2a:	6800      	ldr	r0, [r0, #0]
 8005c2c:	f000 feaf 	bl	800698e <USB_WritePMA>
 8005c30:	e17e      	b.n	8005f30 <USB_EPStartXfer+0xe0c>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005c32:	463b      	mov	r3, r7
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	785b      	ldrb	r3, [r3, #1]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d16f      	bne.n	8005d1c <USB_EPStartXfer+0xbf8>
 8005c3c:	1d3b      	adds	r3, r7, #4
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c44:	1d3b      	adds	r3, r7, #4
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c4c:	b29b      	uxth	r3, r3
 8005c4e:	461a      	mov	r2, r3
 8005c50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c54:	4413      	add	r3, r2
 8005c56:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005c5a:	463b      	mov	r3, r7
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	011a      	lsls	r2, r3, #4
 8005c62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005c66:	4413      	add	r3, r2
 8005c68:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005c6c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005c70:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d116      	bne.n	8005ca6 <USB_EPStartXfer+0xb82>
 8005c78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c7c:	881b      	ldrh	r3, [r3, #0]
 8005c7e:	b29b      	uxth	r3, r3
 8005c80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c8a:	801a      	strh	r2, [r3, #0]
 8005c8c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005c90:	881b      	ldrh	r3, [r3, #0]
 8005c92:	b29b      	uxth	r3, r3
 8005c94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c9c:	b29a      	uxth	r2, r3
 8005c9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ca2:	801a      	strh	r2, [r3, #0]
 8005ca4:	e05f      	b.n	8005d66 <USB_EPStartXfer+0xc42>
 8005ca6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005caa:	2b3e      	cmp	r3, #62	; 0x3e
 8005cac:	d818      	bhi.n	8005ce0 <USB_EPStartXfer+0xbbc>
 8005cae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cb2:	085b      	lsrs	r3, r3, #1
 8005cb4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cbc:	f003 0301 	and.w	r3, r3, #1
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d004      	beq.n	8005cce <USB_EPStartXfer+0xbaa>
 8005cc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cc8:	3301      	adds	r3, #1
 8005cca:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cce:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	029b      	lsls	r3, r3, #10
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005cdc:	801a      	strh	r2, [r3, #0]
 8005cde:	e042      	b.n	8005d66 <USB_EPStartXfer+0xc42>
 8005ce0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce4:	095b      	lsrs	r3, r3, #5
 8005ce6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005cea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cee:	f003 031f 	and.w	r3, r3, #31
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d104      	bne.n	8005d00 <USB_EPStartXfer+0xbdc>
 8005cf6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005cfa:	3b01      	subs	r3, #1
 8005cfc:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005d00:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005d04:	b29b      	uxth	r3, r3
 8005d06:	029b      	lsls	r3, r3, #10
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005d0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005d12:	b29a      	uxth	r2, r3
 8005d14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d18:	801a      	strh	r2, [r3, #0]
 8005d1a:	e024      	b.n	8005d66 <USB_EPStartXfer+0xc42>
 8005d1c:	463b      	mov	r3, r7
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	785b      	ldrb	r3, [r3, #1]
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d11f      	bne.n	8005d66 <USB_EPStartXfer+0xc42>
 8005d26:	1d3b      	adds	r3, r7, #4
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d2e:	1d3b      	adds	r3, r7, #4
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d36:	b29b      	uxth	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d3e:	4413      	add	r3, r2
 8005d40:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8005d44:	463b      	mov	r3, r7
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	781b      	ldrb	r3, [r3, #0]
 8005d4a:	011a      	lsls	r2, r3, #4
 8005d4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d50:	4413      	add	r3, r2
 8005d52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005d5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d64:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005d66:	463b      	mov	r3, r7
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	891b      	ldrh	r3, [r3, #8]
 8005d6c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005d70:	463b      	mov	r3, r7
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	6959      	ldr	r1, [r3, #20]
 8005d76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005d80:	1d38      	adds	r0, r7, #4
 8005d82:	6800      	ldr	r0, [r0, #0]
 8005d84:	f000 fe03 	bl	800698e <USB_WritePMA>
          ep->xfer_buff += len;
 8005d88:	463b      	mov	r3, r7
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	695a      	ldr	r2, [r3, #20]
 8005d8e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d92:	441a      	add	r2, r3
 8005d94:	463b      	mov	r3, r7
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d9a:	463b      	mov	r3, r7
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	6a1a      	ldr	r2, [r3, #32]
 8005da0:	463b      	mov	r3, r7
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d909      	bls.n	8005dbe <USB_EPStartXfer+0xc9a>
          {
            ep->xfer_len_db -= len;
 8005daa:	463b      	mov	r3, r7
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	6a1a      	ldr	r2, [r3, #32]
 8005db0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005db4:	1ad2      	subs	r2, r2, r3
 8005db6:	463b      	mov	r3, r7
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	621a      	str	r2, [r3, #32]
 8005dbc:	e008      	b.n	8005dd0 <USB_EPStartXfer+0xcac>
          }
          else
          {
            len = ep->xfer_len_db;
 8005dbe:	463b      	mov	r3, r7
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	6a1b      	ldr	r3, [r3, #32]
 8005dc4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005dc8:	463b      	mov	r3, r7
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005dd0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	f000 80ab 	beq.w	8005f30 <USB_EPStartXfer+0xe0c>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005dda:	1d3b      	adds	r3, r7, #4
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005de2:	463b      	mov	r3, r7
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	785b      	ldrb	r3, [r3, #1]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d16f      	bne.n	8005ecc <USB_EPStartXfer+0xda8>
 8005dec:	1d3b      	adds	r3, r7, #4
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005df4:	1d3b      	adds	r3, r7, #4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005dfc:	b29b      	uxth	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e04:	4413      	add	r3, r2
 8005e06:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005e0a:	463b      	mov	r3, r7
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	781b      	ldrb	r3, [r3, #0]
 8005e10:	011a      	lsls	r2, r3, #4
 8005e12:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005e16:	4413      	add	r3, r2
 8005e18:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005e1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005e20:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d116      	bne.n	8005e56 <USB_EPStartXfer+0xd32>
 8005e28:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e2c:	881b      	ldrh	r3, [r3, #0]
 8005e2e:	b29b      	uxth	r3, r3
 8005e30:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e34:	b29a      	uxth	r2, r3
 8005e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e3a:	801a      	strh	r2, [r3, #0]
 8005e3c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e40:	881b      	ldrh	r3, [r3, #0]
 8005e42:	b29b      	uxth	r3, r3
 8005e44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e4c:	b29a      	uxth	r2, r3
 8005e4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e52:	801a      	strh	r2, [r3, #0]
 8005e54:	e05b      	b.n	8005f0e <USB_EPStartXfer+0xdea>
 8005e56:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e5a:	2b3e      	cmp	r3, #62	; 0x3e
 8005e5c:	d818      	bhi.n	8005e90 <USB_EPStartXfer+0xd6c>
 8005e5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e62:	085b      	lsrs	r3, r3, #1
 8005e64:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e6c:	f003 0301 	and.w	r3, r3, #1
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d004      	beq.n	8005e7e <USB_EPStartXfer+0xd5a>
 8005e74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e78:	3301      	adds	r3, #1
 8005e7a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e7e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005e82:	b29b      	uxth	r3, r3
 8005e84:	029b      	lsls	r3, r3, #10
 8005e86:	b29a      	uxth	r2, r3
 8005e88:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e8c:	801a      	strh	r2, [r3, #0]
 8005e8e:	e03e      	b.n	8005f0e <USB_EPStartXfer+0xdea>
 8005e90:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e94:	095b      	lsrs	r3, r3, #5
 8005e96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005e9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e9e:	f003 031f 	and.w	r3, r3, #31
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d104      	bne.n	8005eb0 <USB_EPStartXfer+0xd8c>
 8005ea6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8005eb0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005eb4:	b29b      	uxth	r3, r3
 8005eb6:	029b      	lsls	r3, r3, #10
 8005eb8:	b29b      	uxth	r3, r3
 8005eba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005ebe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005ec2:	b29a      	uxth	r2, r3
 8005ec4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005ec8:	801a      	strh	r2, [r3, #0]
 8005eca:	e020      	b.n	8005f0e <USB_EPStartXfer+0xdea>
 8005ecc:	463b      	mov	r3, r7
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	785b      	ldrb	r3, [r3, #1]
 8005ed2:	2b01      	cmp	r3, #1
 8005ed4:	d11b      	bne.n	8005f0e <USB_EPStartXfer+0xdea>
 8005ed6:	1d3b      	adds	r3, r7, #4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ee6:	4413      	add	r3, r2
 8005ee8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005eec:	463b      	mov	r3, r7
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	781b      	ldrb	r3, [r3, #0]
 8005ef2:	011a      	lsls	r2, r3, #4
 8005ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ef8:	4413      	add	r3, r2
 8005efa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005efe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005f02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f06:	b29a      	uxth	r2, r3
 8005f08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f0c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8005f0e:	463b      	mov	r3, r7
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	895b      	ldrh	r3, [r3, #10]
 8005f14:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005f18:	463b      	mov	r3, r7
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	6959      	ldr	r1, [r3, #20]
 8005f1e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f22:	b29b      	uxth	r3, r3
 8005f24:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005f28:	1d38      	adds	r0, r7, #4
 8005f2a:	6800      	ldr	r0, [r0, #0]
 8005f2c:	f000 fd2f 	bl	800698e <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8005f30:	1d3b      	adds	r3, r7, #4
 8005f32:	681a      	ldr	r2, [r3, #0]
 8005f34:	463b      	mov	r3, r7
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	009b      	lsls	r3, r3, #2
 8005f3c:	4413      	add	r3, r2
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	b29b      	uxth	r3, r3
 8005f42:	f107 020a 	add.w	r2, r7, #10
 8005f46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f4e:	8013      	strh	r3, [r2, #0]
 8005f50:	f107 030a 	add.w	r3, r7, #10
 8005f54:	f107 020a 	add.w	r2, r7, #10
 8005f58:	8812      	ldrh	r2, [r2, #0]
 8005f5a:	f082 0210 	eor.w	r2, r2, #16
 8005f5e:	801a      	strh	r2, [r3, #0]
 8005f60:	f107 030a 	add.w	r3, r7, #10
 8005f64:	f107 020a 	add.w	r2, r7, #10
 8005f68:	8812      	ldrh	r2, [r2, #0]
 8005f6a:	f082 0220 	eor.w	r2, r2, #32
 8005f6e:	801a      	strh	r2, [r3, #0]
 8005f70:	1d3b      	adds	r3, r7, #4
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	463b      	mov	r3, r7
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	009b      	lsls	r3, r3, #2
 8005f7c:	441a      	add	r2, r3
 8005f7e:	f107 030a 	add.w	r3, r7, #10
 8005f82:	881b      	ldrh	r3, [r3, #0]
 8005f84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f94:	b29b      	uxth	r3, r3
 8005f96:	8013      	strh	r3, [r2, #0]
 8005f98:	e3b5      	b.n	8006706 <USB_EPStartXfer+0x15e2>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8005f9a:	463b      	mov	r3, r7
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	7b1b      	ldrb	r3, [r3, #12]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	f040 8090 	bne.w	80060c6 <USB_EPStartXfer+0xfa2>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8005fa6:	463b      	mov	r3, r7
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	699a      	ldr	r2, [r3, #24]
 8005fac:	463b      	mov	r3, r7
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	691b      	ldr	r3, [r3, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	d90e      	bls.n	8005fd4 <USB_EPStartXfer+0xeb0>
      {
        len = ep->maxpacket;
 8005fb6:	463b      	mov	r3, r7
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	691b      	ldr	r3, [r3, #16]
 8005fbc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8005fc0:	463b      	mov	r3, r7
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	699a      	ldr	r2, [r3, #24]
 8005fc6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fca:	1ad2      	subs	r2, r2, r3
 8005fcc:	463b      	mov	r3, r7
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	619a      	str	r2, [r3, #24]
 8005fd2:	e008      	b.n	8005fe6 <USB_EPStartXfer+0xec2>
      }
      else
      {
        len = ep->xfer_len;
 8005fd4:	463b      	mov	r3, r7
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	699b      	ldr	r3, [r3, #24]
 8005fda:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 8005fde:	463b      	mov	r3, r7
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8005fe6:	1d3b      	adds	r3, r7, #4
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fee:	1d3b      	adds	r3, r7, #4
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005ff6:	b29b      	uxth	r3, r3
 8005ff8:	461a      	mov	r2, r3
 8005ffa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005ffe:	4413      	add	r3, r2
 8006000:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006004:	463b      	mov	r3, r7
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	011a      	lsls	r2, r3, #4
 800600c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006010:	4413      	add	r3, r2
 8006012:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006016:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800601a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800601e:	2b00      	cmp	r3, #0
 8006020:	d116      	bne.n	8006050 <USB_EPStartXfer+0xf2c>
 8006022:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006026:	881b      	ldrh	r3, [r3, #0]
 8006028:	b29b      	uxth	r3, r3
 800602a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800602e:	b29a      	uxth	r2, r3
 8006030:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006034:	801a      	strh	r2, [r3, #0]
 8006036:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800603a:	881b      	ldrh	r3, [r3, #0]
 800603c:	b29b      	uxth	r3, r3
 800603e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006042:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006046:	b29a      	uxth	r2, r3
 8006048:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800604c:	801a      	strh	r2, [r3, #0]
 800604e:	e32c      	b.n	80066aa <USB_EPStartXfer+0x1586>
 8006050:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006054:	2b3e      	cmp	r3, #62	; 0x3e
 8006056:	d818      	bhi.n	800608a <USB_EPStartXfer+0xf66>
 8006058:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800605c:	085b      	lsrs	r3, r3, #1
 800605e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006062:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d004      	beq.n	8006078 <USB_EPStartXfer+0xf54>
 800606e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006072:	3301      	adds	r3, #1
 8006074:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006078:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800607c:	b29b      	uxth	r3, r3
 800607e:	029b      	lsls	r3, r3, #10
 8006080:	b29a      	uxth	r2, r3
 8006082:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006086:	801a      	strh	r2, [r3, #0]
 8006088:	e30f      	b.n	80066aa <USB_EPStartXfer+0x1586>
 800608a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800608e:	095b      	lsrs	r3, r3, #5
 8006090:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006094:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006098:	f003 031f 	and.w	r3, r3, #31
 800609c:	2b00      	cmp	r3, #0
 800609e:	d104      	bne.n	80060aa <USB_EPStartXfer+0xf86>
 80060a0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060a4:	3b01      	subs	r3, #1
 80060a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80060aa:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80060ae:	b29b      	uxth	r3, r3
 80060b0:	029b      	lsls	r3, r3, #10
 80060b2:	b29b      	uxth	r3, r3
 80060b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80060b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80060bc:	b29a      	uxth	r2, r3
 80060be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80060c2:	801a      	strh	r2, [r3, #0]
 80060c4:	e2f1      	b.n	80066aa <USB_EPStartXfer+0x1586>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80060c6:	463b      	mov	r3, r7
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	78db      	ldrb	r3, [r3, #3]
 80060cc:	2b02      	cmp	r3, #2
 80060ce:	f040 818f 	bne.w	80063f0 <USB_EPStartXfer+0x12cc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80060d2:	463b      	mov	r3, r7
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	785b      	ldrb	r3, [r3, #1]
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d175      	bne.n	80061c8 <USB_EPStartXfer+0x10a4>
 80060dc:	1d3b      	adds	r3, r7, #4
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060e4:	1d3b      	adds	r3, r7, #4
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80060ec:	b29b      	uxth	r3, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f4:	4413      	add	r3, r2
 80060f6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060fa:	463b      	mov	r3, r7
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	011a      	lsls	r2, r3, #4
 8006102:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006106:	4413      	add	r3, r2
 8006108:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800610c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006110:	463b      	mov	r3, r7
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d116      	bne.n	8006148 <USB_EPStartXfer+0x1024>
 800611a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800611e:	881b      	ldrh	r3, [r3, #0]
 8006120:	b29b      	uxth	r3, r3
 8006122:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006126:	b29a      	uxth	r2, r3
 8006128:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800612c:	801a      	strh	r2, [r3, #0]
 800612e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006132:	881b      	ldrh	r3, [r3, #0]
 8006134:	b29b      	uxth	r3, r3
 8006136:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800613a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800613e:	b29a      	uxth	r2, r3
 8006140:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006144:	801a      	strh	r2, [r3, #0]
 8006146:	e065      	b.n	8006214 <USB_EPStartXfer+0x10f0>
 8006148:	463b      	mov	r3, r7
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	691b      	ldr	r3, [r3, #16]
 800614e:	2b3e      	cmp	r3, #62	; 0x3e
 8006150:	d81a      	bhi.n	8006188 <USB_EPStartXfer+0x1064>
 8006152:	463b      	mov	r3, r7
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	085b      	lsrs	r3, r3, #1
 800615a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800615e:	463b      	mov	r3, r7
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691b      	ldr	r3, [r3, #16]
 8006164:	f003 0301 	and.w	r3, r3, #1
 8006168:	2b00      	cmp	r3, #0
 800616a:	d004      	beq.n	8006176 <USB_EPStartXfer+0x1052>
 800616c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006170:	3301      	adds	r3, #1
 8006172:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006176:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800617a:	b29b      	uxth	r3, r3
 800617c:	029b      	lsls	r3, r3, #10
 800617e:	b29a      	uxth	r2, r3
 8006180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006184:	801a      	strh	r2, [r3, #0]
 8006186:	e045      	b.n	8006214 <USB_EPStartXfer+0x10f0>
 8006188:	463b      	mov	r3, r7
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	691b      	ldr	r3, [r3, #16]
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006194:	463b      	mov	r3, r7
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	691b      	ldr	r3, [r3, #16]
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d104      	bne.n	80061ac <USB_EPStartXfer+0x1088>
 80061a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061a6:	3b01      	subs	r3, #1
 80061a8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80061ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80061b0:	b29b      	uxth	r3, r3
 80061b2:	029b      	lsls	r3, r3, #10
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80061ba:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80061be:	b29a      	uxth	r2, r3
 80061c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061c4:	801a      	strh	r2, [r3, #0]
 80061c6:	e025      	b.n	8006214 <USB_EPStartXfer+0x10f0>
 80061c8:	463b      	mov	r3, r7
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	785b      	ldrb	r3, [r3, #1]
 80061ce:	2b01      	cmp	r3, #1
 80061d0:	d120      	bne.n	8006214 <USB_EPStartXfer+0x10f0>
 80061d2:	1d3b      	adds	r3, r7, #4
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061da:	1d3b      	adds	r3, r7, #4
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80061e2:	b29b      	uxth	r3, r3
 80061e4:	461a      	mov	r2, r3
 80061e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061ea:	4413      	add	r3, r2
 80061ec:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80061f0:	463b      	mov	r3, r7
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	011a      	lsls	r2, r3, #4
 80061f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80061fc:	4413      	add	r3, r2
 80061fe:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006202:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006206:	463b      	mov	r3, r7
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	691b      	ldr	r3, [r3, #16]
 800620c:	b29a      	uxth	r2, r3
 800620e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006212:	801a      	strh	r2, [r3, #0]
 8006214:	1d3b      	adds	r3, r7, #4
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800621c:	463b      	mov	r3, r7
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	785b      	ldrb	r3, [r3, #1]
 8006222:	2b00      	cmp	r3, #0
 8006224:	d175      	bne.n	8006312 <USB_EPStartXfer+0x11ee>
 8006226:	1d3b      	adds	r3, r7, #4
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800622e:	1d3b      	adds	r3, r7, #4
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006236:	b29b      	uxth	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800623e:	4413      	add	r3, r2
 8006240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006244:	463b      	mov	r3, r7
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	781b      	ldrb	r3, [r3, #0]
 800624a:	011a      	lsls	r2, r3, #4
 800624c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006250:	4413      	add	r3, r2
 8006252:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006256:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800625a:	463b      	mov	r3, r7
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	691b      	ldr	r3, [r3, #16]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d116      	bne.n	8006292 <USB_EPStartXfer+0x116e>
 8006264:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006268:	881b      	ldrh	r3, [r3, #0]
 800626a:	b29b      	uxth	r3, r3
 800626c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006270:	b29a      	uxth	r2, r3
 8006272:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006276:	801a      	strh	r2, [r3, #0]
 8006278:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800627c:	881b      	ldrh	r3, [r3, #0]
 800627e:	b29b      	uxth	r3, r3
 8006280:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006284:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006288:	b29a      	uxth	r2, r3
 800628a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800628e:	801a      	strh	r2, [r3, #0]
 8006290:	e061      	b.n	8006356 <USB_EPStartXfer+0x1232>
 8006292:	463b      	mov	r3, r7
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b3e      	cmp	r3, #62	; 0x3e
 800629a:	d81a      	bhi.n	80062d2 <USB_EPStartXfer+0x11ae>
 800629c:	463b      	mov	r3, r7
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	691b      	ldr	r3, [r3, #16]
 80062a2:	085b      	lsrs	r3, r3, #1
 80062a4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062a8:	463b      	mov	r3, r7
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0301 	and.w	r3, r3, #1
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d004      	beq.n	80062c0 <USB_EPStartXfer+0x119c>
 80062b6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062ba:	3301      	adds	r3, #1
 80062bc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062c0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	029b      	lsls	r3, r3, #10
 80062c8:	b29a      	uxth	r2, r3
 80062ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80062ce:	801a      	strh	r2, [r3, #0]
 80062d0:	e041      	b.n	8006356 <USB_EPStartXfer+0x1232>
 80062d2:	463b      	mov	r3, r7
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	691b      	ldr	r3, [r3, #16]
 80062d8:	095b      	lsrs	r3, r3, #5
 80062da:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062de:	463b      	mov	r3, r7
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	691b      	ldr	r3, [r3, #16]
 80062e4:	f003 031f 	and.w	r3, r3, #31
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	d104      	bne.n	80062f6 <USB_EPStartXfer+0x11d2>
 80062ec:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062f0:	3b01      	subs	r3, #1
 80062f2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80062f6:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062fa:	b29b      	uxth	r3, r3
 80062fc:	029b      	lsls	r3, r3, #10
 80062fe:	b29b      	uxth	r3, r3
 8006300:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006304:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006308:	b29a      	uxth	r2, r3
 800630a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800630e:	801a      	strh	r2, [r3, #0]
 8006310:	e021      	b.n	8006356 <USB_EPStartXfer+0x1232>
 8006312:	463b      	mov	r3, r7
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	785b      	ldrb	r3, [r3, #1]
 8006318:	2b01      	cmp	r3, #1
 800631a:	d11c      	bne.n	8006356 <USB_EPStartXfer+0x1232>
 800631c:	1d3b      	adds	r3, r7, #4
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006324:	b29b      	uxth	r3, r3
 8006326:	461a      	mov	r2, r3
 8006328:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800632c:	4413      	add	r3, r2
 800632e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006332:	463b      	mov	r3, r7
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	781b      	ldrb	r3, [r3, #0]
 8006338:	011a      	lsls	r2, r3, #4
 800633a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800633e:	4413      	add	r3, r2
 8006340:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006344:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006348:	463b      	mov	r3, r7
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	b29a      	uxth	r2, r3
 8006350:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006354:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8006356:	463b      	mov	r3, r7
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	69db      	ldr	r3, [r3, #28]
 800635c:	2b00      	cmp	r3, #0
 800635e:	f000 81a4 	beq.w	80066aa <USB_EPStartXfer+0x1586>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006362:	1d3b      	adds	r3, r7, #4
 8006364:	681a      	ldr	r2, [r3, #0]
 8006366:	463b      	mov	r3, r7
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4413      	add	r3, r2
 8006370:	881b      	ldrh	r3, [r3, #0]
 8006372:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006376:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800637a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800637e:	2b00      	cmp	r3, #0
 8006380:	d005      	beq.n	800638e <USB_EPStartXfer+0x126a>
 8006382:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006386:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800638a:	2b00      	cmp	r3, #0
 800638c:	d10d      	bne.n	80063aa <USB_EPStartXfer+0x1286>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800638e:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006392:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006396:	2b00      	cmp	r3, #0
 8006398:	f040 8187 	bne.w	80066aa <USB_EPStartXfer+0x1586>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800639c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 80063a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	f040 8180 	bne.w	80066aa <USB_EPStartXfer+0x1586>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 80063aa:	1d3b      	adds	r3, r7, #4
 80063ac:	681a      	ldr	r2, [r3, #0]
 80063ae:	463b      	mov	r3, r7
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	781b      	ldrb	r3, [r3, #0]
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4413      	add	r3, r2
 80063b8:	881b      	ldrh	r3, [r3, #0]
 80063ba:	b29b      	uxth	r3, r3
 80063bc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063c4:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 80063c8:	1d3b      	adds	r3, r7, #4
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	463b      	mov	r3, r7
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	441a      	add	r2, r3
 80063d6:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80063da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063e6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	8013      	strh	r3, [r2, #0]
 80063ee:	e15c      	b.n	80066aa <USB_EPStartXfer+0x1586>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80063f0:	463b      	mov	r3, r7
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	78db      	ldrb	r3, [r3, #3]
 80063f6:	2b01      	cmp	r3, #1
 80063f8:	f040 8155 	bne.w	80066a6 <USB_EPStartXfer+0x1582>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80063fc:	463b      	mov	r3, r7
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	699a      	ldr	r2, [r3, #24]
 8006402:	463b      	mov	r3, r7
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	691b      	ldr	r3, [r3, #16]
 8006408:	429a      	cmp	r2, r3
 800640a:	d90e      	bls.n	800642a <USB_EPStartXfer+0x1306>
        {
          len = ep->maxpacket;
 800640c:	463b      	mov	r3, r7
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	691b      	ldr	r3, [r3, #16]
 8006412:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006416:	463b      	mov	r3, r7
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	699a      	ldr	r2, [r3, #24]
 800641c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006420:	1ad2      	subs	r2, r2, r3
 8006422:	463b      	mov	r3, r7
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	619a      	str	r2, [r3, #24]
 8006428:	e008      	b.n	800643c <USB_EPStartXfer+0x1318>
        }
        else
        {
          len = ep->xfer_len;
 800642a:	463b      	mov	r3, r7
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006434:	463b      	mov	r3, r7
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	2200      	movs	r2, #0
 800643a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800643c:	463b      	mov	r3, r7
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	785b      	ldrb	r3, [r3, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d16f      	bne.n	8006526 <USB_EPStartXfer+0x1402>
 8006446:	1d3b      	adds	r3, r7, #4
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800644e:	1d3b      	adds	r3, r7, #4
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006456:	b29b      	uxth	r3, r3
 8006458:	461a      	mov	r2, r3
 800645a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800645e:	4413      	add	r3, r2
 8006460:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006464:	463b      	mov	r3, r7
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	781b      	ldrb	r3, [r3, #0]
 800646a:	011a      	lsls	r2, r3, #4
 800646c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006470:	4413      	add	r3, r2
 8006472:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006476:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800647a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800647e:	2b00      	cmp	r3, #0
 8006480:	d116      	bne.n	80064b0 <USB_EPStartXfer+0x138c>
 8006482:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006486:	881b      	ldrh	r3, [r3, #0]
 8006488:	b29b      	uxth	r3, r3
 800648a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800648e:	b29a      	uxth	r2, r3
 8006490:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006494:	801a      	strh	r2, [r3, #0]
 8006496:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800649a:	881b      	ldrh	r3, [r3, #0]
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e05f      	b.n	8006570 <USB_EPStartXfer+0x144c>
 80064b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064b4:	2b3e      	cmp	r3, #62	; 0x3e
 80064b6:	d818      	bhi.n	80064ea <USB_EPStartXfer+0x13c6>
 80064b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064bc:	085b      	lsrs	r3, r3, #1
 80064be:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d004      	beq.n	80064d8 <USB_EPStartXfer+0x13b4>
 80064ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064d2:	3301      	adds	r3, #1
 80064d4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064dc:	b29b      	uxth	r3, r3
 80064de:	029b      	lsls	r3, r3, #10
 80064e0:	b29a      	uxth	r2, r3
 80064e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80064e6:	801a      	strh	r2, [r3, #0]
 80064e8:	e042      	b.n	8006570 <USB_EPStartXfer+0x144c>
 80064ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064ee:	095b      	lsrs	r3, r3, #5
 80064f0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80064f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80064f8:	f003 031f 	and.w	r3, r3, #31
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d104      	bne.n	800650a <USB_EPStartXfer+0x13e6>
 8006500:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006504:	3b01      	subs	r3, #1
 8006506:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800650a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800650e:	b29b      	uxth	r3, r3
 8006510:	029b      	lsls	r3, r3, #10
 8006512:	b29b      	uxth	r3, r3
 8006514:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006518:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800651c:	b29a      	uxth	r2, r3
 800651e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006522:	801a      	strh	r2, [r3, #0]
 8006524:	e024      	b.n	8006570 <USB_EPStartXfer+0x144c>
 8006526:	463b      	mov	r3, r7
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	785b      	ldrb	r3, [r3, #1]
 800652c:	2b01      	cmp	r3, #1
 800652e:	d11f      	bne.n	8006570 <USB_EPStartXfer+0x144c>
 8006530:	1d3b      	adds	r3, r7, #4
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006538:	1d3b      	adds	r3, r7, #4
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006540:	b29b      	uxth	r3, r3
 8006542:	461a      	mov	r2, r3
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006548:	4413      	add	r3, r2
 800654a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800654e:	463b      	mov	r3, r7
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	781b      	ldrb	r3, [r3, #0]
 8006554:	011a      	lsls	r2, r3, #4
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800655a:	4413      	add	r3, r2
 800655c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006560:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006564:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006568:	b29a      	uxth	r2, r3
 800656a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800656e:	801a      	strh	r2, [r3, #0]
 8006570:	1d3b      	adds	r3, r7, #4
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006578:	463b      	mov	r3, r7
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	785b      	ldrb	r3, [r3, #1]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d16f      	bne.n	8006662 <USB_EPStartXfer+0x153e>
 8006582:	1d3b      	adds	r3, r7, #4
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800658a:	1d3b      	adds	r3, r7, #4
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006592:	b29b      	uxth	r3, r3
 8006594:	461a      	mov	r2, r3
 8006596:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800659a:	4413      	add	r3, r2
 800659c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80065a0:	463b      	mov	r3, r7
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	781b      	ldrb	r3, [r3, #0]
 80065a6:	011a      	lsls	r2, r3, #4
 80065a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ac:	4413      	add	r3, r2
 80065ae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80065b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80065b6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d116      	bne.n	80065ec <USB_EPStartXfer+0x14c8>
 80065be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065c2:	881b      	ldrh	r3, [r3, #0]
 80065c4:	b29b      	uxth	r3, r3
 80065c6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80065ca:	b29a      	uxth	r2, r3
 80065cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d0:	801a      	strh	r2, [r3, #0]
 80065d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	b29b      	uxth	r3, r3
 80065da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065e2:	b29a      	uxth	r2, r3
 80065e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80065e8:	801a      	strh	r2, [r3, #0]
 80065ea:	e05e      	b.n	80066aa <USB_EPStartXfer+0x1586>
 80065ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f0:	2b3e      	cmp	r3, #62	; 0x3e
 80065f2:	d818      	bhi.n	8006626 <USB_EPStartXfer+0x1502>
 80065f4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80065f8:	085b      	lsrs	r3, r3, #1
 80065fa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80065fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006602:	f003 0301 	and.w	r3, r3, #1
 8006606:	2b00      	cmp	r3, #0
 8006608:	d004      	beq.n	8006614 <USB_EPStartXfer+0x14f0>
 800660a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800660e:	3301      	adds	r3, #1
 8006610:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006614:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006618:	b29b      	uxth	r3, r3
 800661a:	029b      	lsls	r3, r3, #10
 800661c:	b29a      	uxth	r2, r3
 800661e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006622:	801a      	strh	r2, [r3, #0]
 8006624:	e041      	b.n	80066aa <USB_EPStartXfer+0x1586>
 8006626:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800662a:	095b      	lsrs	r3, r3, #5
 800662c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006634:	f003 031f 	and.w	r3, r3, #31
 8006638:	2b00      	cmp	r3, #0
 800663a:	d104      	bne.n	8006646 <USB_EPStartXfer+0x1522>
 800663c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006640:	3b01      	subs	r3, #1
 8006642:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006646:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800664a:	b29b      	uxth	r3, r3
 800664c:	029b      	lsls	r3, r3, #10
 800664e:	b29b      	uxth	r3, r3
 8006650:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006654:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	e023      	b.n	80066aa <USB_EPStartXfer+0x1586>
 8006662:	463b      	mov	r3, r7
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	785b      	ldrb	r3, [r3, #1]
 8006668:	2b01      	cmp	r3, #1
 800666a:	d11e      	bne.n	80066aa <USB_EPStartXfer+0x1586>
 800666c:	1d3b      	adds	r3, r7, #4
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006674:	b29b      	uxth	r3, r3
 8006676:	461a      	mov	r2, r3
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	4413      	add	r3, r2
 800667e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006682:	463b      	mov	r3, r7
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	781b      	ldrb	r3, [r3, #0]
 8006688:	011a      	lsls	r2, r3, #4
 800668a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800668e:	4413      	add	r3, r2
 8006690:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006694:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800669c:	b29a      	uxth	r2, r3
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a2:	801a      	strh	r2, [r3, #0]
 80066a4:	e001      	b.n	80066aa <USB_EPStartXfer+0x1586>
      }
      else
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e02e      	b.n	8006708 <USB_EPStartXfer+0x15e4>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80066aa:	1d3b      	adds	r3, r7, #4
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	463b      	mov	r3, r7
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	781b      	ldrb	r3, [r3, #0]
 80066b4:	009b      	lsls	r3, r3, #2
 80066b6:	4413      	add	r3, r2
 80066b8:	881b      	ldrh	r3, [r3, #0]
 80066ba:	b29b      	uxth	r3, r3
 80066bc:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c4:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80066c8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066cc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066d0:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80066d4:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066d8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066dc:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 80066e0:	1d3b      	adds	r3, r7, #4
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	463b      	mov	r3, r7
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	781b      	ldrb	r3, [r3, #0]
 80066ea:	009b      	lsls	r3, r3, #2
 80066ec:	441a      	add	r2, r3
 80066ee:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 80066f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80066f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80066fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80066fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006702:	b29b      	uxth	r3, r3
 8006704:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006706:	2300      	movs	r3, #0
}
 8006708:	4618      	mov	r0, r3
 800670a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	785b      	ldrb	r3, [r3, #1]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d020      	beq.n	8006766 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006724:	687a      	ldr	r2, [r7, #4]
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	781b      	ldrb	r3, [r3, #0]
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	881b      	ldrh	r3, [r3, #0]
 8006730:	b29b      	uxth	r3, r3
 8006732:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006736:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800673a:	81bb      	strh	r3, [r7, #12]
 800673c:	89bb      	ldrh	r3, [r7, #12]
 800673e:	f083 0310 	eor.w	r3, r3, #16
 8006742:	81bb      	strh	r3, [r7, #12]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	781b      	ldrb	r3, [r3, #0]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	441a      	add	r2, r3
 800674e:	89bb      	ldrh	r3, [r7, #12]
 8006750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800675c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006760:	b29b      	uxth	r3, r3
 8006762:	8013      	strh	r3, [r2, #0]
 8006764:	e01f      	b.n	80067a6 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	781b      	ldrb	r3, [r3, #0]
 800676c:	009b      	lsls	r3, r3, #2
 800676e:	4413      	add	r3, r2
 8006770:	881b      	ldrh	r3, [r3, #0]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006778:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800677c:	81fb      	strh	r3, [r7, #14]
 800677e:	89fb      	ldrh	r3, [r7, #14]
 8006780:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006784:	81fb      	strh	r3, [r7, #14]
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	441a      	add	r2, r3
 8006790:	89fb      	ldrh	r3, [r7, #14]
 8006792:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006796:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800679a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800679e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067a2:	b29b      	uxth	r3, r3
 80067a4:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 80067a6:	2300      	movs	r3, #0
}
 80067a8:	4618      	mov	r0, r3
 80067aa:	3714      	adds	r7, #20
 80067ac:	46bd      	mov	sp, r7
 80067ae:	bc80      	pop	{r7}
 80067b0:	4770      	bx	lr

080067b2 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b087      	sub	sp, #28
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
 80067ba:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	7b1b      	ldrb	r3, [r3, #12]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	f040 809d 	bne.w	8006900 <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 80067c6:	683b      	ldr	r3, [r7, #0]
 80067c8:	785b      	ldrb	r3, [r3, #1]
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d04c      	beq.n	8006868 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	781b      	ldrb	r3, [r3, #0]
 80067d4:	009b      	lsls	r3, r3, #2
 80067d6:	4413      	add	r3, r2
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	823b      	strh	r3, [r7, #16]
 80067dc:	8a3b      	ldrh	r3, [r7, #16]
 80067de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d01b      	beq.n	800681e <USB_EPClearStall+0x6c>
 80067e6:	687a      	ldr	r2, [r7, #4]
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	781b      	ldrb	r3, [r3, #0]
 80067ec:	009b      	lsls	r3, r3, #2
 80067ee:	4413      	add	r3, r2
 80067f0:	881b      	ldrh	r3, [r3, #0]
 80067f2:	b29b      	uxth	r3, r3
 80067f4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067f8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067fc:	81fb      	strh	r3, [r7, #14]
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	781b      	ldrb	r3, [r3, #0]
 8006804:	009b      	lsls	r3, r3, #2
 8006806:	441a      	add	r2, r3
 8006808:	89fb      	ldrh	r3, [r7, #14]
 800680a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800680e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006812:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006816:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800681a:	b29b      	uxth	r3, r3
 800681c:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	78db      	ldrb	r3, [r3, #3]
 8006822:	2b01      	cmp	r3, #1
 8006824:	d06c      	beq.n	8006900 <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006826:	687a      	ldr	r2, [r7, #4]
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	781b      	ldrb	r3, [r3, #0]
 800682c:	009b      	lsls	r3, r3, #2
 800682e:	4413      	add	r3, r2
 8006830:	881b      	ldrh	r3, [r3, #0]
 8006832:	b29b      	uxth	r3, r3
 8006834:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006838:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800683c:	81bb      	strh	r3, [r7, #12]
 800683e:	89bb      	ldrh	r3, [r7, #12]
 8006840:	f083 0320 	eor.w	r3, r3, #32
 8006844:	81bb      	strh	r3, [r7, #12]
 8006846:	687a      	ldr	r2, [r7, #4]
 8006848:	683b      	ldr	r3, [r7, #0]
 800684a:	781b      	ldrb	r3, [r3, #0]
 800684c:	009b      	lsls	r3, r3, #2
 800684e:	441a      	add	r2, r3
 8006850:	89bb      	ldrh	r3, [r7, #12]
 8006852:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006856:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800685a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800685e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006862:	b29b      	uxth	r3, r3
 8006864:	8013      	strh	r3, [r2, #0]
 8006866:	e04b      	b.n	8006900 <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006868:	687a      	ldr	r2, [r7, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	009b      	lsls	r3, r3, #2
 8006870:	4413      	add	r3, r2
 8006872:	881b      	ldrh	r3, [r3, #0]
 8006874:	82fb      	strh	r3, [r7, #22]
 8006876:	8afb      	ldrh	r3, [r7, #22]
 8006878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800687c:	2b00      	cmp	r3, #0
 800687e:	d01b      	beq.n	80068b8 <USB_EPClearStall+0x106>
 8006880:	687a      	ldr	r2, [r7, #4]
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	881b      	ldrh	r3, [r3, #0]
 800688c:	b29b      	uxth	r3, r3
 800688e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006892:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006896:	82bb      	strh	r3, [r7, #20]
 8006898:	687a      	ldr	r2, [r7, #4]
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	781b      	ldrb	r3, [r3, #0]
 800689e:	009b      	lsls	r3, r3, #2
 80068a0:	441a      	add	r2, r3
 80068a2:	8abb      	ldrh	r3, [r7, #20]
 80068a4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068a8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068ac:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80068b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068b4:	b29b      	uxth	r3, r3
 80068b6:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80068b8:	687a      	ldr	r2, [r7, #4]
 80068ba:	683b      	ldr	r3, [r7, #0]
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	009b      	lsls	r3, r3, #2
 80068c0:	4413      	add	r3, r2
 80068c2:	881b      	ldrh	r3, [r3, #0]
 80068c4:	b29b      	uxth	r3, r3
 80068c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80068ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ce:	827b      	strh	r3, [r7, #18]
 80068d0:	8a7b      	ldrh	r3, [r7, #18]
 80068d2:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80068d6:	827b      	strh	r3, [r7, #18]
 80068d8:	8a7b      	ldrh	r3, [r7, #18]
 80068da:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80068de:	827b      	strh	r3, [r7, #18]
 80068e0:	687a      	ldr	r2, [r7, #4]
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	781b      	ldrb	r3, [r3, #0]
 80068e6:	009b      	lsls	r3, r3, #2
 80068e8:	441a      	add	r2, r3
 80068ea:	8a7b      	ldrh	r3, [r7, #18]
 80068ec:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068f0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068f4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80068fc:	b29b      	uxth	r3, r3
 80068fe:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006900:	2300      	movs	r3, #0
}
 8006902:	4618      	mov	r0, r3
 8006904:	371c      	adds	r7, #28
 8006906:	46bd      	mov	sp, r7
 8006908:	bc80      	pop	{r7}
 800690a:	4770      	bx	lr

0800690c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800690c:	b480      	push	{r7}
 800690e:	b083      	sub	sp, #12
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	460b      	mov	r3, r1
 8006916:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006918:	78fb      	ldrb	r3, [r7, #3]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d103      	bne.n	8006926 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2280      	movs	r2, #128	; 0x80
 8006922:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006926:	2300      	movs	r3, #0
}
 8006928:	4618      	mov	r0, r3
 800692a:	370c      	adds	r7, #12
 800692c:	46bd      	mov	sp, r7
 800692e:	bc80      	pop	{r7}
 8006930:	4770      	bx	lr

08006932 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800693a:	2300      	movs	r3, #0
}
 800693c:	4618      	mov	r0, r3
 800693e:	370c      	adds	r7, #12
 8006940:	46bd      	mov	sp, r7
 8006942:	bc80      	pop	{r7}
 8006944:	4770      	bx	lr

08006946 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006946:	b480      	push	{r7}
 8006948:	b083      	sub	sp, #12
 800694a:	af00      	add	r7, sp, #0
 800694c:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	bc80      	pop	{r7}
 8006958:	4770      	bx	lr

0800695a <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800695a:	b480      	push	{r7}
 800695c:	b085      	sub	sp, #20
 800695e:	af00      	add	r7, sp, #0
 8006960:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006968:	b29b      	uxth	r3, r3
 800696a:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800696c:	68fb      	ldr	r3, [r7, #12]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3714      	adds	r7, #20
 8006972:	46bd      	mov	sp, r7
 8006974:	bc80      	pop	{r7}
 8006976:	4770      	bx	lr

08006978 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006978:	b480      	push	{r7}
 800697a:	b083      	sub	sp, #12
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
 8006980:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	370c      	adds	r7, #12
 8006988:	46bd      	mov	sp, r7
 800698a:	bc80      	pop	{r7}
 800698c:	4770      	bx	lr

0800698e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800698e:	b480      	push	{r7}
 8006990:	b08d      	sub	sp, #52	; 0x34
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	4611      	mov	r1, r2
 800699a:	461a      	mov	r2, r3
 800699c:	460b      	mov	r3, r1
 800699e:	80fb      	strh	r3, [r7, #6]
 80069a0:	4613      	mov	r3, r2
 80069a2:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 80069a4:	88bb      	ldrh	r3, [r7, #4]
 80069a6:	3301      	adds	r3, #1
 80069a8:	085b      	lsrs	r3, r3, #1
 80069aa:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80069b0:	68bb      	ldr	r3, [r7, #8]
 80069b2:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80069b4:	88fb      	ldrh	r3, [r7, #6]
 80069b6:	005a      	lsls	r2, r3, #1
 80069b8:	69fb      	ldr	r3, [r7, #28]
 80069ba:	4413      	add	r3, r2
 80069bc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069c0:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 80069c2:	6a3b      	ldr	r3, [r7, #32]
 80069c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80069c6:	e01e      	b.n	8006a06 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 80069c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	61bb      	str	r3, [r7, #24]
    pBuf++;
 80069ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d0:	3301      	adds	r3, #1
 80069d2:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 80069d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	b29b      	uxth	r3, r3
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	69bb      	ldr	r3, [r7, #24]
 80069e2:	4313      	orrs	r3, r2
 80069e4:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	b29a      	uxth	r2, r3
 80069ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069ec:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 80069ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f0:	3302      	adds	r3, #2
 80069f2:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 80069f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f6:	3302      	adds	r3, #2
 80069f8:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 80069fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069fc:	3301      	adds	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a02:	3b01      	subs	r3, #1
 8006a04:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d1dd      	bne.n	80069c8 <USB_WritePMA+0x3a>
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3734      	adds	r7, #52	; 0x34
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bc80      	pop	{r7}
 8006a16:	4770      	bx	lr

08006a18 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006a18:	b480      	push	{r7}
 8006a1a:	b08b      	sub	sp, #44	; 0x2c
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	4611      	mov	r1, r2
 8006a24:	461a      	mov	r2, r3
 8006a26:	460b      	mov	r3, r1
 8006a28:	80fb      	strh	r3, [r7, #6]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006a2e:	88bb      	ldrh	r3, [r7, #4]
 8006a30:	085b      	lsrs	r3, r3, #1
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006a3e:	88fb      	ldrh	r3, [r7, #6]
 8006a40:	005a      	lsls	r2, r3, #1
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	4413      	add	r3, r2
 8006a46:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a4a:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006a4c:	69bb      	ldr	r3, [r7, #24]
 8006a4e:	627b      	str	r3, [r7, #36]	; 0x24
 8006a50:	e01b      	b.n	8006a8a <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006a5a:	6a3b      	ldr	r3, [r7, #32]
 8006a5c:	3302      	adds	r3, #2
 8006a5e:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	b2da      	uxtb	r2, r3
 8006a64:	69fb      	ldr	r3, [r7, #28]
 8006a66:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a68:	69fb      	ldr	r3, [r7, #28]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	0a1b      	lsrs	r3, r3, #8
 8006a72:	b2da      	uxtb	r2, r3
 8006a74:	69fb      	ldr	r3, [r7, #28]
 8006a76:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006a78:	69fb      	ldr	r3, [r7, #28]
 8006a7a:	3301      	adds	r3, #1
 8006a7c:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006a7e:	6a3b      	ldr	r3, [r7, #32]
 8006a80:	3302      	adds	r3, #2
 8006a82:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a86:	3b01      	subs	r3, #1
 8006a88:	627b      	str	r3, [r7, #36]	; 0x24
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d1e0      	bne.n	8006a52 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8006a90:	88bb      	ldrh	r3, [r7, #4]
 8006a92:	f003 0301 	and.w	r3, r3, #1
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d007      	beq.n	8006aac <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	881b      	ldrh	r3, [r3, #0]
 8006aa0:	b29b      	uxth	r3, r3
 8006aa2:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	b2da      	uxtb	r2, r3
 8006aa8:	69fb      	ldr	r3, [r7, #28]
 8006aaa:	701a      	strb	r2, [r3, #0]
  }
}
 8006aac:	bf00      	nop
 8006aae:	372c      	adds	r7, #44	; 0x2c
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	bc80      	pop	{r7}
 8006ab4:	4770      	bx	lr

08006ab6 <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006ab6:	b580      	push	{r7, lr}
 8006ab8:	b084      	sub	sp, #16
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	60f8      	str	r0, [r7, #12]
 8006abe:	60b9      	str	r1, [r7, #8]
 8006ac0:	4613      	mov	r3, r2
 8006ac2:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006ac4:	68fb      	ldr	r3, [r7, #12]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8006aca:	2302      	movs	r3, #2
 8006acc:	e01a      	b.n	8006b04 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d003      	beq.n	8006ae0 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	2200      	movs	r2, #0
 8006adc:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	2b00      	cmp	r3, #0
 8006ae4:	d003      	beq.n	8006aee <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	68ba      	ldr	r2, [r7, #8]
 8006aea:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	79fa      	ldrb	r2, [r7, #7]
 8006afa:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f001 fbe5 	bl	80082cc <USBD_LL_Init>

  return USBD_OK;
 8006b02:	2300      	movs	r3, #0
}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}

08006b0c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b085      	sub	sp, #20
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
 8006b14:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8006b16:	2300      	movs	r3, #0
 8006b18:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d006      	beq.n	8006b2e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	683a      	ldr	r2, [r7, #0]
 8006b24:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 8006b28:	2300      	movs	r3, #0
 8006b2a:	73fb      	strb	r3, [r7, #15]
 8006b2c:	e001      	b.n	8006b32 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8006b2e:	2302      	movs	r3, #2
 8006b30:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006b32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b34:	4618      	mov	r0, r3
 8006b36:	3714      	adds	r7, #20
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	bc80      	pop	{r7}
 8006b3c:	4770      	bx	lr

08006b3e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006b3e:	b580      	push	{r7, lr}
 8006b40:	b082      	sub	sp, #8
 8006b42:	af00      	add	r7, sp, #0
 8006b44:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f001 fc08 	bl	800835c <USBD_LL_Start>

  return USBD_OK;
 8006b4c:	2300      	movs	r3, #0
}
 8006b4e:	4618      	mov	r0, r3
 8006b50:	3708      	adds	r7, #8
 8006b52:	46bd      	mov	sp, r7
 8006b54:	bd80      	pop	{r7, pc}

08006b56 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8006b56:	b480      	push	{r7}
 8006b58:	b083      	sub	sp, #12
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bc80      	pop	{r7}
 8006b68:	4770      	bx	lr

08006b6a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006b6a:	b580      	push	{r7, lr}
 8006b6c:	b084      	sub	sp, #16
 8006b6e:	af00      	add	r7, sp, #0
 8006b70:	6078      	str	r0, [r7, #4]
 8006b72:	460b      	mov	r3, r1
 8006b74:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8006b76:	2302      	movs	r3, #2
 8006b78:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00c      	beq.n	8006b9e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	78fa      	ldrb	r2, [r7, #3]
 8006b8e:	4611      	mov	r1, r2
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	4798      	blx	r3
 8006b94:	4603      	mov	r3, r0
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d101      	bne.n	8006b9e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 8006b9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3710      	adds	r7, #16
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006bba:	685b      	ldr	r3, [r3, #4]
 8006bbc:	78fa      	ldrb	r2, [r7, #3]
 8006bbe:	4611      	mov	r1, r2
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	4798      	blx	r3

  return USBD_OK;
 8006bc4:	2300      	movs	r3, #0
}
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	3708      	adds	r7, #8
 8006bca:	46bd      	mov	sp, r7
 8006bcc:	bd80      	pop	{r7, pc}

08006bce <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006bce:	b580      	push	{r7, lr}
 8006bd0:	b082      	sub	sp, #8
 8006bd2:	af00      	add	r7, sp, #0
 8006bd4:	6078      	str	r0, [r7, #4]
 8006bd6:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006bde:	6839      	ldr	r1, [r7, #0]
 8006be0:	4618      	mov	r0, r3
 8006be2:	f000 fed8 	bl	8007996 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2201      	movs	r2, #1
 8006bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006bf4:	461a      	mov	r2, r3
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c02:	f003 031f 	and.w	r3, r3, #31
 8006c06:	2b02      	cmp	r3, #2
 8006c08:	d016      	beq.n	8006c38 <USBD_LL_SetupStage+0x6a>
 8006c0a:	2b02      	cmp	r3, #2
 8006c0c:	d81c      	bhi.n	8006c48 <USBD_LL_SetupStage+0x7a>
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d002      	beq.n	8006c18 <USBD_LL_SetupStage+0x4a>
 8006c12:	2b01      	cmp	r3, #1
 8006c14:	d008      	beq.n	8006c28 <USBD_LL_SetupStage+0x5a>
 8006c16:	e017      	b.n	8006c48 <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f000 f9cb 	bl	8006fbc <USBD_StdDevReq>
      break;
 8006c26:	e01a      	b.n	8006c5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c2e:	4619      	mov	r1, r3
 8006c30:	6878      	ldr	r0, [r7, #4]
 8006c32:	f000 fa2d 	bl	8007090 <USBD_StdItfReq>
      break;
 8006c36:	e012      	b.n	8006c5e <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 fa6d 	bl	8007120 <USBD_StdEPReq>
      break;
 8006c46:	e00a      	b.n	8006c5e <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006c4e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	4619      	mov	r1, r3
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	f001 fbe0 	bl	800841c <USBD_LL_StallEP>
      break;
 8006c5c:	bf00      	nop
  }

  return USBD_OK;
 8006c5e:	2300      	movs	r3, #0
}
 8006c60:	4618      	mov	r0, r3
 8006c62:	3708      	adds	r7, #8
 8006c64:	46bd      	mov	sp, r7
 8006c66:	bd80      	pop	{r7, pc}

08006c68 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b086      	sub	sp, #24
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	60f8      	str	r0, [r7, #12]
 8006c70:	460b      	mov	r3, r1
 8006c72:	607a      	str	r2, [r7, #4]
 8006c74:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006c76:	7afb      	ldrb	r3, [r7, #11]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d14b      	bne.n	8006d14 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006c82:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006c8a:	2b03      	cmp	r3, #3
 8006c8c:	d134      	bne.n	8006cf8 <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 8006c8e:	697b      	ldr	r3, [r7, #20]
 8006c90:	68da      	ldr	r2, [r3, #12]
 8006c92:	697b      	ldr	r3, [r7, #20]
 8006c94:	691b      	ldr	r3, [r3, #16]
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d919      	bls.n	8006cce <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	68da      	ldr	r2, [r3, #12]
 8006c9e:	697b      	ldr	r3, [r7, #20]
 8006ca0:	691b      	ldr	r3, [r3, #16]
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	68da      	ldr	r2, [r3, #12]
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d203      	bcs.n	8006cbc <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8006cb8:	b29b      	uxth	r3, r3
 8006cba:	e002      	b.n	8006cc2 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	461a      	mov	r2, r3
 8006cc4:	6879      	ldr	r1, [r7, #4]
 8006cc6:	68f8      	ldr	r0, [r7, #12]
 8006cc8:	f001 f8d2 	bl	8007e70 <USBD_CtlContinueRx>
 8006ccc:	e038      	b.n	8006d40 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cd4:	691b      	ldr	r3, [r3, #16]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00a      	beq.n	8006cf0 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d105      	bne.n	8006cf0 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cea:	691b      	ldr	r3, [r3, #16]
 8006cec:	68f8      	ldr	r0, [r7, #12]
 8006cee:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f001 f8cf 	bl	8007e94 <USBD_CtlSendStatus>
 8006cf6:	e023      	b.n	8006d40 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006cfe:	2b05      	cmp	r3, #5
 8006d00:	d11e      	bne.n	8006d40 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 8006d0a:	2100      	movs	r1, #0
 8006d0c:	68f8      	ldr	r0, [r7, #12]
 8006d0e:	f001 fb85 	bl	800841c <USBD_LL_StallEP>
 8006d12:	e015      	b.n	8006d40 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d1a:	699b      	ldr	r3, [r3, #24]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d00d      	beq.n	8006d3c <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 8006d26:	2b03      	cmp	r3, #3
 8006d28:	d108      	bne.n	8006d3c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d30:	699b      	ldr	r3, [r3, #24]
 8006d32:	7afa      	ldrb	r2, [r7, #11]
 8006d34:	4611      	mov	r1, r2
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	4798      	blx	r3
 8006d3a:	e001      	b.n	8006d40 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006d3c:	2302      	movs	r3, #2
 8006d3e:	e000      	b.n	8006d42 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3718      	adds	r7, #24
 8006d46:	46bd      	mov	sp, r7
 8006d48:	bd80      	pop	{r7, pc}

08006d4a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006d4a:	b580      	push	{r7, lr}
 8006d4c:	b086      	sub	sp, #24
 8006d4e:	af00      	add	r7, sp, #0
 8006d50:	60f8      	str	r0, [r7, #12]
 8006d52:	460b      	mov	r3, r1
 8006d54:	607a      	str	r2, [r7, #4]
 8006d56:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8006d58:	7afb      	ldrb	r3, [r7, #11]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d17f      	bne.n	8006e5e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	3314      	adds	r3, #20
 8006d62:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006d6a:	2b02      	cmp	r3, #2
 8006d6c:	d15c      	bne.n	8006e28 <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	68da      	ldr	r2, [r3, #12]
 8006d72:	697b      	ldr	r3, [r7, #20]
 8006d74:	691b      	ldr	r3, [r3, #16]
 8006d76:	429a      	cmp	r2, r3
 8006d78:	d915      	bls.n	8006da6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 8006d7a:	697b      	ldr	r3, [r7, #20]
 8006d7c:	68da      	ldr	r2, [r3, #12]
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	691b      	ldr	r3, [r3, #16]
 8006d82:	1ad2      	subs	r2, r2, r3
 8006d84:	697b      	ldr	r3, [r7, #20]
 8006d86:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	b29b      	uxth	r3, r3
 8006d8e:	461a      	mov	r2, r3
 8006d90:	6879      	ldr	r1, [r7, #4]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f001 f85a 	bl	8007e4c <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006d98:	2300      	movs	r3, #0
 8006d9a:	2200      	movs	r2, #0
 8006d9c:	2100      	movs	r1, #0
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	f001 fbe8 	bl	8008574 <USBD_LL_PrepareReceive>
 8006da4:	e04e      	b.n	8006e44 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	6912      	ldr	r2, [r2, #16]
 8006dae:	fbb3 f1f2 	udiv	r1, r3, r2
 8006db2:	fb02 f201 	mul.w	r2, r2, r1
 8006db6:	1a9b      	subs	r3, r3, r2
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d11c      	bne.n	8006df6 <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	689a      	ldr	r2, [r3, #8]
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d316      	bcc.n	8006df6 <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 8006dc8:	697b      	ldr	r3, [r7, #20]
 8006dca:	689a      	ldr	r2, [r3, #8]
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006dd2:	429a      	cmp	r2, r3
 8006dd4:	d20f      	bcs.n	8006df6 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	2100      	movs	r1, #0
 8006dda:	68f8      	ldr	r0, [r7, #12]
 8006ddc:	f001 f836 	bl	8007e4c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006de8:	2300      	movs	r3, #0
 8006dea:	2200      	movs	r2, #0
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f001 fbc0 	bl	8008574 <USBD_LL_PrepareReceive>
 8006df4:	e026      	b.n	8006e44 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dfc:	68db      	ldr	r3, [r3, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d00a      	beq.n	8006e18 <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8006e08:	2b03      	cmp	r3, #3
 8006e0a:	d105      	bne.n	8006e18 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	68db      	ldr	r3, [r3, #12]
 8006e14:	68f8      	ldr	r0, [r7, #12]
 8006e16:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 8006e18:	2180      	movs	r1, #128	; 0x80
 8006e1a:	68f8      	ldr	r0, [r7, #12]
 8006e1c:	f001 fafe 	bl	800841c <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8006e20:	68f8      	ldr	r0, [r7, #12]
 8006e22:	f001 f84a 	bl	8007eba <USBD_CtlReceiveStatus>
 8006e26:	e00d      	b.n	8006e44 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006e2e:	2b04      	cmp	r3, #4
 8006e30:	d004      	beq.n	8006e3c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d103      	bne.n	8006e44 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8006e3c:	2180      	movs	r1, #128	; 0x80
 8006e3e:	68f8      	ldr	r0, [r7, #12]
 8006e40:	f001 faec 	bl	800841c <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d11d      	bne.n	8006e8a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8006e4e:	68f8      	ldr	r0, [r7, #12]
 8006e50:	f7ff fe81 	bl	8006b56 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	2200      	movs	r2, #0
 8006e58:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006e5c:	e015      	b.n	8006e8a <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e64:	695b      	ldr	r3, [r3, #20]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d00d      	beq.n	8006e86 <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8006e70:	2b03      	cmp	r3, #3
 8006e72:	d108      	bne.n	8006e86 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	695b      	ldr	r3, [r3, #20]
 8006e7c:	7afa      	ldrb	r2, [r7, #11]
 8006e7e:	4611      	mov	r1, r2
 8006e80:	68f8      	ldr	r0, [r7, #12]
 8006e82:	4798      	blx	r3
 8006e84:	e001      	b.n	8006e8a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8006e86:	2302      	movs	r3, #2
 8006e88:	e000      	b.n	8006e8c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3718      	adds	r7, #24
 8006e90:	46bd      	mov	sp, r7
 8006e92:	bd80      	pop	{r7, pc}

08006e94 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b082      	sub	sp, #8
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006e9c:	2340      	movs	r3, #64	; 0x40
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	2100      	movs	r1, #0
 8006ea2:	6878      	ldr	r0, [r7, #4]
 8006ea4:	f001 fa75 	bl	8008392 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2240      	movs	r2, #64	; 0x40
 8006eb4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006eb8:	2340      	movs	r3, #64	; 0x40
 8006eba:	2200      	movs	r2, #0
 8006ebc:	2180      	movs	r1, #128	; 0x80
 8006ebe:	6878      	ldr	r0, [r7, #4]
 8006ec0:	f001 fa67 	bl	8008392 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	2240      	movs	r2, #64	; 0x40
 8006ece:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2201      	movs	r2, #1
 8006ed4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d009      	beq.n	8006f0c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6852      	ldr	r2, [r2, #4]
 8006f04:	b2d2      	uxtb	r2, r2
 8006f06:	4611      	mov	r1, r2
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	4798      	blx	r3
  }

  return USBD_OK;
 8006f0c:	2300      	movs	r3, #0
}
 8006f0e:	4618      	mov	r0, r3
 8006f10:	3708      	adds	r7, #8
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}

08006f16 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006f16:	b480      	push	{r7}
 8006f18:	b083      	sub	sp, #12
 8006f1a:	af00      	add	r7, sp, #0
 8006f1c:	6078      	str	r0, [r7, #4]
 8006f1e:	460b      	mov	r3, r1
 8006f20:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	78fa      	ldrb	r2, [r7, #3]
 8006f26:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006f28:	2300      	movs	r3, #0
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	370c      	adds	r7, #12
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bc80      	pop	{r7}
 8006f32:	4770      	bx	lr

08006f34 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b083      	sub	sp, #12
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2204      	movs	r2, #4
 8006f4c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006f50:	2300      	movs	r3, #0
}
 8006f52:	4618      	mov	r0, r3
 8006f54:	370c      	adds	r7, #12
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bc80      	pop	{r7}
 8006f5a:	4770      	bx	lr

08006f5c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b083      	sub	sp, #12
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f6a:	2b04      	cmp	r3, #4
 8006f6c:	d105      	bne.n	8006f7a <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006f7a:	2300      	movs	r3, #0
}
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	370c      	adds	r7, #12
 8006f80:	46bd      	mov	sp, r7
 8006f82:	bc80      	pop	{r7}
 8006f84:	4770      	bx	lr

08006f86 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006f86:	b580      	push	{r7, lr}
 8006f88:	b082      	sub	sp, #8
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006f94:	2b03      	cmp	r3, #3
 8006f96:	d10b      	bne.n	8006fb0 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	69db      	ldr	r3, [r3, #28]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d005      	beq.n	8006fb0 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	6878      	ldr	r0, [r7, #4]
 8006fae:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3708      	adds	r7, #8
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
	...

08006fbc <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
 8006fc4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	781b      	ldrb	r3, [r3, #0]
 8006fce:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006fd2:	2b40      	cmp	r3, #64	; 0x40
 8006fd4:	d005      	beq.n	8006fe2 <USBD_StdDevReq+0x26>
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d84f      	bhi.n	800707a <USBD_StdDevReq+0xbe>
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d009      	beq.n	8006ff2 <USBD_StdDevReq+0x36>
 8006fde:	2b20      	cmp	r3, #32
 8006fe0:	d14b      	bne.n	800707a <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	6839      	ldr	r1, [r7, #0]
 8006fec:	6878      	ldr	r0, [r7, #4]
 8006fee:	4798      	blx	r3
      break;
 8006ff0:	e048      	b.n	8007084 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	785b      	ldrb	r3, [r3, #1]
 8006ff6:	2b09      	cmp	r3, #9
 8006ff8:	d839      	bhi.n	800706e <USBD_StdDevReq+0xb2>
 8006ffa:	a201      	add	r2, pc, #4	; (adr r2, 8007000 <USBD_StdDevReq+0x44>)
 8006ffc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007000:	08007051 	.word	0x08007051
 8007004:	08007065 	.word	0x08007065
 8007008:	0800706f 	.word	0x0800706f
 800700c:	0800705b 	.word	0x0800705b
 8007010:	0800706f 	.word	0x0800706f
 8007014:	08007033 	.word	0x08007033
 8007018:	08007029 	.word	0x08007029
 800701c:	0800706f 	.word	0x0800706f
 8007020:	08007047 	.word	0x08007047
 8007024:	0800703d 	.word	0x0800703d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9dc 	bl	80073e8 <USBD_GetDescriptor>
          break;
 8007030:	e022      	b.n	8007078 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007032:	6839      	ldr	r1, [r7, #0]
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f000 fb3f 	bl	80076b8 <USBD_SetAddress>
          break;
 800703a:	e01d      	b.n	8007078 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 800703c:	6839      	ldr	r1, [r7, #0]
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fb7e 	bl	8007740 <USBD_SetConfig>
          break;
 8007044:	e018      	b.n	8007078 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fc07 	bl	800785c <USBD_GetConfig>
          break;
 800704e:	e013      	b.n	8007078 <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007050:	6839      	ldr	r1, [r7, #0]
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f000 fc37 	bl	80078c6 <USBD_GetStatus>
          break;
 8007058:	e00e      	b.n	8007078 <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fc65 	bl	800792c <USBD_SetFeature>
          break;
 8007062:	e009      	b.n	8007078 <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007064:	6839      	ldr	r1, [r7, #0]
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 fc74 	bl	8007954 <USBD_ClrFeature>
          break;
 800706c:	e004      	b.n	8007078 <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 800706e:	6839      	ldr	r1, [r7, #0]
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fccc 	bl	8007a0e <USBD_CtlError>
          break;
 8007076:	bf00      	nop
      }
      break;
 8007078:	e004      	b.n	8007084 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 800707a:	6839      	ldr	r1, [r7, #0]
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fcc6 	bl	8007a0e <USBD_CtlError>
      break;
 8007082:	bf00      	nop
  }

  return ret;
 8007084:	7bfb      	ldrb	r3, [r7, #15]
}
 8007086:	4618      	mov	r0, r3
 8007088:	3710      	adds	r7, #16
 800708a:	46bd      	mov	sp, r7
 800708c:	bd80      	pop	{r7, pc}
 800708e:	bf00      	nop

08007090 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007090:	b580      	push	{r7, lr}
 8007092:	b084      	sub	sp, #16
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800709a:	2300      	movs	r3, #0
 800709c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80070a6:	2b40      	cmp	r3, #64	; 0x40
 80070a8:	d005      	beq.n	80070b6 <USBD_StdItfReq+0x26>
 80070aa:	2b40      	cmp	r3, #64	; 0x40
 80070ac:	d82e      	bhi.n	800710c <USBD_StdItfReq+0x7c>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d001      	beq.n	80070b6 <USBD_StdItfReq+0x26>
 80070b2:	2b20      	cmp	r3, #32
 80070b4:	d12a      	bne.n	800710c <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80070bc:	3b01      	subs	r3, #1
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d81d      	bhi.n	80070fe <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	889b      	ldrh	r3, [r3, #4]
 80070c6:	b2db      	uxtb	r3, r3
 80070c8:	2b01      	cmp	r3, #1
 80070ca:	d813      	bhi.n	80070f4 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070d2:	689b      	ldr	r3, [r3, #8]
 80070d4:	6839      	ldr	r1, [r7, #0]
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	4798      	blx	r3
 80070da:	4603      	mov	r3, r0
 80070dc:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	88db      	ldrh	r3, [r3, #6]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d110      	bne.n	8007108 <USBD_StdItfReq+0x78>
 80070e6:	7bfb      	ldrb	r3, [r7, #15]
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d10d      	bne.n	8007108 <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 fed1 	bl	8007e94 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80070f2:	e009      	b.n	8007108 <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 80070f4:	6839      	ldr	r1, [r7, #0]
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fc89 	bl	8007a0e <USBD_CtlError>
          break;
 80070fc:	e004      	b.n	8007108 <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fc84 	bl	8007a0e <USBD_CtlError>
          break;
 8007106:	e000      	b.n	800710a <USBD_StdItfReq+0x7a>
          break;
 8007108:	bf00      	nop
      }
      break;
 800710a:	e004      	b.n	8007116 <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fc7d 	bl	8007a0e <USBD_CtlError>
      break;
 8007114:	bf00      	nop
  }

  return USBD_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3710      	adds	r7, #16
 800711c:	46bd      	mov	sp, r7
 800711e:	bd80      	pop	{r7, pc}

08007120 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007120:	b580      	push	{r7, lr}
 8007122:	b084      	sub	sp, #16
 8007124:	af00      	add	r7, sp, #0
 8007126:	6078      	str	r0, [r7, #4]
 8007128:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 800712e:	683b      	ldr	r3, [r7, #0]
 8007130:	889b      	ldrh	r3, [r3, #4]
 8007132:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007134:	683b      	ldr	r3, [r7, #0]
 8007136:	781b      	ldrb	r3, [r3, #0]
 8007138:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800713c:	2b40      	cmp	r3, #64	; 0x40
 800713e:	d007      	beq.n	8007150 <USBD_StdEPReq+0x30>
 8007140:	2b40      	cmp	r3, #64	; 0x40
 8007142:	f200 8146 	bhi.w	80073d2 <USBD_StdEPReq+0x2b2>
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <USBD_StdEPReq+0x40>
 800714a:	2b20      	cmp	r3, #32
 800714c:	f040 8141 	bne.w	80073d2 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	6839      	ldr	r1, [r7, #0]
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	4798      	blx	r3
      break;
 800715e:	e13d      	b.n	80073dc <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007160:	683b      	ldr	r3, [r7, #0]
 8007162:	781b      	ldrb	r3, [r3, #0]
 8007164:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007168:	2b20      	cmp	r3, #32
 800716a:	d10a      	bne.n	8007182 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007172:	689b      	ldr	r3, [r3, #8]
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	4798      	blx	r3
 800717a:	4603      	mov	r3, r0
 800717c:	73fb      	strb	r3, [r7, #15]

        return ret;
 800717e:	7bfb      	ldrb	r3, [r7, #15]
 8007180:	e12d      	b.n	80073de <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	785b      	ldrb	r3, [r3, #1]
 8007186:	2b03      	cmp	r3, #3
 8007188:	d007      	beq.n	800719a <USBD_StdEPReq+0x7a>
 800718a:	2b03      	cmp	r3, #3
 800718c:	f300 811b 	bgt.w	80073c6 <USBD_StdEPReq+0x2a6>
 8007190:	2b00      	cmp	r3, #0
 8007192:	d072      	beq.n	800727a <USBD_StdEPReq+0x15a>
 8007194:	2b01      	cmp	r3, #1
 8007196:	d03a      	beq.n	800720e <USBD_StdEPReq+0xee>
 8007198:	e115      	b.n	80073c6 <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	2b02      	cmp	r3, #2
 80071a2:	d002      	beq.n	80071aa <USBD_StdEPReq+0x8a>
 80071a4:	2b03      	cmp	r3, #3
 80071a6:	d015      	beq.n	80071d4 <USBD_StdEPReq+0xb4>
 80071a8:	e02b      	b.n	8007202 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80071aa:	7bbb      	ldrb	r3, [r7, #14]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d00c      	beq.n	80071ca <USBD_StdEPReq+0xaa>
 80071b0:	7bbb      	ldrb	r3, [r7, #14]
 80071b2:	2b80      	cmp	r3, #128	; 0x80
 80071b4:	d009      	beq.n	80071ca <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80071b6:	7bbb      	ldrb	r3, [r7, #14]
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f001 f92e 	bl	800841c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80071c0:	2180      	movs	r1, #128	; 0x80
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f001 f92a 	bl	800841c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80071c8:	e020      	b.n	800720c <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 80071ca:	6839      	ldr	r1, [r7, #0]
 80071cc:	6878      	ldr	r0, [r7, #4]
 80071ce:	f000 fc1e 	bl	8007a0e <USBD_CtlError>
              break;
 80071d2:	e01b      	b.n	800720c <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	885b      	ldrh	r3, [r3, #2]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d10e      	bne.n	80071fa <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 80071dc:	7bbb      	ldrb	r3, [r7, #14]
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d00b      	beq.n	80071fa <USBD_StdEPReq+0xda>
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	2b80      	cmp	r3, #128	; 0x80
 80071e6:	d008      	beq.n	80071fa <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	88db      	ldrh	r3, [r3, #6]
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d104      	bne.n	80071fa <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 80071f0:	7bbb      	ldrb	r3, [r7, #14]
 80071f2:	4619      	mov	r1, r3
 80071f4:	6878      	ldr	r0, [r7, #4]
 80071f6:	f001 f911 	bl	800841c <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 80071fa:	6878      	ldr	r0, [r7, #4]
 80071fc:	f000 fe4a 	bl	8007e94 <USBD_CtlSendStatus>

              break;
 8007200:	e004      	b.n	800720c <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007202:	6839      	ldr	r1, [r7, #0]
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 fc02 	bl	8007a0e <USBD_CtlError>
              break;
 800720a:	bf00      	nop
          }
          break;
 800720c:	e0e0      	b.n	80073d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007214:	2b02      	cmp	r3, #2
 8007216:	d002      	beq.n	800721e <USBD_StdEPReq+0xfe>
 8007218:	2b03      	cmp	r3, #3
 800721a:	d015      	beq.n	8007248 <USBD_StdEPReq+0x128>
 800721c:	e026      	b.n	800726c <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800721e:	7bbb      	ldrb	r3, [r7, #14]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d00c      	beq.n	800723e <USBD_StdEPReq+0x11e>
 8007224:	7bbb      	ldrb	r3, [r7, #14]
 8007226:	2b80      	cmp	r3, #128	; 0x80
 8007228:	d009      	beq.n	800723e <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 800722a:	7bbb      	ldrb	r3, [r7, #14]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f001 f8f4 	bl	800841c <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007234:	2180      	movs	r1, #128	; 0x80
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f001 f8f0 	bl	800841c <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800723c:	e01c      	b.n	8007278 <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 800723e:	6839      	ldr	r1, [r7, #0]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f000 fbe4 	bl	8007a0e <USBD_CtlError>
              break;
 8007246:	e017      	b.n	8007278 <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	885b      	ldrh	r3, [r3, #2]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d112      	bne.n	8007276 <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007250:	7bbb      	ldrb	r3, [r7, #14]
 8007252:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007256:	2b00      	cmp	r3, #0
 8007258:	d004      	beq.n	8007264 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 800725a:	7bbb      	ldrb	r3, [r7, #14]
 800725c:	4619      	mov	r1, r3
 800725e:	6878      	ldr	r0, [r7, #4]
 8007260:	f001 f8fb 	bl	800845a <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007264:	6878      	ldr	r0, [r7, #4]
 8007266:	f000 fe15 	bl	8007e94 <USBD_CtlSendStatus>
              }
              break;
 800726a:	e004      	b.n	8007276 <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 800726c:	6839      	ldr	r1, [r7, #0]
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f000 fbcd 	bl	8007a0e <USBD_CtlError>
              break;
 8007274:	e000      	b.n	8007278 <USBD_StdEPReq+0x158>
              break;
 8007276:	bf00      	nop
          }
          break;
 8007278:	e0aa      	b.n	80073d0 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007280:	2b02      	cmp	r3, #2
 8007282:	d002      	beq.n	800728a <USBD_StdEPReq+0x16a>
 8007284:	2b03      	cmp	r3, #3
 8007286:	d032      	beq.n	80072ee <USBD_StdEPReq+0x1ce>
 8007288:	e097      	b.n	80073ba <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800728a:	7bbb      	ldrb	r3, [r7, #14]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d007      	beq.n	80072a0 <USBD_StdEPReq+0x180>
 8007290:	7bbb      	ldrb	r3, [r7, #14]
 8007292:	2b80      	cmp	r3, #128	; 0x80
 8007294:	d004      	beq.n	80072a0 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007296:	6839      	ldr	r1, [r7, #0]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fbb8 	bl	8007a0e <USBD_CtlError>
                break;
 800729e:	e091      	b.n	80073c4 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	da0b      	bge.n	80072c0 <USBD_StdEPReq+0x1a0>
 80072a8:	7bbb      	ldrb	r3, [r7, #14]
 80072aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80072ae:	4613      	mov	r3, r2
 80072b0:	009b      	lsls	r3, r3, #2
 80072b2:	4413      	add	r3, r2
 80072b4:	009b      	lsls	r3, r3, #2
 80072b6:	3310      	adds	r3, #16
 80072b8:	687a      	ldr	r2, [r7, #4]
 80072ba:	4413      	add	r3, r2
 80072bc:	3304      	adds	r3, #4
 80072be:	e00b      	b.n	80072d8 <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80072c0:	7bbb      	ldrb	r3, [r7, #14]
 80072c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80072c6:	4613      	mov	r3, r2
 80072c8:	009b      	lsls	r3, r3, #2
 80072ca:	4413      	add	r3, r2
 80072cc:	009b      	lsls	r3, r3, #2
 80072ce:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80072d2:	687a      	ldr	r2, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	3304      	adds	r3, #4
 80072d8:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80072da:	68bb      	ldr	r3, [r7, #8]
 80072dc:	2200      	movs	r2, #0
 80072de:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	2202      	movs	r2, #2
 80072e4:	4619      	mov	r1, r3
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	f000 fd94 	bl	8007e14 <USBD_CtlSendData>
              break;
 80072ec:	e06a      	b.n	80073c4 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80072ee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	da11      	bge.n	800731a <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80072f6:	7bbb      	ldrb	r3, [r7, #14]
 80072f8:	f003 020f 	and.w	r2, r3, #15
 80072fc:	6879      	ldr	r1, [r7, #4]
 80072fe:	4613      	mov	r3, r2
 8007300:	009b      	lsls	r3, r3, #2
 8007302:	4413      	add	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	440b      	add	r3, r1
 8007308:	3318      	adds	r3, #24
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d117      	bne.n	8007340 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007310:	6839      	ldr	r1, [r7, #0]
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fb7b 	bl	8007a0e <USBD_CtlError>
                  break;
 8007318:	e054      	b.n	80073c4 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800731a:	7bbb      	ldrb	r3, [r7, #14]
 800731c:	f003 020f 	and.w	r2, r3, #15
 8007320:	6879      	ldr	r1, [r7, #4]
 8007322:	4613      	mov	r3, r2
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d104      	bne.n	8007340 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007336:	6839      	ldr	r1, [r7, #0]
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f000 fb68 	bl	8007a0e <USBD_CtlError>
                  break;
 800733e:	e041      	b.n	80073c4 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007340:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007344:	2b00      	cmp	r3, #0
 8007346:	da0b      	bge.n	8007360 <USBD_StdEPReq+0x240>
 8007348:	7bbb      	ldrb	r3, [r7, #14]
 800734a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800734e:	4613      	mov	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	4413      	add	r3, r2
 8007354:	009b      	lsls	r3, r3, #2
 8007356:	3310      	adds	r3, #16
 8007358:	687a      	ldr	r2, [r7, #4]
 800735a:	4413      	add	r3, r2
 800735c:	3304      	adds	r3, #4
 800735e:	e00b      	b.n	8007378 <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007360:	7bbb      	ldrb	r3, [r7, #14]
 8007362:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007366:	4613      	mov	r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	4413      	add	r3, r2
 800736c:	009b      	lsls	r3, r3, #2
 800736e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007372:	687a      	ldr	r2, [r7, #4]
 8007374:	4413      	add	r3, r2
 8007376:	3304      	adds	r3, #4
 8007378:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800737a:	7bbb      	ldrb	r3, [r7, #14]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d002      	beq.n	8007386 <USBD_StdEPReq+0x266>
 8007380:	7bbb      	ldrb	r3, [r7, #14]
 8007382:	2b80      	cmp	r3, #128	; 0x80
 8007384:	d103      	bne.n	800738e <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	2200      	movs	r2, #0
 800738a:	601a      	str	r2, [r3, #0]
 800738c:	e00e      	b.n	80073ac <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 800738e:	7bbb      	ldrb	r3, [r7, #14]
 8007390:	4619      	mov	r1, r3
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f001 f880 	bl	8008498 <USBD_LL_IsStallEP>
 8007398:	4603      	mov	r3, r0
 800739a:	2b00      	cmp	r3, #0
 800739c:	d003      	beq.n	80073a6 <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	2201      	movs	r2, #1
 80073a2:	601a      	str	r2, [r3, #0]
 80073a4:	e002      	b.n	80073ac <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 80073a6:	68bb      	ldr	r3, [r7, #8]
 80073a8:	2200      	movs	r2, #0
 80073aa:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 80073ac:	68bb      	ldr	r3, [r7, #8]
 80073ae:	2202      	movs	r2, #2
 80073b0:	4619      	mov	r1, r3
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 fd2e 	bl	8007e14 <USBD_CtlSendData>
              break;
 80073b8:	e004      	b.n	80073c4 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 80073ba:	6839      	ldr	r1, [r7, #0]
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fb26 	bl	8007a0e <USBD_CtlError>
              break;
 80073c2:	bf00      	nop
          }
          break;
 80073c4:	e004      	b.n	80073d0 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 80073c6:	6839      	ldr	r1, [r7, #0]
 80073c8:	6878      	ldr	r0, [r7, #4]
 80073ca:	f000 fb20 	bl	8007a0e <USBD_CtlError>
          break;
 80073ce:	bf00      	nop
      }
      break;
 80073d0:	e004      	b.n	80073dc <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 80073d2:	6839      	ldr	r1, [r7, #0]
 80073d4:	6878      	ldr	r0, [r7, #4]
 80073d6:	f000 fb1a 	bl	8007a0e <USBD_CtlError>
      break;
 80073da:	bf00      	nop
  }

  return ret;
 80073dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3710      	adds	r7, #16
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
	...

080073e8 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b084      	sub	sp, #16
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80073f2:	2300      	movs	r3, #0
 80073f4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80073f6:	2300      	movs	r3, #0
 80073f8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80073fe:	683b      	ldr	r3, [r7, #0]
 8007400:	885b      	ldrh	r3, [r3, #2]
 8007402:	0a1b      	lsrs	r3, r3, #8
 8007404:	b29b      	uxth	r3, r3
 8007406:	3b01      	subs	r3, #1
 8007408:	2b06      	cmp	r3, #6
 800740a:	f200 8128 	bhi.w	800765e <USBD_GetDescriptor+0x276>
 800740e:	a201      	add	r2, pc, #4	; (adr r2, 8007414 <USBD_GetDescriptor+0x2c>)
 8007410:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007414:	08007431 	.word	0x08007431
 8007418:	08007449 	.word	0x08007449
 800741c:	08007489 	.word	0x08007489
 8007420:	0800765f 	.word	0x0800765f
 8007424:	0800765f 	.word	0x0800765f
 8007428:	080075ff 	.word	0x080075ff
 800742c:	0800762b 	.word	0x0800762b
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	687a      	ldr	r2, [r7, #4]
 800743a:	7c12      	ldrb	r2, [r2, #16]
 800743c:	f107 0108 	add.w	r1, r7, #8
 8007440:	4610      	mov	r0, r2
 8007442:	4798      	blx	r3
 8007444:	60f8      	str	r0, [r7, #12]
      break;
 8007446:	e112      	b.n	800766e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	7c1b      	ldrb	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d10d      	bne.n	800746c <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007458:	f107 0208 	add.w	r2, r7, #8
 800745c:	4610      	mov	r0, r2
 800745e:	4798      	blx	r3
 8007460:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3301      	adds	r3, #1
 8007466:	2202      	movs	r2, #2
 8007468:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800746a:	e100      	b.n	800766e <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007472:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007474:	f107 0208 	add.w	r2, r7, #8
 8007478:	4610      	mov	r0, r2
 800747a:	4798      	blx	r3
 800747c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	2202      	movs	r2, #2
 8007484:	701a      	strb	r2, [r3, #0]
      break;
 8007486:	e0f2      	b.n	800766e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007488:	683b      	ldr	r3, [r7, #0]
 800748a:	885b      	ldrh	r3, [r3, #2]
 800748c:	b2db      	uxtb	r3, r3
 800748e:	2b05      	cmp	r3, #5
 8007490:	f200 80ac 	bhi.w	80075ec <USBD_GetDescriptor+0x204>
 8007494:	a201      	add	r2, pc, #4	; (adr r2, 800749c <USBD_GetDescriptor+0xb4>)
 8007496:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800749a:	bf00      	nop
 800749c:	080074b5 	.word	0x080074b5
 80074a0:	080074e9 	.word	0x080074e9
 80074a4:	0800751d 	.word	0x0800751d
 80074a8:	08007551 	.word	0x08007551
 80074ac:	08007585 	.word	0x08007585
 80074b0:	080075b9 	.word	0x080075b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ba:	685b      	ldr	r3, [r3, #4]
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d00b      	beq.n	80074d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074c6:	685b      	ldr	r3, [r3, #4]
 80074c8:	687a      	ldr	r2, [r7, #4]
 80074ca:	7c12      	ldrb	r2, [r2, #16]
 80074cc:	f107 0108 	add.w	r1, r7, #8
 80074d0:	4610      	mov	r0, r2
 80074d2:	4798      	blx	r3
 80074d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80074d6:	e091      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80074d8:	6839      	ldr	r1, [r7, #0]
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 fa97 	bl	8007a0e <USBD_CtlError>
            err++;
 80074e0:	7afb      	ldrb	r3, [r7, #11]
 80074e2:	3301      	adds	r3, #1
 80074e4:	72fb      	strb	r3, [r7, #11]
          break;
 80074e6:	e089      	b.n	80075fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074ee:	689b      	ldr	r3, [r3, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d00b      	beq.n	800750c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	687a      	ldr	r2, [r7, #4]
 80074fe:	7c12      	ldrb	r2, [r2, #16]
 8007500:	f107 0108 	add.w	r1, r7, #8
 8007504:	4610      	mov	r0, r2
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800750a:	e077      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800750c:	6839      	ldr	r1, [r7, #0]
 800750e:	6878      	ldr	r0, [r7, #4]
 8007510:	f000 fa7d 	bl	8007a0e <USBD_CtlError>
            err++;
 8007514:	7afb      	ldrb	r3, [r7, #11]
 8007516:	3301      	adds	r3, #1
 8007518:	72fb      	strb	r3, [r7, #11]
          break;
 800751a:	e06f      	b.n	80075fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007522:	68db      	ldr	r3, [r3, #12]
 8007524:	2b00      	cmp	r3, #0
 8007526:	d00b      	beq.n	8007540 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800752e:	68db      	ldr	r3, [r3, #12]
 8007530:	687a      	ldr	r2, [r7, #4]
 8007532:	7c12      	ldrb	r2, [r2, #16]
 8007534:	f107 0108 	add.w	r1, r7, #8
 8007538:	4610      	mov	r0, r2
 800753a:	4798      	blx	r3
 800753c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800753e:	e05d      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007540:	6839      	ldr	r1, [r7, #0]
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 fa63 	bl	8007a0e <USBD_CtlError>
            err++;
 8007548:	7afb      	ldrb	r3, [r7, #11]
 800754a:	3301      	adds	r3, #1
 800754c:	72fb      	strb	r3, [r7, #11]
          break;
 800754e:	e055      	b.n	80075fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007556:	691b      	ldr	r3, [r3, #16]
 8007558:	2b00      	cmp	r3, #0
 800755a:	d00b      	beq.n	8007574 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	687a      	ldr	r2, [r7, #4]
 8007566:	7c12      	ldrb	r2, [r2, #16]
 8007568:	f107 0108 	add.w	r1, r7, #8
 800756c:	4610      	mov	r0, r2
 800756e:	4798      	blx	r3
 8007570:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007572:	e043      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007574:	6839      	ldr	r1, [r7, #0]
 8007576:	6878      	ldr	r0, [r7, #4]
 8007578:	f000 fa49 	bl	8007a0e <USBD_CtlError>
            err++;
 800757c:	7afb      	ldrb	r3, [r7, #11]
 800757e:	3301      	adds	r3, #1
 8007580:	72fb      	strb	r3, [r7, #11]
          break;
 8007582:	e03b      	b.n	80075fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800758a:	695b      	ldr	r3, [r3, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00b      	beq.n	80075a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007596:	695b      	ldr	r3, [r3, #20]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	7c12      	ldrb	r2, [r2, #16]
 800759c:	f107 0108 	add.w	r1, r7, #8
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
 80075a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075a6:	e029      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075a8:	6839      	ldr	r1, [r7, #0]
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 fa2f 	bl	8007a0e <USBD_CtlError>
            err++;
 80075b0:	7afb      	ldrb	r3, [r7, #11]
 80075b2:	3301      	adds	r3, #1
 80075b4:	72fb      	strb	r3, [r7, #11]
          break;
 80075b6:	e021      	b.n	80075fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d00b      	beq.n	80075dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	687a      	ldr	r2, [r7, #4]
 80075ce:	7c12      	ldrb	r2, [r2, #16]
 80075d0:	f107 0108 	add.w	r1, r7, #8
 80075d4:	4610      	mov	r0, r2
 80075d6:	4798      	blx	r3
 80075d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80075da:	e00f      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80075dc:	6839      	ldr	r1, [r7, #0]
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 fa15 	bl	8007a0e <USBD_CtlError>
            err++;
 80075e4:	7afb      	ldrb	r3, [r7, #11]
 80075e6:	3301      	adds	r3, #1
 80075e8:	72fb      	strb	r3, [r7, #11]
          break;
 80075ea:	e007      	b.n	80075fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80075ec:	6839      	ldr	r1, [r7, #0]
 80075ee:	6878      	ldr	r0, [r7, #4]
 80075f0:	f000 fa0d 	bl	8007a0e <USBD_CtlError>
          err++;
 80075f4:	7afb      	ldrb	r3, [r7, #11]
 80075f6:	3301      	adds	r3, #1
 80075f8:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 80075fa:	e038      	b.n	800766e <USBD_GetDescriptor+0x286>
 80075fc:	e037      	b.n	800766e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	7c1b      	ldrb	r3, [r3, #16]
 8007602:	2b00      	cmp	r3, #0
 8007604:	d109      	bne.n	800761a <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800760c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800760e:	f107 0208 	add.w	r2, r7, #8
 8007612:	4610      	mov	r0, r2
 8007614:	4798      	blx	r3
 8007616:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007618:	e029      	b.n	800766e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800761a:	6839      	ldr	r1, [r7, #0]
 800761c:	6878      	ldr	r0, [r7, #4]
 800761e:	f000 f9f6 	bl	8007a0e <USBD_CtlError>
        err++;
 8007622:	7afb      	ldrb	r3, [r7, #11]
 8007624:	3301      	adds	r3, #1
 8007626:	72fb      	strb	r3, [r7, #11]
      break;
 8007628:	e021      	b.n	800766e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	7c1b      	ldrb	r3, [r3, #16]
 800762e:	2b00      	cmp	r3, #0
 8007630:	d10d      	bne.n	800764e <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800763a:	f107 0208 	add.w	r2, r7, #8
 800763e:	4610      	mov	r0, r2
 8007640:	4798      	blx	r3
 8007642:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	3301      	adds	r3, #1
 8007648:	2207      	movs	r2, #7
 800764a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800764c:	e00f      	b.n	800766e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800764e:	6839      	ldr	r1, [r7, #0]
 8007650:	6878      	ldr	r0, [r7, #4]
 8007652:	f000 f9dc 	bl	8007a0e <USBD_CtlError>
        err++;
 8007656:	7afb      	ldrb	r3, [r7, #11]
 8007658:	3301      	adds	r3, #1
 800765a:	72fb      	strb	r3, [r7, #11]
      break;
 800765c:	e007      	b.n	800766e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800765e:	6839      	ldr	r1, [r7, #0]
 8007660:	6878      	ldr	r0, [r7, #4]
 8007662:	f000 f9d4 	bl	8007a0e <USBD_CtlError>
      err++;
 8007666:	7afb      	ldrb	r3, [r7, #11]
 8007668:	3301      	adds	r3, #1
 800766a:	72fb      	strb	r3, [r7, #11]
      break;
 800766c:	bf00      	nop
  }

  if (err != 0U)
 800766e:	7afb      	ldrb	r3, [r7, #11]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d11c      	bne.n	80076ae <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8007674:	893b      	ldrh	r3, [r7, #8]
 8007676:	2b00      	cmp	r3, #0
 8007678:	d011      	beq.n	800769e <USBD_GetDescriptor+0x2b6>
 800767a:	683b      	ldr	r3, [r7, #0]
 800767c:	88db      	ldrh	r3, [r3, #6]
 800767e:	2b00      	cmp	r3, #0
 8007680:	d00d      	beq.n	800769e <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 8007682:	683b      	ldr	r3, [r7, #0]
 8007684:	88da      	ldrh	r2, [r3, #6]
 8007686:	893b      	ldrh	r3, [r7, #8]
 8007688:	4293      	cmp	r3, r2
 800768a:	bf28      	it	cs
 800768c:	4613      	movcs	r3, r2
 800768e:	b29b      	uxth	r3, r3
 8007690:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007692:	893b      	ldrh	r3, [r7, #8]
 8007694:	461a      	mov	r2, r3
 8007696:	68f9      	ldr	r1, [r7, #12]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 fbbb 	bl	8007e14 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	88db      	ldrh	r3, [r3, #6]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d104      	bne.n	80076b0 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 fbf4 	bl	8007e94 <USBD_CtlSendStatus>
 80076ac:	e000      	b.n	80076b0 <USBD_GetDescriptor+0x2c8>
    return;
 80076ae:	bf00      	nop
    }
  }
}
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
 80076b6:	bf00      	nop

080076b8 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b084      	sub	sp, #16
 80076bc:	af00      	add	r7, sp, #0
 80076be:	6078      	str	r0, [r7, #4]
 80076c0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80076c2:	683b      	ldr	r3, [r7, #0]
 80076c4:	889b      	ldrh	r3, [r3, #4]
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d130      	bne.n	800772c <USBD_SetAddress+0x74>
 80076ca:	683b      	ldr	r3, [r7, #0]
 80076cc:	88db      	ldrh	r3, [r3, #6]
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d12c      	bne.n	800772c <USBD_SetAddress+0x74>
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	885b      	ldrh	r3, [r3, #2]
 80076d6:	2b7f      	cmp	r3, #127	; 0x7f
 80076d8:	d828      	bhi.n	800772c <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80076da:	683b      	ldr	r3, [r7, #0]
 80076dc:	885b      	ldrh	r3, [r3, #2]
 80076de:	b2db      	uxtb	r3, r3
 80076e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80076e4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80076ec:	2b03      	cmp	r3, #3
 80076ee:	d104      	bne.n	80076fa <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 80076f0:	6839      	ldr	r1, [r7, #0]
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f98b 	bl	8007a0e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80076f8:	e01d      	b.n	8007736 <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	7bfa      	ldrb	r2, [r7, #15]
 80076fe:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007702:	7bfb      	ldrb	r3, [r7, #15]
 8007704:	4619      	mov	r1, r3
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fef2 	bl	80084f0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800770c:	6878      	ldr	r0, [r7, #4]
 800770e:	f000 fbc1 	bl	8007e94 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007712:	7bfb      	ldrb	r3, [r7, #15]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d004      	beq.n	8007722 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	2202      	movs	r2, #2
 800771c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007720:	e009      	b.n	8007736 <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2201      	movs	r2, #1
 8007726:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800772a:	e004      	b.n	8007736 <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800772c:	6839      	ldr	r1, [r7, #0]
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f96d 	bl	8007a0e <USBD_CtlError>
  }
}
 8007734:	bf00      	nop
 8007736:	bf00      	nop
 8007738:	3710      	adds	r7, #16
 800773a:	46bd      	mov	sp, r7
 800773c:	bd80      	pop	{r7, pc}
	...

08007740 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007740:	b580      	push	{r7, lr}
 8007742:	b082      	sub	sp, #8
 8007744:	af00      	add	r7, sp, #0
 8007746:	6078      	str	r0, [r7, #4]
 8007748:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	885b      	ldrh	r3, [r3, #2]
 800774e:	b2da      	uxtb	r2, r3
 8007750:	4b41      	ldr	r3, [pc, #260]	; (8007858 <USBD_SetConfig+0x118>)
 8007752:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007754:	4b40      	ldr	r3, [pc, #256]	; (8007858 <USBD_SetConfig+0x118>)
 8007756:	781b      	ldrb	r3, [r3, #0]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d904      	bls.n	8007766 <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800775c:	6839      	ldr	r1, [r7, #0]
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 f955 	bl	8007a0e <USBD_CtlError>
 8007764:	e075      	b.n	8007852 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800776c:	2b02      	cmp	r3, #2
 800776e:	d002      	beq.n	8007776 <USBD_SetConfig+0x36>
 8007770:	2b03      	cmp	r3, #3
 8007772:	d023      	beq.n	80077bc <USBD_SetConfig+0x7c>
 8007774:	e062      	b.n	800783c <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8007776:	4b38      	ldr	r3, [pc, #224]	; (8007858 <USBD_SetConfig+0x118>)
 8007778:	781b      	ldrb	r3, [r3, #0]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d01a      	beq.n	80077b4 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 800777e:	4b36      	ldr	r3, [pc, #216]	; (8007858 <USBD_SetConfig+0x118>)
 8007780:	781b      	ldrb	r3, [r3, #0]
 8007782:	461a      	mov	r2, r3
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2203      	movs	r2, #3
 800778c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007790:	4b31      	ldr	r3, [pc, #196]	; (8007858 <USBD_SetConfig+0x118>)
 8007792:	781b      	ldrb	r3, [r3, #0]
 8007794:	4619      	mov	r1, r3
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f7ff f9e7 	bl	8006b6a <USBD_SetClassConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	2b02      	cmp	r3, #2
 80077a0:	d104      	bne.n	80077ac <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 f932 	bl	8007a0e <USBD_CtlError>
            return;
 80077aa:	e052      	b.n	8007852 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fb71 	bl	8007e94 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077b2:	e04e      	b.n	8007852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 fb6d 	bl	8007e94 <USBD_CtlSendStatus>
        break;
 80077ba:	e04a      	b.n	8007852 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80077bc:	4b26      	ldr	r3, [pc, #152]	; (8007858 <USBD_SetConfig+0x118>)
 80077be:	781b      	ldrb	r3, [r3, #0]
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d112      	bne.n	80077ea <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2202      	movs	r2, #2
 80077c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80077cc:	4b22      	ldr	r3, [pc, #136]	; (8007858 <USBD_SetConfig+0x118>)
 80077ce:	781b      	ldrb	r3, [r3, #0]
 80077d0:	461a      	mov	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80077d6:	4b20      	ldr	r3, [pc, #128]	; (8007858 <USBD_SetConfig+0x118>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	4619      	mov	r1, r3
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff f9e3 	bl	8006ba8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fb56 	bl	8007e94 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80077e8:	e033      	b.n	8007852 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 80077ea:	4b1b      	ldr	r3, [pc, #108]	; (8007858 <USBD_SetConfig+0x118>)
 80077ec:	781b      	ldrb	r3, [r3, #0]
 80077ee:	461a      	mov	r2, r3
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	685b      	ldr	r3, [r3, #4]
 80077f4:	429a      	cmp	r2, r3
 80077f6:	d01d      	beq.n	8007834 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	b2db      	uxtb	r3, r3
 80077fe:	4619      	mov	r1, r3
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f7ff f9d1 	bl	8006ba8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8007806:	4b14      	ldr	r3, [pc, #80]	; (8007858 <USBD_SetConfig+0x118>)
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	461a      	mov	r2, r3
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8007810:	4b11      	ldr	r3, [pc, #68]	; (8007858 <USBD_SetConfig+0x118>)
 8007812:	781b      	ldrb	r3, [r3, #0]
 8007814:	4619      	mov	r1, r3
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	f7ff f9a7 	bl	8006b6a <USBD_SetClassConfig>
 800781c:	4603      	mov	r3, r0
 800781e:	2b02      	cmp	r3, #2
 8007820:	d104      	bne.n	800782c <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8007822:	6839      	ldr	r1, [r7, #0]
 8007824:	6878      	ldr	r0, [r7, #4]
 8007826:	f000 f8f2 	bl	8007a0e <USBD_CtlError>
            return;
 800782a:	e012      	b.n	8007852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f000 fb31 	bl	8007e94 <USBD_CtlSendStatus>
        break;
 8007832:	e00e      	b.n	8007852 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fb2d 	bl	8007e94 <USBD_CtlSendStatus>
        break;
 800783a:	e00a      	b.n	8007852 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 800783c:	6839      	ldr	r1, [r7, #0]
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f8e5 	bl	8007a0e <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8007844:	4b04      	ldr	r3, [pc, #16]	; (8007858 <USBD_SetConfig+0x118>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	4619      	mov	r1, r3
 800784a:	6878      	ldr	r0, [r7, #4]
 800784c:	f7ff f9ac 	bl	8006ba8 <USBD_ClrClassConfig>
        break;
 8007850:	bf00      	nop
    }
  }
}
 8007852:	3708      	adds	r7, #8
 8007854:	46bd      	mov	sp, r7
 8007856:	bd80      	pop	{r7, pc}
 8007858:	200002e8 	.word	0x200002e8

0800785c <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800785c:	b580      	push	{r7, lr}
 800785e:	b082      	sub	sp, #8
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	88db      	ldrh	r3, [r3, #6]
 800786a:	2b01      	cmp	r3, #1
 800786c:	d004      	beq.n	8007878 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800786e:	6839      	ldr	r1, [r7, #0]
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 f8cc 	bl	8007a0e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007876:	e022      	b.n	80078be <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800787e:	2b02      	cmp	r3, #2
 8007880:	dc02      	bgt.n	8007888 <USBD_GetConfig+0x2c>
 8007882:	2b00      	cmp	r3, #0
 8007884:	dc03      	bgt.n	800788e <USBD_GetConfig+0x32>
 8007886:	e015      	b.n	80078b4 <USBD_GetConfig+0x58>
 8007888:	2b03      	cmp	r3, #3
 800788a:	d00b      	beq.n	80078a4 <USBD_GetConfig+0x48>
 800788c:	e012      	b.n	80078b4 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2200      	movs	r2, #0
 8007892:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	3308      	adds	r3, #8
 8007898:	2201      	movs	r2, #1
 800789a:	4619      	mov	r1, r3
 800789c:	6878      	ldr	r0, [r7, #4]
 800789e:	f000 fab9 	bl	8007e14 <USBD_CtlSendData>
        break;
 80078a2:	e00c      	b.n	80078be <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	3304      	adds	r3, #4
 80078a8:	2201      	movs	r2, #1
 80078aa:	4619      	mov	r1, r3
 80078ac:	6878      	ldr	r0, [r7, #4]
 80078ae:	f000 fab1 	bl	8007e14 <USBD_CtlSendData>
        break;
 80078b2:	e004      	b.n	80078be <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80078b4:	6839      	ldr	r1, [r7, #0]
 80078b6:	6878      	ldr	r0, [r7, #4]
 80078b8:	f000 f8a9 	bl	8007a0e <USBD_CtlError>
        break;
 80078bc:	bf00      	nop
}
 80078be:	bf00      	nop
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}

080078c6 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c6:	b580      	push	{r7, lr}
 80078c8:	b082      	sub	sp, #8
 80078ca:	af00      	add	r7, sp, #0
 80078cc:	6078      	str	r0, [r7, #4]
 80078ce:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80078d6:	3b01      	subs	r3, #1
 80078d8:	2b02      	cmp	r3, #2
 80078da:	d81e      	bhi.n	800791a <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	88db      	ldrh	r3, [r3, #6]
 80078e0:	2b02      	cmp	r3, #2
 80078e2:	d004      	beq.n	80078ee <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 80078e4:	6839      	ldr	r1, [r7, #0]
 80078e6:	6878      	ldr	r0, [r7, #4]
 80078e8:	f000 f891 	bl	8007a0e <USBD_CtlError>
        break;
 80078ec:	e01a      	b.n	8007924 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d005      	beq.n	800790a <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	68db      	ldr	r3, [r3, #12]
 8007902:	f043 0202 	orr.w	r2, r3, #2
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	330c      	adds	r3, #12
 800790e:	2202      	movs	r2, #2
 8007910:	4619      	mov	r1, r3
 8007912:	6878      	ldr	r0, [r7, #4]
 8007914:	f000 fa7e 	bl	8007e14 <USBD_CtlSendData>
      break;
 8007918:	e004      	b.n	8007924 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800791a:	6839      	ldr	r1, [r7, #0]
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f876 	bl	8007a0e <USBD_CtlError>
      break;
 8007922:	bf00      	nop
  }
}
 8007924:	bf00      	nop
 8007926:	3708      	adds	r7, #8
 8007928:	46bd      	mov	sp, r7
 800792a:	bd80      	pop	{r7, pc}

0800792c <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 800792c:	b580      	push	{r7, lr}
 800792e:	b082      	sub	sp, #8
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	885b      	ldrh	r3, [r3, #2]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d106      	bne.n	800794c <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2201      	movs	r2, #1
 8007942:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 8007946:	6878      	ldr	r0, [r7, #4]
 8007948:	f000 faa4 	bl	8007e94 <USBD_CtlSendStatus>
  }
}
 800794c:	bf00      	nop
 800794e:	3708      	adds	r7, #8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8007954:	b580      	push	{r7, lr}
 8007956:	b082      	sub	sp, #8
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
 800795c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007964:	3b01      	subs	r3, #1
 8007966:	2b02      	cmp	r3, #2
 8007968:	d80b      	bhi.n	8007982 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800796a:	683b      	ldr	r3, [r7, #0]
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	2b01      	cmp	r3, #1
 8007970:	d10c      	bne.n	800798c <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	2200      	movs	r2, #0
 8007976:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 fa8a 	bl	8007e94 <USBD_CtlSendStatus>
      }
      break;
 8007980:	e004      	b.n	800798c <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 8007982:	6839      	ldr	r1, [r7, #0]
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f842 	bl	8007a0e <USBD_CtlError>
      break;
 800798a:	e000      	b.n	800798e <USBD_ClrFeature+0x3a>
      break;
 800798c:	bf00      	nop
  }
}
 800798e:	bf00      	nop
 8007990:	3708      	adds	r7, #8
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}

08007996 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007996:	b480      	push	{r7}
 8007998:	b083      	sub	sp, #12
 800799a:	af00      	add	r7, sp, #0
 800799c:	6078      	str	r0, [r7, #4]
 800799e:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	781a      	ldrb	r2, [r3, #0]
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80079a8:	683b      	ldr	r3, [r7, #0]
 80079aa:	785a      	ldrb	r2, [r3, #1]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	3302      	adds	r3, #2
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	b29a      	uxth	r2, r3
 80079b8:	683b      	ldr	r3, [r7, #0]
 80079ba:	3303      	adds	r3, #3
 80079bc:	781b      	ldrb	r3, [r3, #0]
 80079be:	b29b      	uxth	r3, r3
 80079c0:	021b      	lsls	r3, r3, #8
 80079c2:	b29b      	uxth	r3, r3
 80079c4:	4413      	add	r3, r2
 80079c6:	b29a      	uxth	r2, r3
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80079cc:	683b      	ldr	r3, [r7, #0]
 80079ce:	3304      	adds	r3, #4
 80079d0:	781b      	ldrb	r3, [r3, #0]
 80079d2:	b29a      	uxth	r2, r3
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	3305      	adds	r3, #5
 80079d8:	781b      	ldrb	r3, [r3, #0]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	021b      	lsls	r3, r3, #8
 80079de:	b29b      	uxth	r3, r3
 80079e0:	4413      	add	r3, r2
 80079e2:	b29a      	uxth	r2, r3
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 80079e8:	683b      	ldr	r3, [r7, #0]
 80079ea:	3306      	adds	r3, #6
 80079ec:	781b      	ldrb	r3, [r3, #0]
 80079ee:	b29a      	uxth	r2, r3
 80079f0:	683b      	ldr	r3, [r7, #0]
 80079f2:	3307      	adds	r3, #7
 80079f4:	781b      	ldrb	r3, [r3, #0]
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	021b      	lsls	r3, r3, #8
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	4413      	add	r3, r2
 80079fe:	b29a      	uxth	r2, r3
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	80da      	strh	r2, [r3, #6]

}
 8007a04:	bf00      	nop
 8007a06:	370c      	adds	r7, #12
 8007a08:	46bd      	mov	sp, r7
 8007a0a:	bc80      	pop	{r7}
 8007a0c:	4770      	bx	lr

08007a0e <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b082      	sub	sp, #8
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8007a18:	2180      	movs	r1, #128	; 0x80
 8007a1a:	6878      	ldr	r0, [r7, #4]
 8007a1c:	f000 fcfe 	bl	800841c <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8007a20:	2100      	movs	r1, #0
 8007a22:	6878      	ldr	r0, [r7, #4]
 8007a24:	f000 fcfa 	bl	800841c <USBD_LL_StallEP>
}
 8007a28:	bf00      	nop
 8007a2a:	3708      	adds	r7, #8
 8007a2c:	46bd      	mov	sp, r7
 8007a2e:	bd80      	pop	{r7, pc}

08007a30 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	60f8      	str	r0, [r7, #12]
 8007a38:	60b9      	str	r1, [r7, #8]
 8007a3a:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d032      	beq.n	8007aac <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8007a46:	68f8      	ldr	r0, [r7, #12]
 8007a48:	f000 f834 	bl	8007ab4 <USBD_GetLen>
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	3301      	adds	r3, #1
 8007a50:	b29b      	uxth	r3, r3
 8007a52:	005b      	lsls	r3, r3, #1
 8007a54:	b29a      	uxth	r2, r3
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
 8007a5c:	1c5a      	adds	r2, r3, #1
 8007a5e:	75fa      	strb	r2, [r7, #23]
 8007a60:	461a      	mov	r2, r3
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	4413      	add	r3, r2
 8007a66:	687a      	ldr	r2, [r7, #4]
 8007a68:	7812      	ldrb	r2, [r2, #0]
 8007a6a:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8007a6c:	7dfb      	ldrb	r3, [r7, #23]
 8007a6e:	1c5a      	adds	r2, r3, #1
 8007a70:	75fa      	strb	r2, [r7, #23]
 8007a72:	461a      	mov	r2, r3
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	4413      	add	r3, r2
 8007a78:	2203      	movs	r2, #3
 8007a7a:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8007a7c:	e012      	b.n	8007aa4 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	1c5a      	adds	r2, r3, #1
 8007a82:	60fa      	str	r2, [r7, #12]
 8007a84:	7dfa      	ldrb	r2, [r7, #23]
 8007a86:	1c51      	adds	r1, r2, #1
 8007a88:	75f9      	strb	r1, [r7, #23]
 8007a8a:	4611      	mov	r1, r2
 8007a8c:	68ba      	ldr	r2, [r7, #8]
 8007a8e:	440a      	add	r2, r1
 8007a90:	781b      	ldrb	r3, [r3, #0]
 8007a92:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8007a94:	7dfb      	ldrb	r3, [r7, #23]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	75fa      	strb	r2, [r7, #23]
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	68bb      	ldr	r3, [r7, #8]
 8007a9e:	4413      	add	r3, r2
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	781b      	ldrb	r3, [r3, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e8      	bne.n	8007a7e <USBD_GetString+0x4e>
    }
  }
}
 8007aac:	bf00      	nop
 8007aae:	3718      	adds	r7, #24
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bd80      	pop	{r7, pc}

08007ab4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007ab4:	b480      	push	{r7}
 8007ab6:	b085      	sub	sp, #20
 8007ab8:	af00      	add	r7, sp, #0
 8007aba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007abc:	2300      	movs	r3, #0
 8007abe:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 8007ac0:	e005      	b.n	8007ace <USBD_GetLen+0x1a>
  {
    len++;
 8007ac2:	7bfb      	ldrb	r3, [r7, #15]
 8007ac4:	3301      	adds	r3, #1
 8007ac6:	73fb      	strb	r3, [r7, #15]
    buf++;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	3301      	adds	r3, #1
 8007acc:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	781b      	ldrb	r3, [r3, #0]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d1f5      	bne.n	8007ac2 <USBD_GetLen+0xe>
  }

  return len;
 8007ad6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ad8:	4618      	mov	r0, r3
 8007ada:	3714      	adds	r7, #20
 8007adc:	46bd      	mov	sp, r7
 8007ade:	bc80      	pop	{r7}
 8007ae0:	4770      	bx	lr

08007ae2 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007ae2:	b580      	push	{r7, lr}
 8007ae4:	b082      	sub	sp, #8
 8007ae6:	af00      	add	r7, sp, #0
 8007ae8:	6078      	str	r0, [r7, #4]
 8007aea:	460b      	mov	r3, r1
 8007aec:	70fb      	strb	r3, [r7, #3]
  /* Open EP IN */
  USBD_LL_OpenEP(pdev, HID_EPIN_ADDR, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8007aee:	2304      	movs	r3, #4
 8007af0:	2203      	movs	r2, #3
 8007af2:	2181      	movs	r1, #129	; 0x81
 8007af4:	6878      	ldr	r0, [r7, #4]
 8007af6:	f000 fc4c 	bl	8008392 <USBD_LL_OpenEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 1U;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	62da      	str	r2, [r3, #44]	; 0x2c

  pdev->pClassData = USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8007b00:	2010      	movs	r0, #16
 8007b02:	f000 fd5b 	bl	80085bc <USBD_static_malloc>
 8007b06:	4602      	mov	r2, r0
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d101      	bne.n	8007b1c <USBD_HID_Init+0x3a>
  {
    return USBD_FAIL;
 8007b18:	2302      	movs	r3, #2
 8007b1a:	e005      	b.n	8007b28 <USBD_HID_Init+0x46>
  }

  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b22:	2200      	movs	r2, #0
 8007b24:	731a      	strb	r2, [r3, #12]

  return USBD_OK;
 8007b26:	2300      	movs	r3, #0
}
 8007b28:	4618      	mov	r0, r3
 8007b2a:	3708      	adds	r7, #8
 8007b2c:	46bd      	mov	sp, r7
 8007b2e:	bd80      	pop	{r7, pc}

08007b30 <USBD_HID_DeInit>:
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_HID_DeInit(USBD_HandleTypeDef *pdev,
                                uint8_t cfgidx)
{
 8007b30:	b580      	push	{r7, lr}
 8007b32:	b082      	sub	sp, #8
 8007b34:	af00      	add	r7, sp, #0
 8007b36:	6078      	str	r0, [r7, #4]
 8007b38:	460b      	mov	r3, r1
 8007b3a:	70fb      	strb	r3, [r7, #3]
  /* Close HID EPs */
  USBD_LL_CloseEP(pdev, HID_EPIN_ADDR);
 8007b3c:	2181      	movs	r1, #129	; 0x81
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f000 fc4d 	bl	80083de <USBD_LL_CloseEP>
  pdev->ep_in[HID_EPIN_ADDR & 0xFU].is_used = 0U;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2200      	movs	r2, #0
 8007b48:	62da      	str	r2, [r3, #44]	; 0x2c

  /* FRee allocated memory */
  if (pdev->pClassData != NULL)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d009      	beq.n	8007b68 <USBD_HID_DeInit+0x38>
  {
    USBD_free(pdev->pClassData);
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	f000 fd3a 	bl	80085d4 <USBD_static_free>
    pdev->pClassData = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return USBD_OK;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3708      	adds	r7, #8
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	bd80      	pop	{r7, pc}
	...

08007b74 <USBD_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_HID_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007b74:	b580      	push	{r7, lr}
 8007b76:	b088      	sub	sp, #32
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *) pdev->pClassData;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b84:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	83fb      	strh	r3, [r7, #30]
  uint8_t *pbuf = NULL;
 8007b8a:	2300      	movs	r3, #0
 8007b8c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b92:	2300      	movs	r3, #0
 8007b94:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007b96:	683b      	ldr	r3, [r7, #0]
 8007b98:	781b      	ldrb	r3, [r3, #0]
 8007b9a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d045      	beq.n	8007c2e <USBD_HID_Setup+0xba>
 8007ba2:	2b20      	cmp	r3, #32
 8007ba4:	f040 80d3 	bne.w	8007d4e <USBD_HID_Setup+0x1da>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8007ba8:	683b      	ldr	r3, [r7, #0]
 8007baa:	785b      	ldrb	r3, [r3, #1]
 8007bac:	3b02      	subs	r3, #2
 8007bae:	2b09      	cmp	r3, #9
 8007bb0:	d835      	bhi.n	8007c1e <USBD_HID_Setup+0xaa>
 8007bb2:	a201      	add	r2, pc, #4	; (adr r2, 8007bb8 <USBD_HID_Setup+0x44>)
 8007bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bb8:	08007c0f 	.word	0x08007c0f
 8007bbc:	08007bef 	.word	0x08007bef
 8007bc0:	08007c1f 	.word	0x08007c1f
 8007bc4:	08007c1f 	.word	0x08007c1f
 8007bc8:	08007c1f 	.word	0x08007c1f
 8007bcc:	08007c1f 	.word	0x08007c1f
 8007bd0:	08007c1f 	.word	0x08007c1f
 8007bd4:	08007c1f 	.word	0x08007c1f
 8007bd8:	08007bfd 	.word	0x08007bfd
 8007bdc:	08007be1 	.word	0x08007be1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	885b      	ldrh	r3, [r3, #2]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	461a      	mov	r2, r3
 8007be8:	693b      	ldr	r3, [r7, #16]
 8007bea:	601a      	str	r2, [r3, #0]
          break;
 8007bec:	e01e      	b.n	8007c2c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_PROTOCOL:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->Protocol, 1U);
 8007bee:	693b      	ldr	r3, [r7, #16]
 8007bf0:	2201      	movs	r2, #1
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f000 f90d 	bl	8007e14 <USBD_CtlSendData>
          break;
 8007bfa:	e017      	b.n	8007c2c <USBD_HID_Setup+0xb8>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	885b      	ldrh	r3, [r3, #2]
 8007c00:	0a1b      	lsrs	r3, r3, #8
 8007c02:	b29b      	uxth	r3, r3
 8007c04:	b2db      	uxtb	r3, r3
 8007c06:	461a      	mov	r2, r3
 8007c08:	693b      	ldr	r3, [r7, #16]
 8007c0a:	605a      	str	r2, [r3, #4]
          break;
 8007c0c:	e00e      	b.n	8007c2c <USBD_HID_Setup+0xb8>

        case HID_REQ_GET_IDLE:
          USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->IdleState, 1U);
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	3304      	adds	r3, #4
 8007c12:	2201      	movs	r2, #1
 8007c14:	4619      	mov	r1, r3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f000 f8fc 	bl	8007e14 <USBD_CtlSendData>
          break;
 8007c1c:	e006      	b.n	8007c2c <USBD_HID_Setup+0xb8>

        default:
          USBD_CtlError(pdev, req);
 8007c1e:	6839      	ldr	r1, [r7, #0]
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f7ff fef4 	bl	8007a0e <USBD_CtlError>
          ret = USBD_FAIL;
 8007c26:	2302      	movs	r3, #2
 8007c28:	75fb      	strb	r3, [r7, #23]
          break;
 8007c2a:	bf00      	nop
      }
      break;
 8007c2c:	e096      	b.n	8007d5c <USBD_HID_Setup+0x1e8>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	785b      	ldrb	r3, [r3, #1]
 8007c32:	2b0b      	cmp	r3, #11
 8007c34:	f200 8083 	bhi.w	8007d3e <USBD_HID_Setup+0x1ca>
 8007c38:	a201      	add	r2, pc, #4	; (adr r2, 8007c40 <USBD_HID_Setup+0xcc>)
 8007c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c3e:	bf00      	nop
 8007c40:	08007c71 	.word	0x08007c71
 8007c44:	08007d3f 	.word	0x08007d3f
 8007c48:	08007d3f 	.word	0x08007d3f
 8007c4c:	08007d3f 	.word	0x08007d3f
 8007c50:	08007d3f 	.word	0x08007d3f
 8007c54:	08007d3f 	.word	0x08007d3f
 8007c58:	08007c99 	.word	0x08007c99
 8007c5c:	08007d3f 	.word	0x08007d3f
 8007c60:	08007d3f 	.word	0x08007d3f
 8007c64:	08007d3f 	.word	0x08007d3f
 8007c68:	08007cf1 	.word	0x08007cf1
 8007c6c:	08007d19 	.word	0x08007d19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007c76:	2b03      	cmp	r3, #3
 8007c78:	d107      	bne.n	8007c8a <USBD_HID_Setup+0x116>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007c7a:	f107 030e 	add.w	r3, r7, #14
 8007c7e:	2202      	movs	r2, #2
 8007c80:	4619      	mov	r1, r3
 8007c82:	6878      	ldr	r0, [r7, #4]
 8007c84:	f000 f8c6 	bl	8007e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007c88:	e060      	b.n	8007d4c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007c8a:	6839      	ldr	r1, [r7, #0]
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f7ff febe 	bl	8007a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007c92:	2302      	movs	r3, #2
 8007c94:	75fb      	strb	r3, [r7, #23]
          break;
 8007c96:	e059      	b.n	8007d4c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_DESCRIPTOR:
          if (req->wValue >> 8 == HID_REPORT_DESC)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	885b      	ldrh	r3, [r3, #2]
 8007c9c:	0a1b      	lsrs	r3, r3, #8
 8007c9e:	b29b      	uxth	r3, r3
 8007ca0:	2b22      	cmp	r3, #34	; 0x22
 8007ca2:	d108      	bne.n	8007cb6 <USBD_HID_Setup+0x142>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	88db      	ldrh	r3, [r3, #6]
 8007ca8:	2b4a      	cmp	r3, #74	; 0x4a
 8007caa:	bf28      	it	cs
 8007cac:	234a      	movcs	r3, #74	; 0x4a
 8007cae:	83fb      	strh	r3, [r7, #30]
            pbuf = HID_MOUSE_ReportDesc;
 8007cb0:	4b2d      	ldr	r3, [pc, #180]	; (8007d68 <USBD_HID_Setup+0x1f4>)
 8007cb2:	61bb      	str	r3, [r7, #24]
 8007cb4:	e015      	b.n	8007ce2 <USBD_HID_Setup+0x16e>
          }
          else if (req->wValue >> 8 == HID_DESCRIPTOR_TYPE)
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	885b      	ldrh	r3, [r3, #2]
 8007cba:	0a1b      	lsrs	r3, r3, #8
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	2b21      	cmp	r3, #33	; 0x21
 8007cc0:	d108      	bne.n	8007cd4 <USBD_HID_Setup+0x160>
          {
            pbuf = USBD_HID_Desc;
 8007cc2:	4b2a      	ldr	r3, [pc, #168]	; (8007d6c <USBD_HID_Setup+0x1f8>)
 8007cc4:	61bb      	str	r3, [r7, #24]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	88db      	ldrh	r3, [r3, #6]
 8007cca:	2b09      	cmp	r3, #9
 8007ccc:	bf28      	it	cs
 8007cce:	2309      	movcs	r3, #9
 8007cd0:	83fb      	strh	r3, [r7, #30]
 8007cd2:	e006      	b.n	8007ce2 <USBD_HID_Setup+0x16e>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8007cd4:	6839      	ldr	r1, [r7, #0]
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7ff fe99 	bl	8007a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007cdc:	2302      	movs	r3, #2
 8007cde:	75fb      	strb	r3, [r7, #23]
            break;
 8007ce0:	e034      	b.n	8007d4c <USBD_HID_Setup+0x1d8>
          }
          USBD_CtlSendData(pdev, pbuf, len);
 8007ce2:	8bfb      	ldrh	r3, [r7, #30]
 8007ce4:	461a      	mov	r2, r3
 8007ce6:	69b9      	ldr	r1, [r7, #24]
 8007ce8:	6878      	ldr	r0, [r7, #4]
 8007cea:	f000 f893 	bl	8007e14 <USBD_CtlSendData>
          break;
 8007cee:	e02d      	b.n	8007d4c <USBD_HID_Setup+0x1d8>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cf6:	2b03      	cmp	r3, #3
 8007cf8:	d107      	bne.n	8007d0a <USBD_HID_Setup+0x196>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&hhid->AltSetting, 1U);
 8007cfa:	693b      	ldr	r3, [r7, #16]
 8007cfc:	3308      	adds	r3, #8
 8007cfe:	2201      	movs	r2, #1
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f886 	bl	8007e14 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d08:	e020      	b.n	8007d4c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007d0a:	6839      	ldr	r1, [r7, #0]
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f7ff fe7e 	bl	8007a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d12:	2302      	movs	r3, #2
 8007d14:	75fb      	strb	r3, [r7, #23]
          break;
 8007d16:	e019      	b.n	8007d4c <USBD_HID_Setup+0x1d8>

        case USB_REQ_SET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d1e:	2b03      	cmp	r3, #3
 8007d20:	d106      	bne.n	8007d30 <USBD_HID_Setup+0x1bc>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	885b      	ldrh	r3, [r3, #2]
 8007d26:	b2db      	uxtb	r3, r3
 8007d28:	461a      	mov	r2, r3
 8007d2a:	693b      	ldr	r3, [r7, #16]
 8007d2c:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007d2e:	e00d      	b.n	8007d4c <USBD_HID_Setup+0x1d8>
            USBD_CtlError(pdev, req);
 8007d30:	6839      	ldr	r1, [r7, #0]
 8007d32:	6878      	ldr	r0, [r7, #4]
 8007d34:	f7ff fe6b 	bl	8007a0e <USBD_CtlError>
            ret = USBD_FAIL;
 8007d38:	2302      	movs	r3, #2
 8007d3a:	75fb      	strb	r3, [r7, #23]
          break;
 8007d3c:	e006      	b.n	8007d4c <USBD_HID_Setup+0x1d8>

        default:
          USBD_CtlError(pdev, req);
 8007d3e:	6839      	ldr	r1, [r7, #0]
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f7ff fe64 	bl	8007a0e <USBD_CtlError>
          ret = USBD_FAIL;
 8007d46:	2302      	movs	r3, #2
 8007d48:	75fb      	strb	r3, [r7, #23]
          break;
 8007d4a:	bf00      	nop
      }
      break;
 8007d4c:	e006      	b.n	8007d5c <USBD_HID_Setup+0x1e8>

    default:
      USBD_CtlError(pdev, req);
 8007d4e:	6839      	ldr	r1, [r7, #0]
 8007d50:	6878      	ldr	r0, [r7, #4]
 8007d52:	f7ff fe5c 	bl	8007a0e <USBD_CtlError>
      ret = USBD_FAIL;
 8007d56:	2302      	movs	r3, #2
 8007d58:	75fb      	strb	r3, [r7, #23]
      break;
 8007d5a:	bf00      	nop
  }

  return ret;
 8007d5c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3720      	adds	r7, #32
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	20000230 	.word	0x20000230
 8007d6c:	20000218 	.word	0x20000218

08007d70 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8007d70:	b480      	push	{r7}
 8007d72:	b083      	sub	sp, #12
 8007d74:	af00      	add	r7, sp, #0
 8007d76:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgFSDesc);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2222      	movs	r2, #34	; 0x22
 8007d7c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgFSDesc;
 8007d7e:	4b03      	ldr	r3, [pc, #12]	; (8007d8c <USBD_HID_GetFSCfgDesc+0x1c>)
}
 8007d80:	4618      	mov	r0, r3
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	bc80      	pop	{r7}
 8007d88:	4770      	bx	lr
 8007d8a:	bf00      	nop
 8007d8c:	200001ac 	.word	0x200001ac

08007d90 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b083      	sub	sp, #12
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_CfgHSDesc);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	2222      	movs	r2, #34	; 0x22
 8007d9c:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgHSDesc;
 8007d9e:	4b03      	ldr	r3, [pc, #12]	; (8007dac <USBD_HID_GetHSCfgDesc+0x1c>)
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	370c      	adds	r7, #12
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bc80      	pop	{r7}
 8007da8:	4770      	bx	lr
 8007daa:	bf00      	nop
 8007dac:	200001d0 	.word	0x200001d0

08007db0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_OtherSpeedCfgDesc);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2222      	movs	r2, #34	; 0x22
 8007dbc:	801a      	strh	r2, [r3, #0]
  return USBD_HID_OtherSpeedCfgDesc;
 8007dbe:	4b03      	ldr	r3, [pc, #12]	; (8007dcc <USBD_HID_GetOtherSpeedCfgDesc+0x1c>)
}
 8007dc0:	4618      	mov	r0, r3
 8007dc2:	370c      	adds	r7, #12
 8007dc4:	46bd      	mov	sp, r7
 8007dc6:	bc80      	pop	{r7}
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	200001f4 	.word	0x200001f4

08007dd0 <USBD_HID_DataIn>:
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t  USBD_HID_DataIn(USBD_HandleTypeDef *pdev,
                                uint8_t epnum)
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b083      	sub	sp, #12
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
 8007dd8:	460b      	mov	r3, r1
 8007dda:	70fb      	strb	r3, [r7, #3]

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassData)->state = HID_IDLE;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007de2:	2200      	movs	r2, #0
 8007de4:	731a      	strb	r2, [r3, #12]
  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	370c      	adds	r7, #12
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bc80      	pop	{r7}
 8007df0:	4770      	bx	lr
	...

08007df4 <USBD_HID_GetDeviceQualifierDesc>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
static uint8_t  *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_HID_DeviceQualifierDesc);
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	220a      	movs	r2, #10
 8007e00:	801a      	strh	r2, [r3, #0]
  return USBD_HID_DeviceQualifierDesc;
 8007e02:	4b03      	ldr	r3, [pc, #12]	; (8007e10 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8007e04:	4618      	mov	r0, r3
 8007e06:	370c      	adds	r7, #12
 8007e08:	46bd      	mov	sp, r7
 8007e0a:	bc80      	pop	{r7}
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	20000224 	.word	0x20000224

08007e14 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8007e14:	b580      	push	{r7, lr}
 8007e16:	b084      	sub	sp, #16
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	4613      	mov	r3, r2
 8007e20:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	2202      	movs	r2, #2
 8007e26:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007e2a:	88fa      	ldrh	r2, [r7, #6]
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8007e30:	88fa      	ldrh	r2, [r7, #6]
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e36:	88fb      	ldrh	r3, [r7, #6]
 8007e38:	68ba      	ldr	r2, [r7, #8]
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	68f8      	ldr	r0, [r7, #12]
 8007e3e:	f000 fb76 	bl	800852e <USBD_LL_Transmit>

  return USBD_OK;
 8007e42:	2300      	movs	r3, #0
}
 8007e44:	4618      	mov	r0, r3
 8007e46:	3710      	adds	r7, #16
 8007e48:	46bd      	mov	sp, r7
 8007e4a:	bd80      	pop	{r7, pc}

08007e4c <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	60f8      	str	r0, [r7, #12]
 8007e54:	60b9      	str	r1, [r7, #8]
 8007e56:	4613      	mov	r3, r2
 8007e58:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007e5a:	88fb      	ldrh	r3, [r7, #6]
 8007e5c:	68ba      	ldr	r2, [r7, #8]
 8007e5e:	2100      	movs	r1, #0
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f000 fb64 	bl	800852e <USBD_LL_Transmit>

  return USBD_OK;
 8007e66:	2300      	movs	r3, #0
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3710      	adds	r7, #16
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	68ba      	ldr	r2, [r7, #8]
 8007e82:	2100      	movs	r1, #0
 8007e84:	68f8      	ldr	r0, [r7, #12]
 8007e86:	f000 fb75 	bl	8008574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007e8a:	2300      	movs	r3, #0
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3710      	adds	r7, #16
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}

08007e94 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007e94:	b580      	push	{r7, lr}
 8007e96:	b082      	sub	sp, #8
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2204      	movs	r2, #4
 8007ea0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	6878      	ldr	r0, [r7, #4]
 8007eac:	f000 fb3f 	bl	800852e <USBD_LL_Transmit>

  return USBD_OK;
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}

08007eba <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007eba:	b580      	push	{r7, lr}
 8007ebc:	b082      	sub	sp, #8
 8007ebe:	af00      	add	r7, sp, #0
 8007ec0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	2205      	movs	r2, #5
 8007ec6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007eca:	2300      	movs	r3, #0
 8007ecc:	2200      	movs	r2, #0
 8007ece:	2100      	movs	r1, #0
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 fb4f 	bl	8008574 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007ed6:	2300      	movs	r3, #0
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	3708      	adds	r7, #8
 8007edc:	46bd      	mov	sp, r7
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007ee4:	2200      	movs	r2, #0
 8007ee6:	490e      	ldr	r1, [pc, #56]	; (8007f20 <MX_USB_DEVICE_Init+0x40>)
 8007ee8:	480e      	ldr	r0, [pc, #56]	; (8007f24 <MX_USB_DEVICE_Init+0x44>)
 8007eea:	f7fe fde4 	bl	8006ab6 <USBD_Init>
 8007eee:	4603      	mov	r3, r0
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	d001      	beq.n	8007ef8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007ef4:	f7f8 fafe 	bl	80004f4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007ef8:	490b      	ldr	r1, [pc, #44]	; (8007f28 <MX_USB_DEVICE_Init+0x48>)
 8007efa:	480a      	ldr	r0, [pc, #40]	; (8007f24 <MX_USB_DEVICE_Init+0x44>)
 8007efc:	f7fe fe06 	bl	8006b0c <USBD_RegisterClass>
 8007f00:	4603      	mov	r3, r0
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d001      	beq.n	8007f0a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007f06:	f7f8 faf5 	bl	80004f4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007f0a:	4806      	ldr	r0, [pc, #24]	; (8007f24 <MX_USB_DEVICE_Init+0x44>)
 8007f0c:	f7fe fe17 	bl	8006b3e <USBD_Start>
 8007f10:	4603      	mov	r3, r0
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d001      	beq.n	8007f1a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007f16:	f7f8 faed 	bl	80004f4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007f1a:	bf00      	nop
 8007f1c:	bd80      	pop	{r7, pc}
 8007f1e:	bf00      	nop
 8007f20:	2000027c 	.word	0x2000027c
 8007f24:	200003d8 	.word	0x200003d8
 8007f28:	20000174 	.word	0x20000174

08007f2c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f2c:	b480      	push	{r7}
 8007f2e:	b083      	sub	sp, #12
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	4603      	mov	r3, r0
 8007f34:	6039      	str	r1, [r7, #0]
 8007f36:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	2212      	movs	r2, #18
 8007f3c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007f3e:	4b03      	ldr	r3, [pc, #12]	; (8007f4c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bc80      	pop	{r7}
 8007f48:	4770      	bx	lr
 8007f4a:	bf00      	nop
 8007f4c:	20000298 	.word	0x20000298

08007f50 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f50:	b480      	push	{r7}
 8007f52:	b083      	sub	sp, #12
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	6039      	str	r1, [r7, #0]
 8007f5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007f5c:	683b      	ldr	r3, [r7, #0]
 8007f5e:	2204      	movs	r2, #4
 8007f60:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007f62:	4b03      	ldr	r3, [pc, #12]	; (8007f70 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	370c      	adds	r7, #12
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bc80      	pop	{r7}
 8007f6c:	4770      	bx	lr
 8007f6e:	bf00      	nop
 8007f70:	200002ac 	.word	0x200002ac

08007f74 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007f74:	b580      	push	{r7, lr}
 8007f76:	b082      	sub	sp, #8
 8007f78:	af00      	add	r7, sp, #0
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	6039      	str	r1, [r7, #0]
 8007f7e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007f80:	79fb      	ldrb	r3, [r7, #7]
 8007f82:	2b00      	cmp	r3, #0
 8007f84:	d105      	bne.n	8007f92 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f86:	683a      	ldr	r2, [r7, #0]
 8007f88:	4907      	ldr	r1, [pc, #28]	; (8007fa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f8a:	4808      	ldr	r0, [pc, #32]	; (8007fac <USBD_FS_ProductStrDescriptor+0x38>)
 8007f8c:	f7ff fd50 	bl	8007a30 <USBD_GetString>
 8007f90:	e004      	b.n	8007f9c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007f92:	683a      	ldr	r2, [r7, #0]
 8007f94:	4904      	ldr	r1, [pc, #16]	; (8007fa8 <USBD_FS_ProductStrDescriptor+0x34>)
 8007f96:	4805      	ldr	r0, [pc, #20]	; (8007fac <USBD_FS_ProductStrDescriptor+0x38>)
 8007f98:	f7ff fd4a 	bl	8007a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007f9c:	4b02      	ldr	r3, [pc, #8]	; (8007fa8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007f9e:	4618      	mov	r0, r3
 8007fa0:	3708      	adds	r7, #8
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	bd80      	pop	{r7, pc}
 8007fa6:	bf00      	nop
 8007fa8:	2000069c 	.word	0x2000069c
 8007fac:	080086d4 	.word	0x080086d4

08007fb0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	4603      	mov	r3, r0
 8007fb8:	6039      	str	r1, [r7, #0]
 8007fba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007fbc:	683a      	ldr	r2, [r7, #0]
 8007fbe:	4904      	ldr	r1, [pc, #16]	; (8007fd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007fc0:	4804      	ldr	r0, [pc, #16]	; (8007fd4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007fc2:	f7ff fd35 	bl	8007a30 <USBD_GetString>
  return USBD_StrDesc;
 8007fc6:	4b02      	ldr	r3, [pc, #8]	; (8007fd0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	2000069c 	.word	0x2000069c
 8007fd4:	080086ec 	.word	0x080086ec

08007fd8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	4603      	mov	r3, r0
 8007fe0:	6039      	str	r1, [r7, #0]
 8007fe2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007fe4:	683b      	ldr	r3, [r7, #0]
 8007fe6:	221a      	movs	r2, #26
 8007fe8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007fea:	f000 f843 	bl	8008074 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007fee:	4b02      	ldr	r3, [pc, #8]	; (8007ff8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007ff0:	4618      	mov	r0, r3
 8007ff2:	3708      	adds	r7, #8
 8007ff4:	46bd      	mov	sp, r7
 8007ff6:	bd80      	pop	{r7, pc}
 8007ff8:	200002b0 	.word	0x200002b0

08007ffc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007ffc:	b580      	push	{r7, lr}
 8007ffe:	b082      	sub	sp, #8
 8008000:	af00      	add	r7, sp, #0
 8008002:	4603      	mov	r3, r0
 8008004:	6039      	str	r1, [r7, #0]
 8008006:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8008008:	79fb      	ldrb	r3, [r7, #7]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d105      	bne.n	800801a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	4907      	ldr	r1, [pc, #28]	; (8008030 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008012:	4808      	ldr	r0, [pc, #32]	; (8008034 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008014:	f7ff fd0c 	bl	8007a30 <USBD_GetString>
 8008018:	e004      	b.n	8008024 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800801a:	683a      	ldr	r2, [r7, #0]
 800801c:	4904      	ldr	r1, [pc, #16]	; (8008030 <USBD_FS_ConfigStrDescriptor+0x34>)
 800801e:	4805      	ldr	r0, [pc, #20]	; (8008034 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008020:	f7ff fd06 	bl	8007a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008024:	4b02      	ldr	r3, [pc, #8]	; (8008030 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8008026:	4618      	mov	r0, r3
 8008028:	3708      	adds	r7, #8
 800802a:	46bd      	mov	sp, r7
 800802c:	bd80      	pop	{r7, pc}
 800802e:	bf00      	nop
 8008030:	2000069c 	.word	0x2000069c
 8008034:	08008700 	.word	0x08008700

08008038 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b082      	sub	sp, #8
 800803c:	af00      	add	r7, sp, #0
 800803e:	4603      	mov	r3, r0
 8008040:	6039      	str	r1, [r7, #0]
 8008042:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008044:	79fb      	ldrb	r3, [r7, #7]
 8008046:	2b00      	cmp	r3, #0
 8008048:	d105      	bne.n	8008056 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800804a:	683a      	ldr	r2, [r7, #0]
 800804c:	4907      	ldr	r1, [pc, #28]	; (800806c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800804e:	4808      	ldr	r0, [pc, #32]	; (8008070 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008050:	f7ff fcee 	bl	8007a30 <USBD_GetString>
 8008054:	e004      	b.n	8008060 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008056:	683a      	ldr	r2, [r7, #0]
 8008058:	4904      	ldr	r1, [pc, #16]	; (800806c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800805a:	4805      	ldr	r0, [pc, #20]	; (8008070 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800805c:	f7ff fce8 	bl	8007a30 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008060:	4b02      	ldr	r3, [pc, #8]	; (800806c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008062:	4618      	mov	r0, r3
 8008064:	3708      	adds	r7, #8
 8008066:	46bd      	mov	sp, r7
 8008068:	bd80      	pop	{r7, pc}
 800806a:	bf00      	nop
 800806c:	2000069c 	.word	0x2000069c
 8008070:	0800870c 	.word	0x0800870c

08008074 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b084      	sub	sp, #16
 8008078:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800807a:	4b0f      	ldr	r3, [pc, #60]	; (80080b8 <Get_SerialNum+0x44>)
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008080:	4b0e      	ldr	r3, [pc, #56]	; (80080bc <Get_SerialNum+0x48>)
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008086:	4b0e      	ldr	r3, [pc, #56]	; (80080c0 <Get_SerialNum+0x4c>)
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800808c:	68fa      	ldr	r2, [r7, #12]
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	4413      	add	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d009      	beq.n	80080ae <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800809a:	2208      	movs	r2, #8
 800809c:	4909      	ldr	r1, [pc, #36]	; (80080c4 <Get_SerialNum+0x50>)
 800809e:	68f8      	ldr	r0, [r7, #12]
 80080a0:	f000 f814 	bl	80080cc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80080a4:	2204      	movs	r2, #4
 80080a6:	4908      	ldr	r1, [pc, #32]	; (80080c8 <Get_SerialNum+0x54>)
 80080a8:	68b8      	ldr	r0, [r7, #8]
 80080aa:	f000 f80f 	bl	80080cc <IntToUnicode>
  }
}
 80080ae:	bf00      	nop
 80080b0:	3710      	adds	r7, #16
 80080b2:	46bd      	mov	sp, r7
 80080b4:	bd80      	pop	{r7, pc}
 80080b6:	bf00      	nop
 80080b8:	1ffff7e8 	.word	0x1ffff7e8
 80080bc:	1ffff7ec 	.word	0x1ffff7ec
 80080c0:	1ffff7f0 	.word	0x1ffff7f0
 80080c4:	200002b2 	.word	0x200002b2
 80080c8:	200002c2 	.word	0x200002c2

080080cc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	60f8      	str	r0, [r7, #12]
 80080d4:	60b9      	str	r1, [r7, #8]
 80080d6:	4613      	mov	r3, r2
 80080d8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80080da:	2300      	movs	r3, #0
 80080dc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80080de:	2300      	movs	r3, #0
 80080e0:	75fb      	strb	r3, [r7, #23]
 80080e2:	e027      	b.n	8008134 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	0f1b      	lsrs	r3, r3, #28
 80080e8:	2b09      	cmp	r3, #9
 80080ea:	d80b      	bhi.n	8008104 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	0f1b      	lsrs	r3, r3, #28
 80080f0:	b2da      	uxtb	r2, r3
 80080f2:	7dfb      	ldrb	r3, [r7, #23]
 80080f4:	005b      	lsls	r3, r3, #1
 80080f6:	4619      	mov	r1, r3
 80080f8:	68bb      	ldr	r3, [r7, #8]
 80080fa:	440b      	add	r3, r1
 80080fc:	3230      	adds	r2, #48	; 0x30
 80080fe:	b2d2      	uxtb	r2, r2
 8008100:	701a      	strb	r2, [r3, #0]
 8008102:	e00a      	b.n	800811a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	0f1b      	lsrs	r3, r3, #28
 8008108:	b2da      	uxtb	r2, r3
 800810a:	7dfb      	ldrb	r3, [r7, #23]
 800810c:	005b      	lsls	r3, r3, #1
 800810e:	4619      	mov	r1, r3
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	440b      	add	r3, r1
 8008114:	3237      	adds	r2, #55	; 0x37
 8008116:	b2d2      	uxtb	r2, r2
 8008118:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	011b      	lsls	r3, r3, #4
 800811e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008120:	7dfb      	ldrb	r3, [r7, #23]
 8008122:	005b      	lsls	r3, r3, #1
 8008124:	3301      	adds	r3, #1
 8008126:	68ba      	ldr	r2, [r7, #8]
 8008128:	4413      	add	r3, r2
 800812a:	2200      	movs	r2, #0
 800812c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800812e:	7dfb      	ldrb	r3, [r7, #23]
 8008130:	3301      	adds	r3, #1
 8008132:	75fb      	strb	r3, [r7, #23]
 8008134:	7dfa      	ldrb	r2, [r7, #23]
 8008136:	79fb      	ldrb	r3, [r7, #7]
 8008138:	429a      	cmp	r2, r3
 800813a:	d3d3      	bcc.n	80080e4 <IntToUnicode+0x18>
  }
}
 800813c:	bf00      	nop
 800813e:	bf00      	nop
 8008140:	371c      	adds	r7, #28
 8008142:	46bd      	mov	sp, r7
 8008144:	bc80      	pop	{r7}
 8008146:	4770      	bx	lr

08008148 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008148:	b580      	push	{r7, lr}
 800814a:	b084      	sub	sp, #16
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a0d      	ldr	r2, [pc, #52]	; (800818c <HAL_PCD_MspInit+0x44>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d113      	bne.n	8008182 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 800815a:	4b0d      	ldr	r3, [pc, #52]	; (8008190 <HAL_PCD_MspInit+0x48>)
 800815c:	69db      	ldr	r3, [r3, #28]
 800815e:	4a0c      	ldr	r2, [pc, #48]	; (8008190 <HAL_PCD_MspInit+0x48>)
 8008160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008164:	61d3      	str	r3, [r2, #28]
 8008166:	4b0a      	ldr	r3, [pc, #40]	; (8008190 <HAL_PCD_MspInit+0x48>)
 8008168:	69db      	ldr	r3, [r3, #28]
 800816a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800816e:	60fb      	str	r3, [r7, #12]
 8008170:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008172:	2200      	movs	r2, #0
 8008174:	2100      	movs	r1, #0
 8008176:	2014      	movs	r0, #20
 8008178:	f7f8 fc55 	bl	8000a26 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 800817c:	2014      	movs	r0, #20
 800817e:	f7f8 fc6e 	bl	8000a5e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008182:	bf00      	nop
 8008184:	3710      	adds	r7, #16
 8008186:	46bd      	mov	sp, r7
 8008188:	bd80      	pop	{r7, pc}
 800818a:	bf00      	nop
 800818c:	40005c00 	.word	0x40005c00
 8008190:	40021000 	.word	0x40021000

08008194 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80081a8:	4619      	mov	r1, r3
 80081aa:	4610      	mov	r0, r2
 80081ac:	f7fe fd0f 	bl	8006bce <USBD_LL_SetupStage>
}
 80081b0:	bf00      	nop
 80081b2:	3708      	adds	r7, #8
 80081b4:	46bd      	mov	sp, r7
 80081b6:	bd80      	pop	{r7, pc}

080081b8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081b8:	b580      	push	{r7, lr}
 80081ba:	b082      	sub	sp, #8
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
 80081c0:	460b      	mov	r3, r1
 80081c2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80081ca:	78fa      	ldrb	r2, [r7, #3]
 80081cc:	6879      	ldr	r1, [r7, #4]
 80081ce:	4613      	mov	r3, r2
 80081d0:	009b      	lsls	r3, r3, #2
 80081d2:	4413      	add	r3, r2
 80081d4:	00db      	lsls	r3, r3, #3
 80081d6:	440b      	add	r3, r1
 80081d8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80081dc:	681a      	ldr	r2, [r3, #0]
 80081de:	78fb      	ldrb	r3, [r7, #3]
 80081e0:	4619      	mov	r1, r3
 80081e2:	f7fe fd41 	bl	8006c68 <USBD_LL_DataOutStage>
}
 80081e6:	bf00      	nop
 80081e8:	3708      	adds	r7, #8
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}

080081ee <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80081ee:	b580      	push	{r7, lr}
 80081f0:	b082      	sub	sp, #8
 80081f2:	af00      	add	r7, sp, #0
 80081f4:	6078      	str	r0, [r7, #4]
 80081f6:	460b      	mov	r3, r1
 80081f8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008200:	78fa      	ldrb	r2, [r7, #3]
 8008202:	6879      	ldr	r1, [r7, #4]
 8008204:	4613      	mov	r3, r2
 8008206:	009b      	lsls	r3, r3, #2
 8008208:	4413      	add	r3, r2
 800820a:	00db      	lsls	r3, r3, #3
 800820c:	440b      	add	r3, r1
 800820e:	333c      	adds	r3, #60	; 0x3c
 8008210:	681a      	ldr	r2, [r3, #0]
 8008212:	78fb      	ldrb	r3, [r7, #3]
 8008214:	4619      	mov	r1, r3
 8008216:	f7fe fd98 	bl	8006d4a <USBD_LL_DataInStage>
}
 800821a:	bf00      	nop
 800821c:	3708      	adds	r7, #8
 800821e:	46bd      	mov	sp, r7
 8008220:	bd80      	pop	{r7, pc}

08008222 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008222:	b580      	push	{r7, lr}
 8008224:	b082      	sub	sp, #8
 8008226:	af00      	add	r7, sp, #0
 8008228:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008230:	4618      	mov	r0, r3
 8008232:	f7fe fea8 	bl	8006f86 <USBD_LL_SOF>
}
 8008236:	bf00      	nop
 8008238:	3708      	adds	r7, #8
 800823a:	46bd      	mov	sp, r7
 800823c:	bd80      	pop	{r7, pc}

0800823e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800823e:	b580      	push	{r7, lr}
 8008240:	b084      	sub	sp, #16
 8008242:	af00      	add	r7, sp, #0
 8008244:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008246:	2301      	movs	r3, #1
 8008248:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	2b02      	cmp	r3, #2
 8008250:	d001      	beq.n	8008256 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008252:	f7f8 f94f 	bl	80004f4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800825c:	7bfa      	ldrb	r2, [r7, #15]
 800825e:	4611      	mov	r1, r2
 8008260:	4618      	mov	r0, r3
 8008262:	f7fe fe58 	bl	8006f16 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800826c:	4618      	mov	r0, r3
 800826e:	f7fe fe11 	bl	8006e94 <USBD_LL_Reset>
}
 8008272:	bf00      	nop
 8008274:	3710      	adds	r7, #16
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}
	...

0800827c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800827c:	b580      	push	{r7, lr}
 800827e:	b082      	sub	sp, #8
 8008280:	af00      	add	r7, sp, #0
 8008282:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 800828a:	4618      	mov	r0, r3
 800828c:	f7fe fe52 	bl	8006f34 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	699b      	ldr	r3, [r3, #24]
 8008294:	2b00      	cmp	r3, #0
 8008296:	d005      	beq.n	80082a4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008298:	4b04      	ldr	r3, [pc, #16]	; (80082ac <HAL_PCD_SuspendCallback+0x30>)
 800829a:	691b      	ldr	r3, [r3, #16]
 800829c:	4a03      	ldr	r2, [pc, #12]	; (80082ac <HAL_PCD_SuspendCallback+0x30>)
 800829e:	f043 0306 	orr.w	r3, r3, #6
 80082a2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80082a4:	bf00      	nop
 80082a6:	3708      	adds	r7, #8
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	e000ed00 	.word	0xe000ed00

080082b0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b082      	sub	sp, #8
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fe fe4c 	bl	8006f5c <USBD_LL_Resume>
}
 80082c4:	bf00      	nop
 80082c6:	3708      	adds	r7, #8
 80082c8:	46bd      	mov	sp, r7
 80082ca:	bd80      	pop	{r7, pc}

080082cc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b082      	sub	sp, #8
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80082d4:	4a1f      	ldr	r2, [pc, #124]	; (8008354 <USBD_LL_Init+0x88>)
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	4a1d      	ldr	r2, [pc, #116]	; (8008354 <USBD_LL_Init+0x88>)
 80082e0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 80082e4:	4b1b      	ldr	r3, [pc, #108]	; (8008354 <USBD_LL_Init+0x88>)
 80082e6:	4a1c      	ldr	r2, [pc, #112]	; (8008358 <USBD_LL_Init+0x8c>)
 80082e8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80082ea:	4b1a      	ldr	r3, [pc, #104]	; (8008354 <USBD_LL_Init+0x88>)
 80082ec:	2208      	movs	r2, #8
 80082ee:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80082f0:	4b18      	ldr	r3, [pc, #96]	; (8008354 <USBD_LL_Init+0x88>)
 80082f2:	2202      	movs	r2, #2
 80082f4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80082f6:	4b17      	ldr	r3, [pc, #92]	; (8008354 <USBD_LL_Init+0x88>)
 80082f8:	2200      	movs	r2, #0
 80082fa:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80082fc:	4b15      	ldr	r3, [pc, #84]	; (8008354 <USBD_LL_Init+0x88>)
 80082fe:	2200      	movs	r2, #0
 8008300:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008302:	4b14      	ldr	r3, [pc, #80]	; (8008354 <USBD_LL_Init+0x88>)
 8008304:	2200      	movs	r2, #0
 8008306:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008308:	4812      	ldr	r0, [pc, #72]	; (8008354 <USBD_LL_Init+0x88>)
 800830a:	f7f8 ff66 	bl	80011da <HAL_PCD_Init>
 800830e:	4603      	mov	r3, r0
 8008310:	2b00      	cmp	r3, #0
 8008312:	d001      	beq.n	8008318 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008314:	f7f8 f8ee 	bl	80004f4 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800831e:	2318      	movs	r3, #24
 8008320:	2200      	movs	r2, #0
 8008322:	2100      	movs	r1, #0
 8008324:	f7fa fbc5 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800832e:	2358      	movs	r3, #88	; 0x58
 8008330:	2200      	movs	r2, #0
 8008332:	2180      	movs	r1, #128	; 0x80
 8008334:	f7fa fbbd 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_HID */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 800833e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008342:	2200      	movs	r2, #0
 8008344:	2181      	movs	r1, #129	; 0x81
 8008346:	f7fa fbb4 	bl	8002ab2 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_HID */
  return USBD_OK;
 800834a:	2300      	movs	r3, #0
}
 800834c:	4618      	mov	r0, r3
 800834e:	3708      	adds	r7, #8
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}
 8008354:	2000089c 	.word	0x2000089c
 8008358:	40005c00 	.word	0x40005c00

0800835c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008364:	2300      	movs	r3, #0
 8008366:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008368:	2300      	movs	r3, #0
 800836a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008372:	4618      	mov	r0, r3
 8008374:	f7f9 f83c 	bl	80013f0 <HAL_PCD_Start>
 8008378:	4603      	mov	r3, r0
 800837a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800837c:	7bfb      	ldrb	r3, [r7, #15]
 800837e:	4618      	mov	r0, r3
 8008380:	f000 f93c 	bl	80085fc <USBD_Get_USB_Status>
 8008384:	4603      	mov	r3, r0
 8008386:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008388:	7bbb      	ldrb	r3, [r7, #14]
}
 800838a:	4618      	mov	r0, r3
 800838c:	3710      	adds	r7, #16
 800838e:	46bd      	mov	sp, r7
 8008390:	bd80      	pop	{r7, pc}

08008392 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008392:	b580      	push	{r7, lr}
 8008394:	b084      	sub	sp, #16
 8008396:	af00      	add	r7, sp, #0
 8008398:	6078      	str	r0, [r7, #4]
 800839a:	4608      	mov	r0, r1
 800839c:	4611      	mov	r1, r2
 800839e:	461a      	mov	r2, r3
 80083a0:	4603      	mov	r3, r0
 80083a2:	70fb      	strb	r3, [r7, #3]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70bb      	strb	r3, [r7, #2]
 80083a8:	4613      	mov	r3, r2
 80083aa:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ac:	2300      	movs	r3, #0
 80083ae:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083b0:	2300      	movs	r3, #0
 80083b2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 80083ba:	78bb      	ldrb	r3, [r7, #2]
 80083bc:	883a      	ldrh	r2, [r7, #0]
 80083be:	78f9      	ldrb	r1, [r7, #3]
 80083c0:	f7f9 f9b6 	bl	8001730 <HAL_PCD_EP_Open>
 80083c4:	4603      	mov	r3, r0
 80083c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083c8:	7bfb      	ldrb	r3, [r7, #15]
 80083ca:	4618      	mov	r0, r3
 80083cc:	f000 f916 	bl	80085fc <USBD_Get_USB_Status>
 80083d0:	4603      	mov	r3, r0
 80083d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80083d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80083d6:	4618      	mov	r0, r3
 80083d8:	3710      	adds	r7, #16
 80083da:	46bd      	mov	sp, r7
 80083dc:	bd80      	pop	{r7, pc}

080083de <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083de:	b580      	push	{r7, lr}
 80083e0:	b084      	sub	sp, #16
 80083e2:	af00      	add	r7, sp, #0
 80083e4:	6078      	str	r0, [r7, #4]
 80083e6:	460b      	mov	r3, r1
 80083e8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083ea:	2300      	movs	r3, #0
 80083ec:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083ee:	2300      	movs	r3, #0
 80083f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083f8:	78fa      	ldrb	r2, [r7, #3]
 80083fa:	4611      	mov	r1, r2
 80083fc:	4618      	mov	r0, r3
 80083fe:	f7f9 f9fd 	bl	80017fc <HAL_PCD_EP_Close>
 8008402:	4603      	mov	r3, r0
 8008404:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008406:	7bfb      	ldrb	r3, [r7, #15]
 8008408:	4618      	mov	r0, r3
 800840a:	f000 f8f7 	bl	80085fc <USBD_Get_USB_Status>
 800840e:	4603      	mov	r3, r0
 8008410:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008412:	7bbb      	ldrb	r3, [r7, #14]
}
 8008414:	4618      	mov	r0, r3
 8008416:	3710      	adds	r7, #16
 8008418:	46bd      	mov	sp, r7
 800841a:	bd80      	pop	{r7, pc}

0800841c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800841c:	b580      	push	{r7, lr}
 800841e:	b084      	sub	sp, #16
 8008420:	af00      	add	r7, sp, #0
 8008422:	6078      	str	r0, [r7, #4]
 8008424:	460b      	mov	r3, r1
 8008426:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008428:	2300      	movs	r3, #0
 800842a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008436:	78fa      	ldrb	r2, [r7, #3]
 8008438:	4611      	mov	r1, r2
 800843a:	4618      	mov	r0, r3
 800843c:	f7f9 faa6 	bl	800198c <HAL_PCD_EP_SetStall>
 8008440:	4603      	mov	r3, r0
 8008442:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008444:	7bfb      	ldrb	r3, [r7, #15]
 8008446:	4618      	mov	r0, r3
 8008448:	f000 f8d8 	bl	80085fc <USBD_Get_USB_Status>
 800844c:	4603      	mov	r3, r0
 800844e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008450:	7bbb      	ldrb	r3, [r7, #14]
}
 8008452:	4618      	mov	r0, r3
 8008454:	3710      	adds	r7, #16
 8008456:	46bd      	mov	sp, r7
 8008458:	bd80      	pop	{r7, pc}

0800845a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800845a:	b580      	push	{r7, lr}
 800845c:	b084      	sub	sp, #16
 800845e:	af00      	add	r7, sp, #0
 8008460:	6078      	str	r0, [r7, #4]
 8008462:	460b      	mov	r3, r1
 8008464:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008466:	2300      	movs	r3, #0
 8008468:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800846a:	2300      	movs	r3, #0
 800846c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008474:	78fa      	ldrb	r2, [r7, #3]
 8008476:	4611      	mov	r1, r2
 8008478:	4618      	mov	r0, r3
 800847a:	f7f9 fae7 	bl	8001a4c <HAL_PCD_EP_ClrStall>
 800847e:	4603      	mov	r3, r0
 8008480:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008482:	7bfb      	ldrb	r3, [r7, #15]
 8008484:	4618      	mov	r0, r3
 8008486:	f000 f8b9 	bl	80085fc <USBD_Get_USB_Status>
 800848a:	4603      	mov	r3, r0
 800848c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800848e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008490:	4618      	mov	r0, r3
 8008492:	3710      	adds	r7, #16
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008498:	b480      	push	{r7}
 800849a:	b085      	sub	sp, #20
 800849c:	af00      	add	r7, sp, #0
 800849e:	6078      	str	r0, [r7, #4]
 80084a0:	460b      	mov	r3, r1
 80084a2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084aa:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80084ac:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	da0c      	bge.n	80084ce <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80084b4:	78fb      	ldrb	r3, [r7, #3]
 80084b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084ba:	68f9      	ldr	r1, [r7, #12]
 80084bc:	1c5a      	adds	r2, r3, #1
 80084be:	4613      	mov	r3, r2
 80084c0:	009b      	lsls	r3, r3, #2
 80084c2:	4413      	add	r3, r2
 80084c4:	00db      	lsls	r3, r3, #3
 80084c6:	440b      	add	r3, r1
 80084c8:	3302      	adds	r3, #2
 80084ca:	781b      	ldrb	r3, [r3, #0]
 80084cc:	e00b      	b.n	80084e6 <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80084ce:	78fb      	ldrb	r3, [r7, #3]
 80084d0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80084d4:	68f9      	ldr	r1, [r7, #12]
 80084d6:	4613      	mov	r3, r2
 80084d8:	009b      	lsls	r3, r3, #2
 80084da:	4413      	add	r3, r2
 80084dc:	00db      	lsls	r3, r3, #3
 80084de:	440b      	add	r3, r1
 80084e0:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80084e4:	781b      	ldrb	r3, [r3, #0]
  }
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	3714      	adds	r7, #20
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bc80      	pop	{r7}
 80084ee:	4770      	bx	lr

080084f0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b084      	sub	sp, #16
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	460b      	mov	r3, r1
 80084fa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80084fc:	2300      	movs	r3, #0
 80084fe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008500:	2300      	movs	r3, #0
 8008502:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800850a:	78fa      	ldrb	r2, [r7, #3]
 800850c:	4611      	mov	r1, r2
 800850e:	4618      	mov	r0, r3
 8008510:	f7f9 f8e9 	bl	80016e6 <HAL_PCD_SetAddress>
 8008514:	4603      	mov	r3, r0
 8008516:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008518:	7bfb      	ldrb	r3, [r7, #15]
 800851a:	4618      	mov	r0, r3
 800851c:	f000 f86e 	bl	80085fc <USBD_Get_USB_Status>
 8008520:	4603      	mov	r3, r0
 8008522:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008524:	7bbb      	ldrb	r3, [r7, #14]
}
 8008526:	4618      	mov	r0, r3
 8008528:	3710      	adds	r7, #16
 800852a:	46bd      	mov	sp, r7
 800852c:	bd80      	pop	{r7, pc}

0800852e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 800852e:	b580      	push	{r7, lr}
 8008530:	b086      	sub	sp, #24
 8008532:	af00      	add	r7, sp, #0
 8008534:	60f8      	str	r0, [r7, #12]
 8008536:	607a      	str	r2, [r7, #4]
 8008538:	461a      	mov	r2, r3
 800853a:	460b      	mov	r3, r1
 800853c:	72fb      	strb	r3, [r7, #11]
 800853e:	4613      	mov	r3, r2
 8008540:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008542:	2300      	movs	r3, #0
 8008544:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008546:	2300      	movs	r3, #0
 8008548:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008550:	893b      	ldrh	r3, [r7, #8]
 8008552:	7af9      	ldrb	r1, [r7, #11]
 8008554:	687a      	ldr	r2, [r7, #4]
 8008556:	f7f9 f9d6 	bl	8001906 <HAL_PCD_EP_Transmit>
 800855a:	4603      	mov	r3, r0
 800855c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800855e:	7dfb      	ldrb	r3, [r7, #23]
 8008560:	4618      	mov	r0, r3
 8008562:	f000 f84b 	bl	80085fc <USBD_Get_USB_Status>
 8008566:	4603      	mov	r3, r0
 8008568:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800856a:	7dbb      	ldrb	r3, [r7, #22]
}
 800856c:	4618      	mov	r0, r3
 800856e:	3718      	adds	r7, #24
 8008570:	46bd      	mov	sp, r7
 8008572:	bd80      	pop	{r7, pc}

08008574 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b086      	sub	sp, #24
 8008578:	af00      	add	r7, sp, #0
 800857a:	60f8      	str	r0, [r7, #12]
 800857c:	607a      	str	r2, [r7, #4]
 800857e:	461a      	mov	r2, r3
 8008580:	460b      	mov	r3, r1
 8008582:	72fb      	strb	r3, [r7, #11]
 8008584:	4613      	mov	r3, r2
 8008586:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008588:	2300      	movs	r3, #0
 800858a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800858c:	2300      	movs	r3, #0
 800858e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008596:	893b      	ldrh	r3, [r7, #8]
 8008598:	7af9      	ldrb	r1, [r7, #11]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	f7f9 f976 	bl	800188c <HAL_PCD_EP_Receive>
 80085a0:	4603      	mov	r3, r0
 80085a2:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80085a4:	7dfb      	ldrb	r3, [r7, #23]
 80085a6:	4618      	mov	r0, r3
 80085a8:	f000 f828 	bl	80085fc <USBD_Get_USB_Status>
 80085ac:	4603      	mov	r3, r0
 80085ae:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80085b0:	7dbb      	ldrb	r3, [r7, #22]
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3718      	adds	r7, #24
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}
	...

080085bc <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80085bc:	b480      	push	{r7}
 80085be:	b083      	sub	sp, #12
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80085c4:	4b02      	ldr	r3, [pc, #8]	; (80085d0 <USBD_static_malloc+0x14>)
}
 80085c6:	4618      	mov	r0, r3
 80085c8:	370c      	adds	r7, #12
 80085ca:	46bd      	mov	sp, r7
 80085cc:	bc80      	pop	{r7}
 80085ce:	4770      	bx	lr
 80085d0:	200002ec 	.word	0x200002ec

080085d4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80085d4:	b480      	push	{r7}
 80085d6:	b083      	sub	sp, #12
 80085d8:	af00      	add	r7, sp, #0
 80085da:	6078      	str	r0, [r7, #4]

}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	bc80      	pop	{r7}
 80085e4:	4770      	bx	lr

080085e6 <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80085e6:	b480      	push	{r7}
 80085e8:	b083      	sub	sp, #12
 80085ea:	af00      	add	r7, sp, #0
 80085ec:	6078      	str	r0, [r7, #4]
 80085ee:	460b      	mov	r3, r1
 80085f0:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 80085f2:	bf00      	nop
 80085f4:	370c      	adds	r7, #12
 80085f6:	46bd      	mov	sp, r7
 80085f8:	bc80      	pop	{r7}
 80085fa:	4770      	bx	lr

080085fc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80085fc:	b480      	push	{r7}
 80085fe:	b085      	sub	sp, #20
 8008600:	af00      	add	r7, sp, #0
 8008602:	4603      	mov	r3, r0
 8008604:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008606:	2300      	movs	r3, #0
 8008608:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800860a:	79fb      	ldrb	r3, [r7, #7]
 800860c:	2b03      	cmp	r3, #3
 800860e:	d817      	bhi.n	8008640 <USBD_Get_USB_Status+0x44>
 8008610:	a201      	add	r2, pc, #4	; (adr r2, 8008618 <USBD_Get_USB_Status+0x1c>)
 8008612:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008616:	bf00      	nop
 8008618:	08008629 	.word	0x08008629
 800861c:	0800862f 	.word	0x0800862f
 8008620:	08008635 	.word	0x08008635
 8008624:	0800863b 	.word	0x0800863b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008628:	2300      	movs	r3, #0
 800862a:	73fb      	strb	r3, [r7, #15]
    break;
 800862c:	e00b      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800862e:	2302      	movs	r3, #2
 8008630:	73fb      	strb	r3, [r7, #15]
    break;
 8008632:	e008      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008634:	2301      	movs	r3, #1
 8008636:	73fb      	strb	r3, [r7, #15]
    break;
 8008638:	e005      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800863a:	2302      	movs	r3, #2
 800863c:	73fb      	strb	r3, [r7, #15]
    break;
 800863e:	e002      	b.n	8008646 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008640:	2302      	movs	r3, #2
 8008642:	73fb      	strb	r3, [r7, #15]
    break;
 8008644:	bf00      	nop
  }
  return usb_status;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3714      	adds	r7, #20
 800864c:	46bd      	mov	sp, r7
 800864e:	bc80      	pop	{r7}
 8008650:	4770      	bx	lr
 8008652:	bf00      	nop

08008654 <__libc_init_array>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	2600      	movs	r6, #0
 8008658:	4d0c      	ldr	r5, [pc, #48]	; (800868c <__libc_init_array+0x38>)
 800865a:	4c0d      	ldr	r4, [pc, #52]	; (8008690 <__libc_init_array+0x3c>)
 800865c:	1b64      	subs	r4, r4, r5
 800865e:	10a4      	asrs	r4, r4, #2
 8008660:	42a6      	cmp	r6, r4
 8008662:	d109      	bne.n	8008678 <__libc_init_array+0x24>
 8008664:	f000 f822 	bl	80086ac <_init>
 8008668:	2600      	movs	r6, #0
 800866a:	4d0a      	ldr	r5, [pc, #40]	; (8008694 <__libc_init_array+0x40>)
 800866c:	4c0a      	ldr	r4, [pc, #40]	; (8008698 <__libc_init_array+0x44>)
 800866e:	1b64      	subs	r4, r4, r5
 8008670:	10a4      	asrs	r4, r4, #2
 8008672:	42a6      	cmp	r6, r4
 8008674:	d105      	bne.n	8008682 <__libc_init_array+0x2e>
 8008676:	bd70      	pop	{r4, r5, r6, pc}
 8008678:	f855 3b04 	ldr.w	r3, [r5], #4
 800867c:	4798      	blx	r3
 800867e:	3601      	adds	r6, #1
 8008680:	e7ee      	b.n	8008660 <__libc_init_array+0xc>
 8008682:	f855 3b04 	ldr.w	r3, [r5], #4
 8008686:	4798      	blx	r3
 8008688:	3601      	adds	r6, #1
 800868a:	e7f2      	b.n	8008672 <__libc_init_array+0x1e>
 800868c:	0800872c 	.word	0x0800872c
 8008690:	0800872c 	.word	0x0800872c
 8008694:	0800872c 	.word	0x0800872c
 8008698:	08008730 	.word	0x08008730

0800869c <memset>:
 800869c:	4603      	mov	r3, r0
 800869e:	4402      	add	r2, r0
 80086a0:	4293      	cmp	r3, r2
 80086a2:	d100      	bne.n	80086a6 <memset+0xa>
 80086a4:	4770      	bx	lr
 80086a6:	f803 1b01 	strb.w	r1, [r3], #1
 80086aa:	e7f9      	b.n	80086a0 <memset+0x4>

080086ac <_init>:
 80086ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ae:	bf00      	nop
 80086b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086b2:	bc08      	pop	{r3}
 80086b4:	469e      	mov	lr, r3
 80086b6:	4770      	bx	lr

080086b8 <_fini>:
 80086b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086ba:	bf00      	nop
 80086bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80086be:	bc08      	pop	{r3}
 80086c0:	469e      	mov	lr, r3
 80086c2:	4770      	bx	lr
